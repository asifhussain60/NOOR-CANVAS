param(
    [Parameter(Position=0)]
    [int]$SessionId,
    [switch]$Help
)

Clear-Host

# Function definitions (must be before usage)
function Test-NoorCanvasRunning {
    try {
        $response = Invoke-WebRequest -Uri "https://localhost:9091" -TimeoutSec 5 -SkipCertificateCheck -ErrorAction SilentlyContinue
        return $true
    } catch {
        return $false
    }
}

function Start-NoorCanvasIfNeeded {
    Write-Host ""
    Write-Host "Checking if NOOR Canvas application is running..." -ForegroundColor Yellow
    
    if (Test-NoorCanvasRunning) {
        Write-Host "✅ NOOR Canvas is already running at https://localhost:9091" -ForegroundColor Green
        return
    }
    
    Write-Host "❌ NOOR Canvas application is not running" -ForegroundColor Red
    Write-Host "🚀 Auto-starting NOOR Canvas application..." -ForegroundColor Green
    
    # Automatically start the application in background using run-with-iiskill.ps1
    $scriptPath = "D:\PROJECTS\NOOR CANVAS\run-with-iiskill.ps1"
    if (Test-Path $scriptPath) {
        Start-Process -FilePath "powershell.exe" -ArgumentList "-NoProfile", "-ExecutionPolicy", "Bypass", "-File", $scriptPath -WindowStyle Minimized
        
        Write-Host "✅ Application is starting in background..." -ForegroundColor Yellow
        Write-Host "The application will be available at:" -ForegroundColor Green
        Write-Host "  - HTTPS: https://localhost:9091" -ForegroundColor Cyan
        Write-Host "  - HTTP:  http://localhost:9090" -ForegroundColor Cyan
        Write-Host ""
        Write-Host "💡 Please wait 10-15 seconds for the application to fully load before using the generated tokens." -ForegroundColor Yellow
    } else {
        Write-Host "❌ Could not find run-with-iiskill.ps1 script" -ForegroundColor Red
        Write-Host "Please start the application manually using: run-with-iiskill.ps1" -ForegroundColor Yellow
    }
}

if ($Help) {
    Write-Host "NOOR Canvas Token (nct) - Interactive Host Provisioner" -ForegroundColor Cyan
    Write-Host "====================================================="
    Write-Host ""
    Write-Host "DESCRIPTION:"
    Write-Host "  Interactive tool to generate Host GUIDs for NOOR Canvas sessions"
    Write-Host ""
    Write-Host "USAGE:"
    Write-Host "  nct                    # Launch interactive Host Provisioner"
    Write-Host "  nct 215                # Generate token for session ID 215"
    Write-Host "  nct [sessionId]        # Generate token for specific session"
    Write-Host "  nct -Help              # Show this help"
    Write-Host ""
    Write-Host "FEATURES:"
    Write-Host "  - Interactive session ID input OR direct session parameter"
    Write-Host "  - Automatic Host and User GUID generation"
    Write-Host "  - Participant session link creation with User GUID attachment"
    Write-Host "  - Ready-to-use Host GUIDs for authentication"
    Write-Host "  - Complete session setup including participant access"
    Write-Host ""
    Write-Host "EXAMPLE OUTPUT:"
    Write-Host "  Session ID: 123"
    Write-Host "  Host GUID: 12345678-1234-1234-1234-123456789abc"
    Write-Host "  User Session GUID: 87654321-4321-4321-4321-210987654321"
    Write-Host "  Participant URL: https://localhost:9091/join/{link}?userGuid={guid}"
    return
}

if ($SessionId -gt 0) {
    Write-Host "NOOR Canvas Token (nct) - Session-Specific Host GUID Generator" -ForegroundColor Green
    Write-Host "===============================================================" -ForegroundColor Green
    Write-Host ""
    Write-Host "Generating Host GUID for Session ID: $SessionId" -ForegroundColor Cyan
    Write-Host ""

    $originalLocation = Get-Location
    try {
        Set-Location "D:\PROJECTS\NOOR CANVAS\Tools\HostProvisioner\HostProvisioner"
        $provisionerOutput = & dotnet run -- create --session-id $SessionId --created-by "NC Global Command" --dry-run false --create-user 2>&1 | Out-String
        
        # Extract 8-character Host Token from friendly token logs
        $hostToken = $null
        if ($provisionerOutput -match "Host Token:\s*([A-Z0-9]{8})") {
            $hostToken = $matches[1]
        }

        # Extract 8-character User Token from friendly token logs
        $userToken = $null
        if ($provisionerOutput -match "User Token:\s*([A-Z0-9]{8})") {
            $userToken = $matches[1]
        }

        # Extract Host URL from friendly token logs
        $hostUrl = $null
        if ($provisionerOutput -match "Host URL:\s*(https?://[^\s]+)") {
            $hostUrl = $matches[1]
        }

        # Extract Participant URL from friendly token logs
        $participantUrl = $null
        if ($provisionerOutput -match "Participant URL:\s*(https?://[^\s]+)") {
            $participantUrl = $matches[1]
        }

        # Extract Session IDs for reference
        $ksessionsId = $null
        if ($provisionerOutput -match "KSESSIONS Session ID:\s*(\d+)") {
            $ksessionsId = $matches[1]
        }
        
        $canvasSessionId = $null
        if ($provisionerOutput -match "Canvas Session ID:\s*(\d+)") {
            $canvasSessionId = $matches[1]
        }

        Write-Host $provisionerOutput

        if ($LASTEXITCODE -ne 0) {
            Write-Host ""
            Write-Host "Host Provisioner failed for Session ID: $SessionId" -ForegroundColor Red
            Write-Host "Try building the project first or check if session ID exists" -ForegroundColor Yellow
        } else {
            Write-Host ""
            Write-Host "🎯 Session Tokens Generated Successfully!" -ForegroundColor Green
            Write-Host "===========================================" -ForegroundColor Green
            
            if ($ksessionsId -and $canvasSessionId) {
                Write-Host "KSESSIONS Session ID: $ksessionsId" -ForegroundColor White
                Write-Host "Canvas Session ID: $canvasSessionId" -ForegroundColor White
                Write-Host "Generated: $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss') UTC" -ForegroundColor White
                Write-Host ""
            }
            
            if ($userToken -and $participantUrl) {
                Write-Host "══════════════════════════════════════" -ForegroundColor Cyan
                Write-Host "🔗 USER AUTHENTICATION:" -ForegroundColor Cyan
                Write-Host "══════════════════════════════════════" -ForegroundColor Cyan
                Write-Host "   Participant Token: " -NoNewline -ForegroundColor White
                Write-Host $userToken -ForegroundColor Yellow
                Write-Host "   Participant URL: " -NoNewline -ForegroundColor White  
                Write-Host $participantUrl -ForegroundColor Cyan
                Write-Host ""
            }
            
            if ($hostToken -and $hostUrl) {
                Write-Host "══════════════════════════════════════" -ForegroundColor Yellow
                Write-Host "🔐 HOST AUTHENTICATION:" -ForegroundColor Yellow
                Write-Host "══════════════════════════════════════" -ForegroundColor Yellow
                Write-Host "   Host Token: " -NoNewline -ForegroundColor White
                Write-Host $hostToken -ForegroundColor Green
                Write-Host "   Host URL: " -NoNewline -ForegroundColor White
                Write-Host $hostUrl -ForegroundColor Cyan
                Write-Host ""
            }
            
            Write-Host "══════════════════════════════════════" -ForegroundColor Green
            Write-Host "📊 DATABASE:" -ForegroundColor Green
            Write-Host "══════════════════════════════════════" -ForegroundColor Green
            Write-Host "   Saved to: canvas.HostSessions, canvas.SecureTokens" -ForegroundColor White
            if ($canvasSessionId) {
                Write-Host "   Host Session ID: $canvasSessionId" -ForegroundColor White
            }
            Write-Host ""
            
            Write-Host "Instructions:" -ForegroundColor Magenta
            Write-Host "1. Use Host Token for authentication in the application" -ForegroundColor White
            Write-Host "2. Share the Participant URL for easy user access" -ForegroundColor White
            Write-Host "3. All tokens are stored securely with expiration tracking" -ForegroundColor White
            Write-Host ""
        }
    }
    finally {
        Set-Location $originalLocation
    }
} else {
    Write-Host "NOOR Canvas Token (nct) - Host GUID Generator" -ForegroundColor Green
    Write-Host "============================================="
    Write-Host ""
    Write-Host "Launching Interactive Host Provisioner..." -ForegroundColor Yellow
    Write-Host ""

    $originalLocation = Get-Location
    try {
        Set-Location "D:\PROJECTS\NOOR CANVAS\Tools\HostProvisioner\HostProvisioner"
        & dotnet run
        
        if ($LASTEXITCODE -ne 0) {
            Write-Host ""
            Write-Host "Host Provisioner failed to start" -ForegroundColor Red
            Write-Host "Try building the project first"
        }
    }
    finally {
        Set-Location $originalLocation
    }
}

# Application startup integration after token generation

# Only offer to start application if tokens were generated successfully
if ($LASTEXITCODE -eq 0) {
    Start-NoorCanvasIfNeeded
}

Write-Host ""
