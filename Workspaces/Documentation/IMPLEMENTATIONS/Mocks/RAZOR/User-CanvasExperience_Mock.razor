@page "/"

<PageTitle>Noor Canvas</PageTitle>

<!-- Main Grid Layout -->
<div class="w-full max-w-7xl grid grid-cols-1 lg:grid-cols-3 gap-6 flex-1">

    <!-- Left Column: Main Canvas & Metadata. Added max-h-[920px] to limit height. -->
    <main class="lg:col-span-2 bg-white rounded-3xl p-6 shadow-xl border border-gray-100 flex flex-col h-full max-h-[920px]">
        <!-- Canvas Section -->
        <div class="flex items-center justify-center mb-4">
            <div class="w-24 h-24 rounded-full bg-[#D4AF37] flex items-center justify-center">
                <span class="text-white text-4xl font-bold poppins">NC</span>
            </div>
        </div>

        <!-- Session Metadata -->
        <div class="mt-6 mb-4 grid grid-cols-2 md:grid-cols-4 gap-4 text-center">
            <div class="p-3 bg-[#FDFBEB] rounded-xl shadow-md border border-[#D4AF37] hover:scale-105 transition-transform">
                <i class="fa-solid fa-users text-2xl text-[#006400] mb-1"></i>
                <p class="text-xs inter uppercase font-medium text-[#4B3C2B]">Participants</p>
                <p id="participants-count" class="text-xl poppins font-bold text-[#4B3C2B]">@Model.Participants.Count</p>
            </div>
            <div class="p-3 bg-[#FDFBEB] rounded-xl shadow-md border border-[#D4AF37] hover:scale-105 transition-transform">
                <i class="fa-regular fa-clock text-2xl text-[#006400] mb-1"></i>
                <p class="text-xs inter uppercase font-medium text-[#4B3C2B]">Duration</p>
                <p id="duration-timer" class="text-xl poppins font-bold text-[#4B3C2B]">@FormatTime(Model.Duration)</p>
            </div>
            <div class="p-3 bg-[#FDFBEB] rounded-xl shadow-md border border-[#D4AF37] hover:scale-105 transition-transform md:col-span-2">
                <i class="fa-solid fa-book text-2xl text-[#006400] mb-1"></i>
                <p class="text-xs inter uppercase font-medium text-[#4B3C2B]">Topic</p>
                <p id="topic" class="text-md poppins font-bold text-[#4B3C2B]">@Model.Topic</p>
            </div>
        </div>

        <div id="session-content" class="h-[400px] border border-[#D4AF37] p-8 rounded-3xl bg-[#F9FAFB] shadow-inner transition-all hover:shadow-lg flex items-center justify-center text-center">
            <p class="inter text-lg text-[#706357] font-light animate-pulse-subtle">Content from the session will appear here.</p>
        </div>
        <!-- The 'Ask a question' panel -->
        <div class="mt-4 bg-[#FDFBEB] rounded-xl transition-all duration-300 ease-in-out overflow-hidden border border-[#D4AF37]" id="ask-question-box">
            <div class="flex items-center justify-center space-x-2 p-4">
                <i class="fa-solid fa-hand-raised text-[#006400] text-3xl"></i>
                <h4 class="poppins text-md font-semibold text-[#4B3C2B]">Ask a question</h4>
            </div>
            <div class="flex items-stretch space-x-2 px-4 pb-4">
                <textarea @bind="QuestionInput" class="w-3/4 p-4 rounded-xl border-2 border-[#D4AF37] focus:outline-none focus:ring-2 focus:ring-[#C5B358] inter text-[#4B3C2B] placeholder:text-gray-500" placeholder="Ask a question..." rows="3"></textarea>
                <button @onclick="SubmitQuestion" class="w-1/4 py-3 px-6 rounded-xl text-white font-semibold transition-transform transform hover:scale-105 shadow-golden @(EditingQuestionIndex != null ? "bg-[#006400]" : "bg-[#D4AF37]") flex items-center justify-center space-x-2 border-2 border-[#D4AF37]">
                    <span id="submit-btn-text" class="text-lg text-white">@(EditingQuestionIndex != null ? "Update" : "Submit")</span>
                </button>
            </div>
        </div>
    </main>

    <!-- Right Column: Q&A and Participants. Added max-h-[920px] to limit height. -->
    <aside class="lg:col-span-1 bg-white rounded-3xl p-6 shadow-xl border border-gray-100 flex flex-col h-full max-h-[920px]">
        <!-- Tabs -->
        <div class="flex mb-4 border-b-2 border-gray-200">
            <button @onclick="() => ActiveTab = Tab.QA" class="flex-1 py-3 px-2 text-center text-[#4B3C2B] poppins font-semibold border-b-2 border-transparent transition-all tab-button @(ActiveTab == Tab.QA ? "active" : "")">Q&A</button>
            <button @onclick="() => ActiveTab = Tab.Participants" class="flex-1 py-3 px-2 text-center text-[#4B3C2B] poppins font-semibold border-b-2 border-transparent transition-all tab-button @(ActiveTab == Tab.Participants ? "active" : "")">Participants</button>
        </div>

        <!-- Q&A Content -->
        <div class="tab-content flex-1 overflow-y-auto custom-scrollbar @(ActiveTab == Tab.QA ? "" : "hidden")">
            <div class="mt-2 space-y-4 pr-3">
                <h3 class="inter font-semibold text-sm text-[#4B3C2B]">Recent Questions</h3>
                <div id="questions-list" class="flex flex-col space-y-3">
                    @foreach (var q in Model.Questions)
                    {
                        var index = Model.Questions.IndexOf(q);
                        var bgColor = q.IsMyQuestion ? "bg-[#E6F3EA]" : "bg-[#FBF9F6]";
                        var upvoteColor = q.IsMyQuestion ? "text-[#006400]" : "text-[#D4AF37]";
                        var borderColor = q.IsMyQuestion ? "border-[#006400]" : "border-[#D4AF37]";

                        <div class="flex items-start p-3 rounded-xl border @borderColor @bgColor text-[#4B3C2B] group transition-colors duration-200">
                            <div class="flex flex-col items-center space-y-1 mr-3">
                                <button class="@upvoteColor text-lg transition-colors hover:text-[#008000]">
                                    <i class="fa-solid fa-arrow-up"></i>
                                </button>
                                <span class="vote-count bg-[#C5B358] text-[#4B3C2B] rounded-full px-2 text-xs font-bold">@q.Votes</span>
                            </div>
                            <div class="flex-1 flex flex-col justify-center">
                                <div class="flex items-center justify-between">
                                    <span class="inter text-sm w-full leading-snug">@q.Text</span>
                                    @if (q.IsMyQuestion)
                                    {
                                        <div class="flex items-center space-x-2">
                                            <i @onclick="() => EditQuestion(index)" class="fa-solid fa-pen text-xs text-gray-500 hover:text-gray-700 cursor-pointer edit-btn"></i>
                                            <i @onclick="() => ShowDeleteModal(index)" class="fa-solid fa-trash-can text-xs text-red-500 hover:text-red-700 cursor-pointer delete-btn"></i>
                                        </div>
                                    }
                                </div>
                                @if (q.IsMyQuestion)
                                {
                                    <span class="inter text-xs font-semibold text-[#006400] mt-1">Your Question</span>
                                }
                            </div>
                        </div>
                    }
                </div>
            </div>
        </div>

        <!-- Participants Content -->
        <div class="tab-content flex-1 overflow-y-auto custom-scrollbar @(ActiveTab == Tab.Participants ? "" : "hidden")">
            <h3 class="inter font-semibold text-sm text-[#4B3C2B]">All Participants</h3>
            <ul id="participants-list" class="mt-4 space-y-2">
                @foreach (var p in Model.Participants)
                {
                    <li class="flex items-center space-x-3 p-3 rounded-xl bg-white hover:bg-gray-100 transition-colors">
                        <img src="@($"https://placehold.co/24x16/4B3C2B/FBF9F6?text={p.Country}")" class="rounded-full border border-gray-300">
                        <span class="inter text-sm font-medium text-[#4B3C2B]">@p.Name</span>
                    </li>
                }
            </ul>
        </div>
    </aside>
</div>

<!-- Confirmation Modal -->
@if (IsModalVisible)
{
    <div class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 modal visible opacity-100">
        <div class="bg-white p-8 rounded-2xl shadow-xl max-w-sm w-full text-center transform scale-95 transition-all">
            <h4 class="text-xl poppins font-bold text-[#4B3C2B] mb-4">Confirm Deletion</h4>
            <p class="inter text-sm text-gray-600 mb-6">Are you sure you want to delete this question? This action cannot be undone.</p>
            <div class="flex justify-around space-x-4">
                <button @onclick="DeleteConfirmed" class="flex-1 py-2 px-4 rounded-xl text-white font-semibold bg-[#8B0000] hover:bg-[#A52A2A] transition-colors">
                    Delete
                </button>
                <button @onclick="CancelDelete" class="flex-1 py-2 px-4 rounded-xl text-[#4B3C2B] font-semibold bg-gray-200 hover:bg-gray-300 transition-colors">
                    Cancel
                </button>
            </div>
        </div>
    </div>
}

@code {
    private ModelData Model { get; set; }
    private string QuestionInput { get; set; } = string.Empty;
    private int? EditingQuestionIndex { get; set; }
    private int? QuestionToDeleteIndex { get; set; }
    private bool IsModalVisible { get; set; } = false;
    private System.Threading.Timer? _timer;

    private enum Tab { QA, Participants }
    private Tab ActiveTab { get; set; } = Tab.QA;

    public class ModelData
    {
        public DateTime StartTime { get; set; } = DateTime.Now;
        public TimeSpan Duration { get; set; }
        public List<Participant> Participants { get; set; }
        public List<Question> Questions { get; set; }
        public string Topic { get; set; } = "Chapter 3: Foundational Concepts";
    }

    public class Participant
    {
        public string Name { get; set; }
        public string Country { get; set; }
    }

    public class Question
    {
        public string Text { get; set; }
        public int Votes { get; set; }
        public bool IsMyQuestion { get; set; }
    }

    protected override void OnInitialized()
    {
        Model = new ModelData
        {
            Participants = new List<Participant>
            {
                new Participant { Name = "Ahmad Khan", Country = "US" },
                new Participant { Name = "Fatima Ali", Country = "PK" },
                new Participant { Name = "Muhammad Hassan", Country = "AE" },
                new Participant { Name = "Sara Ahmed", Country = "CA" },
                new Participant { Name = "Yusuf Omar", Country = "UK" },
                new Participant { Name = "Amira Sayed", Country = "EG" },
                new Participant { Name = "Ibrahim Khan", Country = "US" },
                new Participant { Name = "Nurul Huda", Country = "MY" },
                new Participant { Name = "Zeynep Yilmaz", Country = "TR" },
                new Participant { Name = "Omar Farooq", Country = "SA" },
                new Participant { Name = "Layla Bint Ali", Country = "IQ" },
                new Participant { Name = "Hassan Malik", Country = "PK" },
                new Participant { Name = "Aisha Abdullah", Country = "AE" },
                new Participant { Name = "Samir Aboud", Country = "LB" },
                new Participant { Name = "Nadia El-Masri", Country = "EG" },
                new Participant { Name = "Kareem Omar", Country = "US" },
                new Participant { Name = "Rayan Ahmed", Country = "UK" },
                new Participant { Name = "Lina Al-Hassan", Country = "JO" },
                new Participant { Name = "Bilal Khan", Country = "CA" },
                new Participant { Name = "Zahra Hassan", Country = "TR" },
            },
            Questions = new List<Question>
            {
                new Question { Text = "Can you re-share the ayah card?", Votes = 2, IsMyQuestion = false },
                new Question { Text = "How can I implement what I've learned in my daily life?", Votes = 4, IsMyQuestion = false },
                new Question { Text = "What is the significance of the Battle of Badr and how can we apply its lessons today? This is a very long question to test the wrapping.", Votes = 10, IsMyQuestion = false },
                new Question { Text = "What's the meaning of 'Tawhid' and its importance?", Votes = 6, IsMyQuestion = true },
                new Question { Text = "What is the importance of 'sabr' (patience) in Islam?", Votes = 18, IsMyQuestion = false },
                new Question { Text = "Can you explain the pillars of Islam in more detail?", Votes = 5, IsMyQuestion = false },
                new Question { Text = "What is the role of the Prophet Muhammad (PBUH) in our lives today?", Votes = 7, IsMyQuestion = true },
                new Question { Text = "How do I start memorizing the Quran?", Votes = 3, IsMyQuestion = false },
                new Question { Text = "What are the benefits of fasting in Ramadan beyond the spiritual ones?", Votes = 12, IsMyQuestion = false },
                new Question { Text = "Is it permissible to listen to music in Islam?", Votes = 9, IsMyQuestion = true },
            }
        };

        _timer = new System.Threading.Timer((_) =>
        {
            Model.Duration = DateTime.Now - Model.StartTime;
            InvokeAsync(StateHasChanged);
        }, null, 0, 1000);
    }

    private string FormatTime(TimeSpan duration)
    {
        return $"{duration.Minutes:D2}:{duration.Seconds:D2}";
    }

    private void SubmitQuestion()
    {
        var newQuestionText = QuestionInput?.Trim();
        if (string.IsNullOrEmpty(newQuestionText)) return;

        if (EditingQuestionIndex.HasValue)
        {
            // Update existing question
            Model.Questions[EditingQuestionIndex.Value].Text = newQuestionText;
            EditingQuestionIndex = null;
        }
        else
        {
            // Add new question
            var newQuestion = new Question
            {
                Text = newQuestionText,
                Votes = 0,
                IsMyQuestion = true
            };
            Model.Questions.Add(newQuestion);
        }
        QuestionInput = string.Empty;
    }

    private void EditQuestion(int index)
    {
        QuestionInput = Model.Questions[index].Text;
        EditingQuestionIndex = index;
    }

    private void ShowDeleteModal(int index)
    {
        QuestionToDeleteIndex = index;
        IsModalVisible = true;
    }

    private void DeleteConfirmed()
    {
        if (QuestionToDeleteIndex.HasValue)
        {
            Model.Questions.RemoveAt(QuestionToDeleteIndex.Value);
            QuestionToDeleteIndex = null;
            IsModalVisible = false;
        }
    }

    private void CancelDelete()
    {
        IsModalVisible = false;
        QuestionToDeleteIndex = null;
    }
}
