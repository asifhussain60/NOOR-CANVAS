{
  "api/NoorCanvas.Controllers.AdminAuthRequest.html": {
    "href": "api/NoorCanvas.Controllers.AdminAuthRequest.html",
    "title": "Class AdminAuthRequest | NOOR CANVAS Documentation",
    "summary": "Class AdminAuthRequest Inheritance object AdminAuthRequest Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NoorCanvas.Controllers Assembly: .dll Syntax public class AdminAuthRequest Properties | Edit this page View Source AdminGuid Declaration public string AdminGuid { get; set; } Property Value Type Description string"
  },
  "api/NoorCanvas.Controllers.AdminAuthResponse.html": {
    "href": "api/NoorCanvas.Controllers.AdminAuthResponse.html",
    "title": "Class AdminAuthResponse | NOOR CANVAS Documentation",
    "summary": "Class AdminAuthResponse Inheritance object AdminAuthResponse Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NoorCanvas.Controllers Assembly: .dll Syntax public class AdminAuthResponse Properties | Edit this page View Source AdminGuid Declaration public string AdminGuid { get; set; } Property Value Type Description string | Edit this page View Source ExpiresAt Declaration public DateTime ExpiresAt { get; set; } Property Value Type Description DateTime | Edit this page View Source SessionToken Declaration public string SessionToken { get; set; } Property Value Type Description string | Edit this page View Source Success Declaration public bool Success { get; set; } Property Value Type Description bool"
  },
  "api/NoorCanvas.Controllers.AdminController.html": {
    "href": "api/NoorCanvas.Controllers.AdminController.html",
    "title": "Class AdminController | NOOR CANVAS Documentation",
    "summary": "Class AdminController Inheritance object AdminController Namespace: NoorCanvas.Controllers Assembly: .dll Syntax public class AdminController : ControllerBase Constructors | Edit this page View Source AdminController(CanvasDbContext, ILogger<AdminController>) Declaration public AdminController(CanvasDbContext context, ILogger<AdminController> logger) Parameters Type Name Description CanvasDbContext context ILogger<AdminController> logger Methods | Edit this page View Source AuthenticateAdmin(AdminAuthRequest) Declaration public Task<IActionResult> AuthenticateAdmin(AdminAuthRequest request) Parameters Type Name Description AdminAuthRequest request Returns Type Description Task<IActionResult> | Edit this page View Source DeactivateUser(string, string) Declaration public Task<IActionResult> DeactivateUser(string userId, string sessionToken) Parameters Type Name Description string userId string sessionToken Returns Type Description Task<IActionResult> | Edit this page View Source GetAdminDashboard(string) Declaration public Task<IActionResult> GetAdminDashboard(string sessionToken) Parameters Type Name Description string sessionToken Returns Type Description Task<IActionResult> | Edit this page View Source GetAllSessions(string, int, int) Declaration public Task<IActionResult> GetAllSessions(string sessionToken, int page = 1, int pageSize = 20) Parameters Type Name Description string sessionToken int page int pageSize Returns Type Description Task<IActionResult> | Edit this page View Source GetAllUsers(string, int, int) Declaration public Task<IActionResult> GetAllUsers(string sessionToken, int page = 1, int pageSize = 20) Parameters Type Name Description string sessionToken int page int pageSize Returns Type Description Task<IActionResult> | Edit this page View Source TerminateSession(long, string) Declaration public Task<IActionResult> TerminateSession(long sessionId, string sessionToken) Parameters Type Name Description long sessionId string sessionToken Returns Type Description Task<IActionResult>"
  },
  "api/NoorCanvas.Controllers.AdminDashboardResponse.html": {
    "href": "api/NoorCanvas.Controllers.AdminDashboardResponse.html",
    "title": "Class AdminDashboardResponse | NOOR CANVAS Documentation",
    "summary": "Class AdminDashboardResponse Inheritance object AdminDashboardResponse Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NoorCanvas.Controllers Assembly: .dll Syntax public class AdminDashboardResponse Properties | Edit this page View Source LastUpdated Declaration public DateTime LastUpdated { get; set; } Property Value Type Description DateTime | Edit this page View Source RecentSessions Declaration public List<AdminSessionSummary> RecentSessions { get; set; } Property Value Type Description List<AdminSessionSummary> | Edit this page View Source RecentUsers Declaration public List<AdminUserSummary> RecentUsers { get; set; } Property Value Type Description List<AdminUserSummary> | Edit this page View Source Statistics Declaration public AdminStatistics Statistics { get; set; } Property Value Type Description AdminStatistics"
  },
  "api/NoorCanvas.Controllers.AdminSessionDetails.html": {
    "href": "api/NoorCanvas.Controllers.AdminSessionDetails.html",
    "title": "Class AdminSessionDetails | NOOR CANVAS Documentation",
    "summary": "Class AdminSessionDetails Inheritance object AdminSessionDetails Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NoorCanvas.Controllers Assembly: .dll Syntax public class AdminSessionDetails Properties | Edit this page View Source CreatedAt Declaration public DateTime CreatedAt { get; set; } Property Value Type Description DateTime | Edit this page View Source Description Declaration public string Description { get; set; } Property Value Type Description string | Edit this page View Source EndedAt Declaration public DateTime? EndedAt { get; set; } Property Value Type Description DateTime? | Edit this page View Source ExpiresAt Declaration public DateTime ExpiresAt { get; set; } Property Value Type Description DateTime | Edit this page View Source HostGuid Declaration public string HostGuid { get; set; } Property Value Type Description string | Edit this page View Source HostName Declaration public string HostName { get; set; } Property Value Type Description string | Edit this page View Source MaxParticipants Declaration public int? MaxParticipants { get; set; } Property Value Type Description int? | Edit this page View Source ParticipantCount Declaration public int ParticipantCount { get; set; } Property Value Type Description int | Edit this page View Source SessionId Declaration public long SessionId { get; set; } Property Value Type Description long | Edit this page View Source StartedAt Declaration public DateTime? StartedAt { get; set; } Property Value Type Description DateTime? | Edit this page View Source Status Declaration public string Status { get; set; } Property Value Type Description string | Edit this page View Source Title Declaration public string Title { get; set; } Property Value Type Description string"
  },
  "api/NoorCanvas.Controllers.AdminSessionListResponse.html": {
    "href": "api/NoorCanvas.Controllers.AdminSessionListResponse.html",
    "title": "Class AdminSessionListResponse | NOOR CANVAS Documentation",
    "summary": "Class AdminSessionListResponse Inheritance object AdminSessionListResponse Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NoorCanvas.Controllers Assembly: .dll Syntax public class AdminSessionListResponse Properties | Edit this page View Source Page Declaration public int Page { get; set; } Property Value Type Description int | Edit this page View Source PageSize Declaration public int PageSize { get; set; } Property Value Type Description int | Edit this page View Source Sessions Declaration public List<AdminSessionDetails> Sessions { get; set; } Property Value Type Description List<AdminSessionDetails> | Edit this page View Source TotalCount Declaration public int TotalCount { get; set; } Property Value Type Description int | Edit this page View Source TotalPages Declaration public int TotalPages { get; set; } Property Value Type Description int"
  },
  "api/NoorCanvas.Controllers.AdminSessionSummary.html": {
    "href": "api/NoorCanvas.Controllers.AdminSessionSummary.html",
    "title": "Class AdminSessionSummary | NOOR CANVAS Documentation",
    "summary": "Class AdminSessionSummary Inheritance object AdminSessionSummary Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NoorCanvas.Controllers Assembly: .dll Syntax public class AdminSessionSummary Properties | Edit this page View Source CreatedAt Declaration public DateTime CreatedAt { get; set; } Property Value Type Description DateTime | Edit this page View Source HostName Declaration public string HostName { get; set; } Property Value Type Description string | Edit this page View Source ParticipantCount Declaration public int ParticipantCount { get; set; } Property Value Type Description int | Edit this page View Source SessionId Declaration public long SessionId { get; set; } Property Value Type Description long | Edit this page View Source Status Declaration public string Status { get; set; } Property Value Type Description string | Edit this page View Source Title Declaration public string Title { get; set; } Property Value Type Description string"
  },
  "api/NoorCanvas.Controllers.AdminStatistics.html": {
    "href": "api/NoorCanvas.Controllers.AdminStatistics.html",
    "title": "Class AdminStatistics | NOOR CANVAS Documentation",
    "summary": "Class AdminStatistics Inheritance object AdminStatistics Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NoorCanvas.Controllers Assembly: .dll Syntax public class AdminStatistics Properties | Edit this page View Source ActiveSessions Declaration public int ActiveSessions { get; set; } Property Value Type Description int | Edit this page View Source SystemUptime Declaration public string SystemUptime { get; set; } Property Value Type Description string | Edit this page View Source TotalRegistrations Declaration public int TotalRegistrations { get; set; } Property Value Type Description int | Edit this page View Source TotalSessions Declaration public int TotalSessions { get; set; } Property Value Type Description int | Edit this page View Source TotalUsers Declaration public int TotalUsers { get; set; } Property Value Type Description int"
  },
  "api/NoorCanvas.Controllers.AdminUserDetails.html": {
    "href": "api/NoorCanvas.Controllers.AdminUserDetails.html",
    "title": "Class AdminUserDetails | NOOR CANVAS Documentation",
    "summary": "Class AdminUserDetails Inheritance object AdminUserDetails Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NoorCanvas.Controllers Assembly: .dll Syntax public class AdminUserDetails Properties | Edit this page View Source City Declaration public string City { get; set; } Property Value Type Description string | Edit this page View Source Country Declaration public string Country { get; set; } Property Value Type Description string | Edit this page View Source CreatedAt Declaration public DateTime CreatedAt { get; set; } Property Value Type Description DateTime | Edit this page View Source IsActive Declaration public bool IsActive { get; set; } Property Value Type Description bool | Edit this page View Source LastSeenAt Declaration public DateTime? LastSeenAt { get; set; } Property Value Type Description DateTime? | Edit this page View Source ModifiedAt Declaration public DateTime ModifiedAt { get; set; } Property Value Type Description DateTime | Edit this page View Source Name Declaration public string Name { get; set; } Property Value Type Description string | Edit this page View Source UserGuid Declaration public string UserGuid { get; set; } Property Value Type Description string | Edit this page View Source UserId Declaration public string UserId { get; set; } Property Value Type Description string"
  },
  "api/NoorCanvas.Controllers.AdminUserListResponse.html": {
    "href": "api/NoorCanvas.Controllers.AdminUserListResponse.html",
    "title": "Class AdminUserListResponse | NOOR CANVAS Documentation",
    "summary": "Class AdminUserListResponse Inheritance object AdminUserListResponse Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NoorCanvas.Controllers Assembly: .dll Syntax public class AdminUserListResponse Properties | Edit this page View Source Page Declaration public int Page { get; set; } Property Value Type Description int | Edit this page View Source PageSize Declaration public int PageSize { get; set; } Property Value Type Description int | Edit this page View Source TotalCount Declaration public int TotalCount { get; set; } Property Value Type Description int | Edit this page View Source TotalPages Declaration public int TotalPages { get; set; } Property Value Type Description int | Edit this page View Source Users Declaration public List<AdminUserDetails> Users { get; set; } Property Value Type Description List<AdminUserDetails>"
  },
  "api/NoorCanvas.Controllers.AdminUserSummary.html": {
    "href": "api/NoorCanvas.Controllers.AdminUserSummary.html",
    "title": "Class AdminUserSummary | NOOR CANVAS Documentation",
    "summary": "Class AdminUserSummary Inheritance object AdminUserSummary Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NoorCanvas.Controllers Assembly: .dll Syntax public class AdminUserSummary Properties | Edit this page View Source City Declaration public string City { get; set; } Property Value Type Description string | Edit this page View Source Country Declaration public string Country { get; set; } Property Value Type Description string | Edit this page View Source CreatedAt Declaration public DateTime CreatedAt { get; set; } Property Value Type Description DateTime | Edit this page View Source IsActive Declaration public bool IsActive { get; set; } Property Value Type Description bool | Edit this page View Source Name Declaration public string Name { get; set; } Property Value Type Description string | Edit this page View Source UserId Declaration public string UserId { get; set; } Property Value Type Description string"
  },
  "api/NoorCanvas.Controllers.AlbumData.html": {
    "href": "api/NoorCanvas.Controllers.AlbumData.html",
    "title": "Class AlbumData | NOOR CANVAS Documentation",
    "summary": "Class AlbumData Inheritance object AlbumData Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NoorCanvas.Controllers Assembly: .dll Syntax public class AlbumData Properties | Edit this page View Source GroupId Declaration public int GroupId { get; set; } Property Value Type Description int | Edit this page View Source GroupName Declaration public string GroupName { get; set; } Property Value Type Description string"
  },
  "api/NoorCanvas.Controllers.AnnotationsController.html": {
    "href": "api/NoorCanvas.Controllers.AnnotationsController.html",
    "title": "Class AnnotationsController | NOOR CANVAS Documentation",
    "summary": "Class AnnotationsController Inheritance object AnnotationsController Namespace: NoorCanvas.Controllers Assembly: .dll Syntax public class AnnotationsController : ControllerBase Constructors | Edit this page View Source AnnotationsController(IAnnotationService, ILogger<AnnotationsController>) Declaration public AnnotationsController(IAnnotationService annotationService, ILogger<AnnotationsController> logger) Parameters Type Name Description IAnnotationService annotationService ILogger<AnnotationsController> logger Methods | Edit this page View Source ClearSessionAnnotations(long, string) Clear all annotations for a session by a specific user Declaration public Task<IActionResult> ClearSessionAnnotations(long sessionId, string userId) Parameters Type Name Description long sessionId string userId Returns Type Description Task<IActionResult> | Edit this page View Source CreateAnnotation(CreateAnnotationRequest) Create a new annotation Declaration public Task<IActionResult> CreateAnnotation(CreateAnnotationRequest request) Parameters Type Name Description CreateAnnotationRequest request Returns Type Description Task<IActionResult> | Edit this page View Source DeleteAnnotation(long, string) Delete an annotation Declaration public Task<IActionResult> DeleteAnnotation(long id, string userId) Parameters Type Name Description long id string userId Returns Type Description Task<IActionResult> | Edit this page View Source GetAnnotation(long) Get a specific annotation by ID Declaration public Task<IActionResult> GetAnnotation(long id) Parameters Type Name Description long id Returns Type Description Task<IActionResult> | Edit this page View Source GetSessionAnnotations(long) Get all annotations for a specific session Declaration public Task<IActionResult> GetSessionAnnotations(long sessionId) Parameters Type Name Description long sessionId Returns Type Description Task<IActionResult> | Edit this page View Source UpdateAnnotation(long, UpdateAnnotationRequest) Update an existing annotation Declaration public Task<IActionResult> UpdateAnnotation(long id, UpdateAnnotationRequest request) Parameters Type Name Description long id UpdateAnnotationRequest request Returns Type Description Task<IActionResult>"
  },
  "api/NoorCanvas.Controllers.CategoryData.html": {
    "href": "api/NoorCanvas.Controllers.CategoryData.html",
    "title": "Class CategoryData | NOOR CANVAS Documentation",
    "summary": "Class CategoryData Inheritance object CategoryData Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NoorCanvas.Controllers Assembly: .dll Syntax public class CategoryData Properties | Edit this page View Source CategoryId Declaration public int CategoryId { get; set; } Property Value Type Description int | Edit this page View Source CategoryName Declaration public string CategoryName { get; set; } Property Value Type Description string"
  },
  "api/NoorCanvas.Controllers.CreateAnnotationRequest.html": {
    "href": "api/NoorCanvas.Controllers.CreateAnnotationRequest.html",
    "title": "Class CreateAnnotationRequest | NOOR CANVAS Documentation",
    "summary": "Class CreateAnnotationRequest Inheritance object CreateAnnotationRequest Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NoorCanvas.Controllers Assembly: .dll Syntax public class CreateAnnotationRequest Properties | Edit this page View Source AnnotationData Declaration [Required] public object AnnotationData { get; set; } Property Value Type Description object | Edit this page View Source CreatedBy Declaration [Required] [MaxLength(128)] public string CreatedBy { get; set; } Property Value Type Description string | Edit this page View Source SessionId Declaration [Required] [Range(1, 9.223372036854776E+18)] public long SessionId { get; set; } Property Value Type Description long"
  },
  "api/NoorCanvas.Controllers.CreateIssueRequest.html": {
    "href": "api/NoorCanvas.Controllers.CreateIssueRequest.html",
    "title": "Class CreateIssueRequest | NOOR CANVAS Documentation",
    "summary": "Class CreateIssueRequest Request model for creating a new issue Inheritance object CreateIssueRequest Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NoorCanvas.Controllers Assembly: .dll Syntax public class CreateIssueRequest Properties | Edit this page View Source Category Declaration [MaxLength(50)] public string? Category { get; set; } Property Value Type Description string | Edit this page View Source Description Declaration [MaxLength(5000)] public string? Description { get; set; } Property Value Type Description string | Edit this page View Source Priority Declaration [MaxLength(50)] public string? Priority { get; set; } Property Value Type Description string | Edit this page View Source ReportedBy Declaration [MaxLength(128)] public string? ReportedBy { get; set; } Property Value Type Description string | Edit this page View Source SessionId Declaration public long? SessionId { get; set; } Property Value Type Description long? | Edit this page View Source Title Declaration [Required] [MaxLength(200)] public string Title { get; set; } Property Value Type Description string | Edit this page View Source UserId Declaration public Guid? UserId { get; set; } Property Value Type Description Guid?"
  },
  "api/NoorCanvas.Controllers.CreateSessionRequest.html": {
    "href": "api/NoorCanvas.Controllers.CreateSessionRequest.html",
    "title": "Class CreateSessionRequest | NOOR CANVAS Documentation",
    "summary": "Class CreateSessionRequest Inheritance object CreateSessionRequest Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NoorCanvas.Controllers Assembly: .dll Syntax public class CreateSessionRequest Properties | Edit this page View Source Description Declaration public string Description { get; set; } Property Value Type Description string | Edit this page View Source MaxParticipants Declaration public int? MaxParticipants { get; set; } Property Value Type Description int? | Edit this page View Source Title Declaration public string Title { get; set; } Property Value Type Description string"
  },
  "api/NoorCanvas.Controllers.GenerateTokenRequest.html": {
    "href": "api/NoorCanvas.Controllers.GenerateTokenRequest.html",
    "title": "Class GenerateTokenRequest | NOOR CANVAS Documentation",
    "summary": "Class GenerateTokenRequest Inheritance object GenerateTokenRequest Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NoorCanvas.Controllers Assembly: .dll Syntax public class GenerateTokenRequest Properties | Edit this page View Source CreatedBy Declaration public string? CreatedBy { get; set; } Property Value Type Description string | Edit this page View Source SessionId Declaration public int SessionId { get; set; } Property Value Type Description int"
  },
  "api/NoorCanvas.Controllers.GenerateTokenResponse.html": {
    "href": "api/NoorCanvas.Controllers.GenerateTokenResponse.html",
    "title": "Class GenerateTokenResponse | NOOR CANVAS Documentation",
    "summary": "Class GenerateTokenResponse Inheritance object GenerateTokenResponse Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NoorCanvas.Controllers Assembly: .dll Syntax public class GenerateTokenResponse Properties | Edit this page View Source CreatedAt Declaration public DateTime CreatedAt { get; set; } Property Value Type Description DateTime | Edit this page View Source CreatedBy Declaration public string CreatedBy { get; set; } Property Value Type Description string | Edit this page View Source Hash Declaration public string Hash { get; set; } Property Value Type Description string | Edit this page View Source HostGuid Declaration public string HostGuid { get; set; } Property Value Type Description string | Edit this page View Source HostSessionId Declaration public long HostSessionId { get; set; } Property Value Type Description long | Edit this page View Source SessionId Declaration public int SessionId { get; set; } Property Value Type Description int"
  },
  "api/NoorCanvas.Controllers.HealthController.html": {
    "href": "api/NoorCanvas.Controllers.HealthController.html",
    "title": "Class HealthController | NOOR CANVAS Documentation",
    "summary": "Class HealthController Inheritance object HealthController Namespace: NoorCanvas.Controllers Assembly: .dll Syntax public class HealthController : ControllerBase Constructors | Edit this page View Source HealthController(CanvasDbContext, ILogger<HealthController>) Declaration public HealthController(CanvasDbContext context, ILogger<HealthController> logger) Parameters Type Name Description CanvasDbContext context ILogger<HealthController> logger Methods | Edit this page View Source Detailed() Declaration public Task<IActionResult> Detailed() Returns Type Description Task<IActionResult> | Edit this page View Source Get() Declaration public Task<IActionResult> Get() Returns Type Description Task<IActionResult>"
  },
  "api/NoorCanvas.Controllers.HostAuthRequest.html": {
    "href": "api/NoorCanvas.Controllers.HostAuthRequest.html",
    "title": "Class HostAuthRequest | NOOR CANVAS Documentation",
    "summary": "Class HostAuthRequest Inheritance object HostAuthRequest Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NoorCanvas.Controllers Assembly: .dll Syntax public class HostAuthRequest Properties | Edit this page View Source HostGuid Declaration public string HostGuid { get; set; } Property Value Type Description string"
  },
  "api/NoorCanvas.Controllers.HostAuthResponse.html": {
    "href": "api/NoorCanvas.Controllers.HostAuthResponse.html",
    "title": "Class HostAuthResponse | NOOR CANVAS Documentation",
    "summary": "Class HostAuthResponse Inheritance object HostAuthResponse Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NoorCanvas.Controllers Assembly: .dll Syntax public class HostAuthResponse Properties | Edit this page View Source ExpiresAt Declaration public DateTime ExpiresAt { get; set; } Property Value Type Description DateTime | Edit this page View Source HostGuid Declaration public string HostGuid { get; set; } Property Value Type Description string | Edit this page View Source SessionToken Declaration public string SessionToken { get; set; } Property Value Type Description string | Edit this page View Source Success Declaration public bool Success { get; set; } Property Value Type Description bool"
  },
  "api/NoorCanvas.Controllers.HostController.html": {
    "href": "api/NoorCanvas.Controllers.HostController.html",
    "title": "Class HostController | NOOR CANVAS Documentation",
    "summary": "Class HostController Inheritance object HostController Namespace: NoorCanvas.Controllers Assembly: .dll Syntax public class HostController : ControllerBase Constructors | Edit this page View Source HostController(CanvasDbContext, KSessionsDbContext, ILogger<HostController>) Declaration public HostController(CanvasDbContext context, KSessionsDbContext kSessionsContext, ILogger<HostController> logger) Parameters Type Name Description CanvasDbContext context KSessionsDbContext kSessionsContext ILogger<HostController> logger Methods | Edit this page View Source AuthenticateHost(HostAuthRequest) Declaration public Task<IActionResult> AuthenticateHost(HostAuthRequest request) Parameters Type Name Description HostAuthRequest request Returns Type Description Task<IActionResult> | Edit this page View Source BeginSession(int, string) Declaration public Task<IActionResult> BeginSession(int sessionId, string guid) Parameters Type Name Description int sessionId string guid Returns Type Description Task<IActionResult> | Edit this page View Source CreateSession(CreateSessionRequest) Declaration public Task<IActionResult> CreateSession(CreateSessionRequest request) Parameters Type Name Description CreateSessionRequest request Returns Type Description Task<IActionResult> | Edit this page View Source EndSession(long) Declaration public Task<IActionResult> EndSession(long sessionId) Parameters Type Name Description long sessionId Returns Type Description Task<IActionResult> | Edit this page View Source GenerateSessionToken(int, string) Declaration public Task<IActionResult> GenerateSessionToken(int sessionId, string guid) Parameters Type Name Description int sessionId string guid Returns Type Description Task<IActionResult> | Edit this page View Source GetAlbums(string) Declaration public Task<IActionResult> GetAlbums(string guid) Parameters Type Name Description string guid Returns Type Description Task<IActionResult> | Edit this page View Source GetCategories(int, string) Declaration public Task<IActionResult> GetCategories(int albumId, string guid) Parameters Type Name Description int albumId string guid Returns Type Description Task<IActionResult> | Edit this page View Source GetDashboardData(string?) Declaration public Task<IActionResult> GetDashboardData(string? sessionToken = null) Parameters Type Name Description string sessionToken Returns Type Description Task<IActionResult> | Edit this page View Source GetSessionStatus(string) Declaration public Task<IActionResult> GetSessionStatus(string guid) Parameters Type Name Description string guid Returns Type Description Task<IActionResult> | Edit this page View Source GetSessions(int, string) Declaration public Task<IActionResult> GetSessions(int categoryId, string guid) Parameters Type Name Description int categoryId string guid Returns Type Description Task<IActionResult> | Edit this page View Source StartSession(long) Declaration public Task<IActionResult> StartSession(long sessionId) Parameters Type Name Description long sessionId Returns Type Description Task<IActionResult>"
  },
  "api/NoorCanvas.Controllers.HostDashboardResponse.html": {
    "href": "api/NoorCanvas.Controllers.HostDashboardResponse.html",
    "title": "Class HostDashboardResponse | NOOR CANVAS Documentation",
    "summary": "Class HostDashboardResponse Inheritance object HostDashboardResponse Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NoorCanvas.Controllers Assembly: .dll Syntax public class HostDashboardResponse Properties | Edit this page View Source ActiveSessions Declaration public int ActiveSessions { get; set; } Property Value Type Description int | Edit this page View Source HostName Declaration public string HostName { get; set; } Property Value Type Description string | Edit this page View Source RecentSessions Declaration public List<SessionSummaryResponse> RecentSessions { get; set; } Property Value Type Description List<SessionSummaryResponse> | Edit this page View Source TotalParticipants Declaration public int TotalParticipants { get; set; } Property Value Type Description int"
  },
  "api/NoorCanvas.Controllers.HostProvisionerController.html": {
    "href": "api/NoorCanvas.Controllers.HostProvisionerController.html",
    "title": "Class HostProvisionerController | NOOR CANVAS Documentation",
    "summary": "Class HostProvisionerController Inheritance object HostProvisionerController Namespace: NoorCanvas.Controllers Assembly: .dll Syntax public class HostProvisionerController : ControllerBase Constructors | Edit this page View Source HostProvisionerController(ILogger<HostProvisionerController>, CanvasDbContext) Declaration public HostProvisionerController(ILogger<HostProvisionerController> logger, CanvasDbContext context) Parameters Type Name Description ILogger<HostProvisionerController> logger CanvasDbContext context Methods | Edit this page View Source GenerateHostToken(GenerateTokenRequest) Declaration public Task<IActionResult> GenerateHostToken(GenerateTokenRequest request) Parameters Type Name Description GenerateTokenRequest request Returns Type Description Task<IActionResult> | Edit this page View Source GetStatus() Declaration public IActionResult GetStatus() Returns Type Description IActionResult"
  },
  "api/NoorCanvas.Controllers.IssueController.html": {
    "href": "api/NoorCanvas.Controllers.IssueController.html",
    "title": "Class IssueController | NOOR CANVAS Documentation",
    "summary": "Class IssueController Inheritance object IssueController Namespace: NoorCanvas.Controllers Assembly: .dll Syntax public class IssueController : ControllerBase Constructors | Edit this page View Source IssueController(CanvasDbContext, ILogger<IssueController>) Declaration public IssueController(CanvasDbContext context, ILogger<IssueController> logger) Parameters Type Name Description CanvasDbContext context ILogger<IssueController> logger Methods | Edit this page View Source CreateIssue(CreateIssueRequest) Create a new issue report Declaration public Task<IActionResult> CreateIssue(CreateIssueRequest request) Parameters Type Name Description CreateIssueRequest request Issue creation request Returns Type Description Task<IActionResult> Created issue with ID | Edit this page View Source GetIssue(long) Get issue by ID Declaration public Task<IActionResult> GetIssue(long id) Parameters Type Name Description long id Issue ID Returns Type Description Task<IActionResult> Issue details | Edit this page View Source GetIssues(string?, string?, string?) Get all issues with optional filtering Declaration public Task<IActionResult> GetIssues(string? status = null, string? priority = null, string? category = null) Parameters Type Name Description string status Filter by status string priority Filter by priority string category Filter by category Returns Type Description Task<IActionResult> List of issues"
  },
  "api/NoorCanvas.Controllers.IssueResponse.html": {
    "href": "api/NoorCanvas.Controllers.IssueResponse.html",
    "title": "Class IssueResponse | NOOR CANVAS Documentation",
    "summary": "Class IssueResponse Response model for issue data Inheritance object IssueResponse Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NoorCanvas.Controllers Assembly: .dll Syntax public class IssueResponse Properties | Edit this page View Source Category Declaration public string Category { get; set; } Property Value Type Description string | Edit this page View Source Description Declaration public string? Description { get; set; } Property Value Type Description string | Edit this page View Source IssueId Declaration public long IssueId { get; set; } Property Value Type Description long | Edit this page View Source Priority Declaration public string Priority { get; set; } Property Value Type Description string | Edit this page View Source ReportedAt Declaration public DateTime ReportedAt { get; set; } Property Value Type Description DateTime | Edit this page View Source Status Declaration public string Status { get; set; } Property Value Type Description string | Edit this page View Source Title Declaration public string Title { get; set; } Property Value Type Description string"
  },
  "api/NoorCanvas.Controllers.LogsController.html": {
    "href": "api/NoorCanvas.Controllers.LogsController.html",
    "title": "Class LogsController | NOOR CANVAS Documentation",
    "summary": "Class LogsController Inheritance object LogsController Namespace: NoorCanvas.Controllers Assembly: .dll Syntax public class LogsController : ControllerBase Constructors | Edit this page View Source LogsController(ILogger<LogsController>) Declaration public LogsController(ILogger<LogsController> logger) Parameters Type Name Description ILogger<LogsController> logger Methods | Edit this page View Source ReceiveBrowserLog(JsonElement) Declaration public IActionResult ReceiveBrowserLog(JsonElement logEntry) Parameters Type Name Description JsonElement logEntry Returns Type Description IActionResult"
  },
  "api/NoorCanvas.Controllers.ParticipantController.html": {
    "href": "api/NoorCanvas.Controllers.ParticipantController.html",
    "title": "Class ParticipantController | NOOR CANVAS Documentation",
    "summary": "Class ParticipantController Inheritance object ParticipantController Namespace: NoorCanvas.Controllers Assembly: .dll Syntax public class ParticipantController : ControllerBase Constructors | Edit this page View Source ParticipantController(CanvasDbContext, ILogger<ParticipantController>) Declaration public ParticipantController(CanvasDbContext context, ILogger<ParticipantController> logger) Parameters Type Name Description CanvasDbContext context ILogger<ParticipantController> logger Methods | Edit this page View Source GetSessionStatus(string, string?) Declaration public Task<IActionResult> GetSessionStatus(string sessionGuid, string? userId) Parameters Type Name Description string sessionGuid string userId Returns Type Description Task<IActionResult> | Edit this page View Source RegisterParticipant(ParticipantRegistrationRequest) Declaration public Task<IActionResult> RegisterParticipant(ParticipantRegistrationRequest request) Parameters Type Name Description ParticipantRegistrationRequest request Returns Type Description Task<IActionResult> | Edit this page View Source ValidateSession(string) Declaration public Task<IActionResult> ValidateSession(string sessionGuid) Parameters Type Name Description string sessionGuid Returns Type Description Task<IActionResult>"
  },
  "api/NoorCanvas.Controllers.ParticipantRegistrationRequest.html": {
    "href": "api/NoorCanvas.Controllers.ParticipantRegistrationRequest.html",
    "title": "Class ParticipantRegistrationRequest | NOOR CANVAS Documentation",
    "summary": "Class ParticipantRegistrationRequest Inheritance object ParticipantRegistrationRequest Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NoorCanvas.Controllers Assembly: .dll Syntax public class ParticipantRegistrationRequest Properties | Edit this page View Source City Declaration public string City { get; set; } Property Value Type Description string | Edit this page View Source Country Declaration public string Country { get; set; } Property Value Type Description string | Edit this page View Source Fingerprint Declaration public string? Fingerprint { get; set; } Property Value Type Description string | Edit this page View Source Name Declaration public string Name { get; set; } Property Value Type Description string | Edit this page View Source SessionGuid Declaration public string SessionGuid { get; set; } Property Value Type Description string | Edit this page View Source UserId Declaration public string UserId { get; set; } Property Value Type Description string"
  },
  "api/NoorCanvas.Controllers.ParticipantRegistrationResponse.html": {
    "href": "api/NoorCanvas.Controllers.ParticipantRegistrationResponse.html",
    "title": "Class ParticipantRegistrationResponse | NOOR CANVAS Documentation",
    "summary": "Class ParticipantRegistrationResponse Inheritance object ParticipantRegistrationResponse Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NoorCanvas.Controllers Assembly: .dll Syntax public class ParticipantRegistrationResponse Properties | Edit this page View Source JoinTime Declaration public DateTime JoinTime { get; set; } Property Value Type Description DateTime | Edit this page View Source RegistrationId Declaration public long RegistrationId { get; set; } Property Value Type Description long | Edit this page View Source Success Declaration public bool Success { get; set; } Property Value Type Description bool | Edit this page View Source UserId Declaration public string UserId { get; set; } Property Value Type Description string | Edit this page View Source WaitingRoomUrl Declaration public string WaitingRoomUrl { get; set; } Property Value Type Description string"
  },
  "api/NoorCanvas.Controllers.SessionData.html": {
    "href": "api/NoorCanvas.Controllers.SessionData.html",
    "title": "Class SessionData | NOOR CANVAS Documentation",
    "summary": "Class SessionData Inheritance object SessionData Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NoorCanvas.Controllers Assembly: .dll Syntax public class SessionData Properties | Edit this page View Source SessionId Declaration public int SessionId { get; set; } Property Value Type Description int | Edit this page View Source SessionName Declaration public string SessionName { get; set; } Property Value Type Description string"
  },
  "api/NoorCanvas.Controllers.SessionResponse.html": {
    "href": "api/NoorCanvas.Controllers.SessionResponse.html",
    "title": "Class SessionResponse | NOOR CANVAS Documentation",
    "summary": "Class SessionResponse Inheritance object SessionResponse Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NoorCanvas.Controllers Assembly: .dll Syntax public class SessionResponse Properties | Edit this page View Source CreatedAt Declaration public DateTime CreatedAt { get; set; } Property Value Type Description DateTime | Edit this page View Source ExpiresAt Declaration public DateTime ExpiresAt { get; set; } Property Value Type Description DateTime | Edit this page View Source JoinLink Declaration public string JoinLink { get; set; } Property Value Type Description string | Edit this page View Source SessionGuid Declaration public string SessionGuid { get; set; } Property Value Type Description string | Edit this page View Source SessionId Declaration public Guid SessionId { get; set; } Property Value Type Description Guid"
  },
  "api/NoorCanvas.Controllers.SessionStatusData.html": {
    "href": "api/NoorCanvas.Controllers.SessionStatusData.html",
    "title": "Class SessionStatusData | NOOR CANVAS Documentation",
    "summary": "Class SessionStatusData Inheritance object SessionStatusData Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NoorCanvas.Controllers Assembly: .dll Syntax public class SessionStatusData Properties | Edit this page View Source ParticipantCount Declaration public int ParticipantCount { get; set; } Property Value Type Description int | Edit this page View Source SessionName Declaration public string SessionName { get; set; } Property Value Type Description string | Edit this page View Source StartedAt Declaration public DateTime? StartedAt { get; set; } Property Value Type Description DateTime?"
  },
  "api/NoorCanvas.Controllers.SessionStatusResponse.html": {
    "href": "api/NoorCanvas.Controllers.SessionStatusResponse.html",
    "title": "Class SessionStatusResponse | NOOR CANVAS Documentation",
    "summary": "Class SessionStatusResponse Inheritance object SessionStatusResponse Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NoorCanvas.Controllers Assembly: .dll Syntax public class SessionStatusResponse Properties | Edit this page View Source CanJoin Declaration public bool CanJoin { get; set; } Property Value Type Description bool | Edit this page View Source GroupId Declaration public Guid GroupId { get; set; } Property Value Type Description Guid | Edit this page View Source IsUserRegistered Declaration public bool IsUserRegistered { get; set; } Property Value Type Description bool | Edit this page View Source ParticipantCount Declaration public int ParticipantCount { get; set; } Property Value Type Description int | Edit this page View Source SessionId Declaration public long SessionId { get; set; } Property Value Type Description long | Edit this page View Source StartedAt Declaration public DateTime? StartedAt { get; set; } Property Value Type Description DateTime? | Edit this page View Source Status Declaration public string Status { get; set; } Property Value Type Description string | Edit this page View Source UserRegistration Declaration public string? UserRegistration { get; set; } Property Value Type Description string"
  },
  "api/NoorCanvas.Controllers.SessionSummaryResponse.html": {
    "href": "api/NoorCanvas.Controllers.SessionSummaryResponse.html",
    "title": "Class SessionSummaryResponse | NOOR CANVAS Documentation",
    "summary": "Class SessionSummaryResponse Inheritance object SessionSummaryResponse Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NoorCanvas.Controllers Assembly: .dll Syntax public class SessionSummaryResponse Properties | Edit this page View Source CreatedAt Declaration public DateTime CreatedAt { get; set; } Property Value Type Description DateTime | Edit this page View Source GroupId Declaration public Guid GroupId { get; set; } Property Value Type Description Guid | Edit this page View Source ParticipantCount Declaration public int ParticipantCount { get; set; } Property Value Type Description int | Edit this page View Source SessionGuid Declaration public string SessionGuid { get; set; } Property Value Type Description string | Edit this page View Source SessionId Declaration public long SessionId { get; set; } Property Value Type Description long | Edit this page View Source Status Declaration public string Status { get; set; } Property Value Type Description string"
  },
  "api/NoorCanvas.Controllers.SessionValidationResponse.html": {
    "href": "api/NoorCanvas.Controllers.SessionValidationResponse.html",
    "title": "Class SessionValidationResponse | NOOR CANVAS Documentation",
    "summary": "Class SessionValidationResponse Inheritance object SessionValidationResponse Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NoorCanvas.Controllers Assembly: .dll Syntax public class SessionValidationResponse Properties | Edit this page View Source CanJoin Declaration public bool CanJoin { get; set; } Property Value Type Description bool | Edit this page View Source ExpiresAt Declaration public DateTime ExpiresAt { get; set; } Property Value Type Description DateTime | Edit this page View Source GroupId Declaration public Guid GroupId { get; set; } Property Value Type Description Guid | Edit this page View Source MaxParticipants Declaration public int MaxParticipants { get; set; } Property Value Type Description int | Edit this page View Source ParticipantCount Declaration public int ParticipantCount { get; set; } Property Value Type Description int | Edit this page View Source SessionId Declaration public long SessionId { get; set; } Property Value Type Description long | Edit this page View Source Status Declaration public string Status { get; set; } Property Value Type Description string | Edit this page View Source Valid Declaration public bool Valid { get; set; } Property Value Type Description bool"
  },
  "api/NoorCanvas.Controllers.UpdateAnnotationRequest.html": {
    "href": "api/NoorCanvas.Controllers.UpdateAnnotationRequest.html",
    "title": "Class UpdateAnnotationRequest | NOOR CANVAS Documentation",
    "summary": "Class UpdateAnnotationRequest Inheritance object UpdateAnnotationRequest Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NoorCanvas.Controllers Assembly: .dll Syntax public class UpdateAnnotationRequest Properties | Edit this page View Source AnnotationData Declaration [Required] public object AnnotationData { get; set; } Property Value Type Description object | Edit this page View Source UserId Declaration [Required] [MaxLength(128)] public string UserId { get; set; } Property Value Type Description string"
  },
  "api/NoorCanvas.Controllers.html": {
    "href": "api/NoorCanvas.Controllers.html",
    "title": "Namespace NoorCanvas.Controllers | NOOR CANVAS Documentation",
    "summary": "Namespace NoorCanvas.Controllers Classes AdminAuthRequest AdminAuthResponse AdminController AdminDashboardResponse AdminSessionDetails AdminSessionListResponse AdminSessionSummary AdminStatistics AdminUserDetails AdminUserListResponse AdminUserSummary AlbumData AnnotationsController CategoryData CreateAnnotationRequest CreateIssueRequest Request model for creating a new issue CreateSessionRequest GenerateTokenRequest GenerateTokenResponse HealthController HostAuthRequest HostAuthResponse HostController HostDashboardResponse HostProvisionerController IssueController IssueResponse Response model for issue data LogsController ParticipantController ParticipantRegistrationRequest ParticipantRegistrationResponse SessionData SessionResponse SessionStatusData SessionStatusResponse SessionSummaryResponse SessionValidationResponse UpdateAnnotationRequest"
  },
  "api/NoorCanvas.Data.CanvasDbContext.html": {
    "href": "api/NoorCanvas.Data.CanvasDbContext.html",
    "title": "Class CanvasDbContext | NOOR CANVAS Documentation",
    "summary": "Class CanvasDbContext Inheritance object CanvasDbContext Namespace: NoorCanvas.Data Assembly: .dll Syntax public class CanvasDbContext : DbContext Constructors | Edit this page View Source CanvasDbContext(DbContextOptions<CanvasDbContext>) Declaration public CanvasDbContext(DbContextOptions<CanvasDbContext> options) Parameters Type Name Description DbContextOptions<CanvasDbContext> options Properties | Edit this page View Source AdminSessions Declaration public DbSet<AdminSession> AdminSessions { get; set; } Property Value Type Description DbSet<AdminSession> | Edit this page View Source Annotations Declaration public DbSet<Annotation> Annotations { get; set; } Property Value Type Description DbSet<Annotation> | Edit this page View Source AuditLogs Declaration public DbSet<AuditLog> AuditLogs { get; set; } Property Value Type Description DbSet<AuditLog> | Edit this page View Source HostSessions Declaration public DbSet<HostSession> HostSessions { get; set; } Property Value Type Description DbSet<HostSession> | Edit this page View Source Issues Declaration public DbSet<Issue> Issues { get; set; } Property Value Type Description DbSet<Issue> | Edit this page View Source QuestionAnswers Declaration public DbSet<QuestionAnswer> QuestionAnswers { get; set; } Property Value Type Description DbSet<QuestionAnswer> | Edit this page View Source QuestionVotes Declaration public DbSet<QuestionVote> QuestionVotes { get; set; } Property Value Type Description DbSet<QuestionVote> | Edit this page View Source Questions Declaration public DbSet<Question> Questions { get; set; } Property Value Type Description DbSet<Question> | Edit this page View Source Registrations Declaration public DbSet<Registration> Registrations { get; set; } Property Value Type Description DbSet<Registration> | Edit this page View Source SessionLinks Declaration public DbSet<SessionLink> SessionLinks { get; set; } Property Value Type Description DbSet<SessionLink> | Edit this page View Source Sessions Declaration public DbSet<Session> Sessions { get; set; } Property Value Type Description DbSet<Session> | Edit this page View Source SharedAssets Declaration public DbSet<SharedAsset> SharedAssets { get; set; } Property Value Type Description DbSet<SharedAsset> | Edit this page View Source Users Declaration public DbSet<User> Users { get; set; } Property Value Type Description DbSet<User> Methods | Edit this page View Source OnModelCreating(ModelBuilder) Declaration protected override void OnModelCreating(ModelBuilder modelBuilder) Parameters Type Name Description ModelBuilder modelBuilder"
  },
  "api/NoorCanvas.Data.KSessionsDbContext.html": {
    "href": "api/NoorCanvas.Data.KSessionsDbContext.html",
    "title": "Class KSessionsDbContext | NOOR CANVAS Documentation",
    "summary": "Class KSessionsDbContext KSESSIONS Database Context - Read-only access to Islamic content database Connects to production KSESSIONS database for Groups, Categories, Sessions data Inheritance object KSessionsDbContext Namespace: NoorCanvas.Data Assembly: .dll Syntax public class KSessionsDbContext : DbContext Constructors | Edit this page View Source KSessionsDbContext(DbContextOptions<KSessionsDbContext>) Declaration public KSessionsDbContext(DbContextOptions<KSessionsDbContext> options) Parameters Type Name Description DbContextOptions<KSessionsDbContext> options Properties | Edit this page View Source Categories Declaration public DbSet<KSessionsCategory> Categories { get; set; } Property Value Type Description DbSet<KSessionsCategory> | Edit this page View Source Groups Declaration public DbSet<KSessionsGroup> Groups { get; set; } Property Value Type Description DbSet<KSessionsGroup> | Edit this page View Source SessionTranscripts Declaration public DbSet<KSessionsSessionTranscript> SessionTranscripts { get; set; } Property Value Type Description DbSet<KSessionsSessionTranscript> | Edit this page View Source Sessions Declaration public DbSet<KSessionsSession> Sessions { get; set; } Property Value Type Description DbSet<KSessionsSession> Methods | Edit this page View Source OnConfiguring(DbContextOptionsBuilder) Declaration protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder) Parameters Type Name Description DbContextOptionsBuilder optionsBuilder | Edit this page View Source OnModelCreating(ModelBuilder) Declaration protected override void OnModelCreating(ModelBuilder modelBuilder) Parameters Type Name Description ModelBuilder modelBuilder"
  },
  "api/NoorCanvas.Data.Migrations.AddAdminSessions.html": {
    "href": "api/NoorCanvas.Data.Migrations.AddAdminSessions.html",
    "title": "Class AddAdminSessions | NOOR CANVAS Documentation",
    "summary": "Class AddAdminSessions Inheritance object AddAdminSessions Namespace: NoorCanvas.Data.Migrations Assembly: .dll Syntax public class AddAdminSessions : Migration Methods | Edit this page View Source BuildTargetModel(ModelBuilder) Declaration protected override void BuildTargetModel(ModelBuilder modelBuilder) Parameters Type Name Description ModelBuilder modelBuilder | Edit this page View Source Down(MigrationBuilder) Declaration protected override void Down(MigrationBuilder migrationBuilder) Parameters Type Name Description MigrationBuilder migrationBuilder | Edit this page View Source Up(MigrationBuilder) Declaration protected override void Up(MigrationBuilder migrationBuilder) Parameters Type Name Description MigrationBuilder migrationBuilder"
  },
  "api/NoorCanvas.Data.Migrations.InitialCreate.html": {
    "href": "api/NoorCanvas.Data.Migrations.InitialCreate.html",
    "title": "Class InitialCreate | NOOR CANVAS Documentation",
    "summary": "Class InitialCreate Inheritance object InitialCreate Namespace: NoorCanvas.Data.Migrations Assembly: .dll Syntax public class InitialCreate : Migration Methods | Edit this page View Source BuildTargetModel(ModelBuilder) Declaration protected override void BuildTargetModel(ModelBuilder modelBuilder) Parameters Type Name Description ModelBuilder modelBuilder | Edit this page View Source Down(MigrationBuilder) Declaration protected override void Down(MigrationBuilder migrationBuilder) Parameters Type Name Description MigrationBuilder migrationBuilder | Edit this page View Source Up(MigrationBuilder) Declaration protected override void Up(MigrationBuilder migrationBuilder) Parameters Type Name Description MigrationBuilder migrationBuilder"
  },
  "api/NoorCanvas.Data.Migrations.html": {
    "href": "api/NoorCanvas.Data.Migrations.html",
    "title": "Namespace NoorCanvas.Data.Migrations | NOOR CANVAS Documentation",
    "summary": "Namespace NoorCanvas.Data.Migrations Classes AddAdminSessions InitialCreate"
  },
  "api/NoorCanvas.Data.html": {
    "href": "api/NoorCanvas.Data.html",
    "title": "Namespace NoorCanvas.Data | NOOR CANVAS Documentation",
    "summary": "Namespace NoorCanvas.Data Classes CanvasDbContext KSessionsDbContext KSESSIONS Database Context - Read-only access to Islamic content database Connects to production KSESSIONS database for Groups, Categories, Sessions data"
  },
  "api/NoorCanvas.Hubs.AnnotationHub.html": {
    "href": "api/NoorCanvas.Hubs.AnnotationHub.html",
    "title": "Class AnnotationHub | NOOR CANVAS Documentation",
    "summary": "Class AnnotationHub Inheritance object AnnotationHub Namespace: NoorCanvas.Hubs Assembly: .dll Syntax public class AnnotationHub : Hub Constructors | Edit this page View Source AnnotationHub(ILogger<AnnotationHub>, IAnnotationService) Declaration public AnnotationHub(ILogger<AnnotationHub> logger, IAnnotationService annotationService) Parameters Type Name Description ILogger<AnnotationHub> logger IAnnotationService annotationService Methods | Edit this page View Source BroadcastAnnotation(long, string, object) Broadcast a new annotation to all session participants Declaration public Task BroadcastAnnotation(long sessionId, string userId, object annotationData) Parameters Type Name Description long sessionId string userId object annotationData Returns Type Description Task | Edit this page View Source BroadcastAnnotationDeletion(long, long, string) Broadcast annotation deletion to all session participants Declaration public Task BroadcastAnnotationDeletion(long sessionId, long annotationId, string userId) Parameters Type Name Description long sessionId long annotationId string userId Returns Type Description Task | Edit this page View Source BroadcastAnnotationUpdate(long, long, string, object) Broadcast annotation update to all session participants Declaration public Task BroadcastAnnotationUpdate(long sessionId, long annotationId, string userId, object annotationData) Parameters Type Name Description long sessionId long annotationId string userId object annotationData Returns Type Description Task | Edit this page View Source BroadcastClearAnnotations(long, string) Broadcast session annotation clear to all participants Declaration public Task BroadcastClearAnnotations(long sessionId, string userId) Parameters Type Name Description long sessionId string userId Returns Type Description Task | Edit this page View Source JoinSession(long, string) Join a session group for real-time annotation updates Declaration public Task JoinSession(long sessionId, string userId) Parameters Type Name Description long sessionId string userId Returns Type Description Task | Edit this page View Source LeaveSession(long, string) Leave a session group Declaration public Task LeaveSession(long sessionId, string userId) Parameters Type Name Description long sessionId string userId Returns Type Description Task | Edit this page View Source OnConnectedAsync() Declaration public override Task OnConnectedAsync() Returns Type Description Task | Edit this page View Source OnDisconnectedAsync(Exception?) Declaration public override Task OnDisconnectedAsync(Exception? exception) Parameters Type Name Description Exception? exception Returns Type Description Task"
  },
  "api/NoorCanvas.Hubs.QAHub.html": {
    "href": "api/NoorCanvas.Hubs.QAHub.html",
    "title": "Class QAHub | NOOR CANVAS Documentation",
    "summary": "Class QAHub Inheritance object QAHub Namespace: NoorCanvas.Hubs Assembly: .dll Syntax public class QAHub : Hub Constructors | Edit this page View Source QAHub(ILogger<QAHub>, CanvasDbContext) Declaration public QAHub(ILogger<QAHub> logger, CanvasDbContext context) Parameters Type Name Description ILogger<QAHub> logger CanvasDbContext context Methods | Edit this page View Source AskQuestion(long, string, Guid) Declaration public Task AskQuestion(long sessionId, string questionText, Guid userId) Parameters Type Name Description long sessionId string questionText Guid userId Returns Type Description Task | Edit this page View Source JoinQASession(long) Declaration public Task JoinQASession(long sessionId) Parameters Type Name Description long sessionId Returns Type Description Task | Edit this page View Source OnConnectedAsync() Declaration public override Task OnConnectedAsync() Returns Type Description Task | Edit this page View Source OnDisconnectedAsync(Exception?) Declaration public override Task OnDisconnectedAsync(Exception? exception) Parameters Type Name Description Exception? exception Returns Type Description Task | Edit this page View Source Vote(long, Guid, int) Declaration public Task Vote(long questionId, Guid userId, int voteValue) Parameters Type Name Description long questionId Guid userId int voteValue Returns Type Description Task"
  },
  "api/NoorCanvas.Hubs.SessionHub.html": {
    "href": "api/NoorCanvas.Hubs.SessionHub.html",
    "title": "Class SessionHub | NOOR CANVAS Documentation",
    "summary": "Class SessionHub Inheritance object SessionHub Namespace: NoorCanvas.Hubs Assembly: .dll Syntax public class SessionHub : Hub Constructors | Edit this page View Source SessionHub(ILogger<SessionHub>) Declaration public SessionHub(ILogger<SessionHub> logger) Parameters Type Name Description ILogger<SessionHub> logger Methods | Edit this page View Source JoinSession(long, string) Declaration public Task JoinSession(long sessionId, string role = \"user\") Parameters Type Name Description long sessionId string role Returns Type Description Task | Edit this page View Source LeaveSession(long) Declaration public Task LeaveSession(long sessionId) Parameters Type Name Description long sessionId Returns Type Description Task | Edit this page View Source OnConnectedAsync() Declaration public override Task OnConnectedAsync() Returns Type Description Task | Edit this page View Source OnDisconnectedAsync(Exception?) Declaration public override Task OnDisconnectedAsync(Exception? exception) Parameters Type Name Description Exception? exception Returns Type Description Task | Edit this page View Source Ping() Declaration public Task Ping() Returns Type Description Task | Edit this page View Source ShareAsset(long, object) Declaration public Task ShareAsset(long sessionId, object assetData) Parameters Type Name Description long sessionId object assetData Returns Type Description Task"
  },
  "api/NoorCanvas.Hubs.html": {
    "href": "api/NoorCanvas.Hubs.html",
    "title": "Namespace NoorCanvas.Hubs | NOOR CANVAS Documentation",
    "summary": "Namespace NoorCanvas.Hubs Classes AnnotationHub QAHub SessionHub"
  },
  "api/NoorCanvas.Models.AdminSession.html": {
    "href": "api/NoorCanvas.Models.AdminSession.html",
    "title": "Class AdminSession | NOOR CANVAS Documentation",
    "summary": "Class AdminSession Inheritance object AdminSession Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NoorCanvas.Models Assembly: .dll Syntax [Table(\"AdminSessions\", Schema = \"canvas\")] public class AdminSession Properties | Edit this page View Source AdminGuid Declaration [Required] [StringLength(100)] public string AdminGuid { get; set; } Property Value Type Description string | Edit this page View Source AdminSessionId Declaration [Key] public long AdminSessionId { get; set; } Property Value Type Description long | Edit this page View Source CreatedAt Declaration public DateTime CreatedAt { get; set; } Property Value Type Description DateTime | Edit this page View Source ExpiresAt Declaration public DateTime ExpiresAt { get; set; } Property Value Type Description DateTime | Edit this page View Source IpAddress Declaration [StringLength(45)] public string? IpAddress { get; set; } Property Value Type Description string | Edit this page View Source IsActive Declaration public bool IsActive { get; set; } Property Value Type Description bool | Edit this page View Source LastUsedAt Declaration public DateTime? LastUsedAt { get; set; } Property Value Type Description DateTime? | Edit this page View Source SessionToken Declaration [Required] [StringLength(128)] public string SessionToken { get; set; } Property Value Type Description string | Edit this page View Source UserAgent Declaration [StringLength(255)] public string? UserAgent { get; set; } Property Value Type Description string"
  },
  "api/NoorCanvas.Models.Annotation.html": {
    "href": "api/NoorCanvas.Models.Annotation.html",
    "title": "Class Annotation | NOOR CANVAS Documentation",
    "summary": "Class Annotation Inheritance object Annotation Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NoorCanvas.Models Assembly: .dll Syntax [Table(\"Annotations\", Schema = \"canvas\")] public class Annotation Properties | Edit this page View Source AnnotationData Declaration [Column(TypeName = \"nvarchar(max)\")] public string? AnnotationData { get; set; } Property Value Type Description string | Edit this page View Source AnnotationId Declaration [Key] public long AnnotationId { get; set; } Property Value Type Description long | Edit this page View Source CreatedAt Declaration public DateTime CreatedAt { get; set; } Property Value Type Description DateTime | Edit this page View Source CreatedBy Declaration [MaxLength(128)] public string? CreatedBy { get; set; } Property Value Type Description string | Edit this page View Source Session Declaration [ForeignKey(\"SessionId\")] public virtual Session Session { get; set; } Property Value Type Description Session | Edit this page View Source SessionId Declaration [Required] public long SessionId { get; set; } Property Value Type Description long"
  },
  "api/NoorCanvas.Models.AuditLog.html": {
    "href": "api/NoorCanvas.Models.AuditLog.html",
    "title": "Class AuditLog | NOOR CANVAS Documentation",
    "summary": "Class AuditLog Inheritance object AuditLog Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NoorCanvas.Models Assembly: .dll Syntax [Table(\"AuditLog\", Schema = \"canvas\")] public class AuditLog Properties | Edit this page View Source Action Declaration [MaxLength(100)] public string? Action { get; set; } Property Value Type Description string | Edit this page View Source Actor Declaration [MaxLength(64)] public string? Actor { get; set; } Property Value Type Description string | Edit this page View Source At Declaration public DateTime At { get; set; } Property Value Type Description DateTime | Edit this page View Source Details Declaration [Column(TypeName = \"nvarchar(max)\")] public string? Details { get; set; } Property Value Type Description string | Edit this page View Source EventId Declaration [Key] public long EventId { get; set; } Property Value Type Description long | Edit this page View Source Session Declaration [ForeignKey(\"SessionId\")] public virtual Session? Session { get; set; } Property Value Type Description Session | Edit this page View Source SessionId Declaration public long? SessionId { get; set; } Property Value Type Description long? | Edit this page View Source User Declaration [ForeignKey(\"UserId\")] public virtual User? User { get; set; } Property Value Type Description User | Edit this page View Source UserId Declaration public Guid? UserId { get; set; } Property Value Type Description Guid?"
  },
  "api/NoorCanvas.Models.HostSession.html": {
    "href": "api/NoorCanvas.Models.HostSession.html",
    "title": "Class HostSession | NOOR CANVAS Documentation",
    "summary": "Class HostSession Inheritance object HostSession Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NoorCanvas.Models Assembly: .dll Syntax [Table(\"HostSessions\", Schema = \"canvas\")] public class HostSession Properties | Edit this page View Source CreatedAt Declaration public DateTime CreatedAt { get; set; } Property Value Type Description DateTime | Edit this page View Source CreatedBy Declaration [MaxLength(128)] public string? CreatedBy { get; set; } Property Value Type Description string | Edit this page View Source ExpiresAt Declaration public DateTime? ExpiresAt { get; set; } Property Value Type Description DateTime? | Edit this page View Source HostGuidHash Declaration [Required] [MaxLength(128)] public string HostGuidHash { get; set; } Property Value Type Description string | Edit this page View Source HostSessionId Declaration [Key] public long HostSessionId { get; set; } Property Value Type Description long | Edit this page View Source IsActive Declaration public bool IsActive { get; set; } Property Value Type Description bool | Edit this page View Source LastUsedAt Declaration public DateTime? LastUsedAt { get; set; } Property Value Type Description DateTime? | Edit this page View Source RevokedAt Declaration public DateTime? RevokedAt { get; set; } Property Value Type Description DateTime? | Edit this page View Source RevokedBy Declaration [MaxLength(128)] public string? RevokedBy { get; set; } Property Value Type Description string | Edit this page View Source Session Declaration [ForeignKey(\"SessionId\")] public virtual Session Session { get; set; } Property Value Type Description Session | Edit this page View Source SessionId Declaration [Required] public long SessionId { get; set; } Property Value Type Description long"
  },
  "api/NoorCanvas.Models.Issue.html": {
    "href": "api/NoorCanvas.Models.Issue.html",
    "title": "Class Issue | NOOR CANVAS Documentation",
    "summary": "Class Issue Inheritance object Issue Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NoorCanvas.Models Assembly: .dll Syntax [Table(\"Issues\", Schema = \"canvas\")] public class Issue Properties | Edit this page View Source Category Declaration [MaxLength(50)] public string Category { get; set; } Property Value Type Description string | Edit this page View Source Context Declaration [Column(TypeName = \"nvarchar(max)\")] public string? Context { get; set; } Property Value Type Description string | Edit this page View Source Description Declaration [Column(TypeName = \"nvarchar(max)\")] public string? Description { get; set; } Property Value Type Description string | Edit this page View Source IssueId Declaration [Key] public long IssueId { get; set; } Property Value Type Description long | Edit this page View Source Priority Declaration [MaxLength(50)] public string Priority { get; set; } Property Value Type Description string | Edit this page View Source ReportedAt Declaration public DateTime ReportedAt { get; set; } Property Value Type Description DateTime | Edit this page View Source ReportedBy Declaration [MaxLength(128)] public string? ReportedBy { get; set; } Property Value Type Description string | Edit this page View Source Session Declaration [ForeignKey(\"SessionId\")] public virtual Session? Session { get; set; } Property Value Type Description Session | Edit this page View Source SessionId Declaration public long? SessionId { get; set; } Property Value Type Description long? | Edit this page View Source Status Declaration [MaxLength(50)] public string Status { get; set; } Property Value Type Description string | Edit this page View Source Title Declaration [Required] [MaxLength(200)] public string Title { get; set; } Property Value Type Description string | Edit this page View Source User Declaration [ForeignKey(\"UserId\")] public virtual User? User { get; set; } Property Value Type Description User | Edit this page View Source UserId Declaration public Guid? UserId { get; set; } Property Value Type Description Guid?"
  },
  "api/NoorCanvas.Models.KSESSIONS.KSessionsCategory.html": {
    "href": "api/NoorCanvas.Models.KSESSIONS.KSessionsCategory.html",
    "title": "Class KSessionsCategory | NOOR CANVAS Documentation",
    "summary": "Class KSessionsCategory Categories from KSESSIONS database - Subdivisions within Groups Maps to KSESSIONS.dbo.Categories table Inheritance object KSessionsCategory Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NoorCanvas.Models.KSESSIONS Assembly: .dll Syntax [Table(\"Categories\", Schema = \"dbo\")] public class KSessionsCategory Properties | Edit this page View Source CategoryId Declaration [Key] [Column(\"CategoryID\")] public int CategoryId { get; set; } Property Value Type Description int | Edit this page View Source CategoryName Declaration [Column(\"CategoryName\")] [StringLength(255)] public string CategoryName { get; set; } Property Value Type Description string | Edit this page View Source ChangedDate Declaration [Column(\"ChangedDate\")] public DateTime? ChangedDate { get; set; } Property Value Type Description DateTime? | Edit this page View Source CreatedDate Declaration [Column(\"CreatedDate\")] public DateTime? CreatedDate { get; set; } Property Value Type Description DateTime? | Edit this page View Source Group Declaration [ForeignKey(\"GroupId\")] public virtual KSessionsGroup Group { get; set; } Property Value Type Description KSessionsGroup | Edit this page View Source GroupId Declaration [Column(\"GroupID\")] public int GroupId { get; set; } Property Value Type Description int | Edit this page View Source IsActive Declaration [Column(\"IsActive\")] public bool? IsActive { get; set; } Property Value Type Description bool? | Edit this page View Source Sessions Declaration public virtual ICollection<KSessionsSession> Sessions { get; set; } Property Value Type Description ICollection<KSessionsSession> | Edit this page View Source SortOrder Declaration [Column(\"SortOrder\")] public int? SortOrder { get; set; } Property Value Type Description int?"
  },
  "api/NoorCanvas.Models.KSESSIONS.KSessionsGroup.html": {
    "href": "api/NoorCanvas.Models.KSESSIONS.KSessionsGroup.html",
    "title": "Class KSessionsGroup | NOOR CANVAS Documentation",
    "summary": "Class KSessionsGroup Groups (Albums) from KSESSIONS database - Islamic content collections Maps to KSESSIONS.dbo.Groups table Inheritance object KSessionsGroup Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NoorCanvas.Models.KSESSIONS Assembly: .dll Syntax [Table(\"Groups\", Schema = \"dbo\")] public class KSessionsGroup Properties | Edit this page View Source Categories Declaration public virtual ICollection<KSessionsCategory> Categories { get; set; } Property Value Type Description ICollection<KSessionsCategory> | Edit this page View Source ChangedDate Declaration [Column(\"ChangedDate\")] public DateTime? ChangedDate { get; set; } Property Value Type Description DateTime? | Edit this page View Source CreatedDate Declaration [Column(\"CreatedDate\")] public DateTime? CreatedDate { get; set; } Property Value Type Description DateTime? | Edit this page View Source GroupDescription Declaration [Column(\"GroupDescription\")] public string? GroupDescription { get; set; } Property Value Type Description string | Edit this page View Source GroupId Declaration [Key] [Column(\"GroupID\")] public int GroupId { get; set; } Property Value Type Description int | Edit this page View Source GroupImage Declaration [Column(\"GroupImage\")] [StringLength(255)] public string? GroupImage { get; set; } Property Value Type Description string | Edit this page View Source GroupName Declaration [Column(\"GroupName\")] [StringLength(255)] public string GroupName { get; set; } Property Value Type Description string | Edit this page View Source IsActive Declaration [Column(\"IsActive\")] public bool? IsActive { get; set; } Property Value Type Description bool? | Edit this page View Source IsCompleted Declaration [Column(\"IsCompleted\")] public bool? IsCompleted { get; set; } Property Value Type Description bool? | Edit this page View Source Sessions Declaration public virtual ICollection<KSessionsSession> Sessions { get; set; } Property Value Type Description ICollection<KSessionsSession> | Edit this page View Source SpeakerId Declaration [Column(\"SpeakerID\")] public int? SpeakerId { get; set; } Property Value Type Description int? | Edit this page View Source Syllabus Declaration [Column(\"Syllabus\")] public string? Syllabus { get; set; } Property Value Type Description string"
  },
  "api/NoorCanvas.Models.KSESSIONS.KSessionsSession.html": {
    "href": "api/NoorCanvas.Models.KSESSIONS.KSessionsSession.html",
    "title": "Class KSessionsSession | NOOR CANVAS Documentation",
    "summary": "Class KSessionsSession Sessions from KSESSIONS database - Individual Islamic learning sessions Maps to KSESSIONS.dbo.Sessions table Inheritance object KSessionsSession Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NoorCanvas.Models.KSESSIONS Assembly: .dll Syntax [Table(\"Sessions\", Schema = \"dbo\")] public class KSessionsSession Properties | Edit this page View Source Category Declaration [ForeignKey(\"CategoryId\")] public virtual KSessionsCategory Category { get; set; } Property Value Type Description KSessionsCategory | Edit this page View Source CategoryId Declaration [Column(\"CategoryID\")] public int CategoryId { get; set; } Property Value Type Description int | Edit this page View Source ChangedDate Declaration [Column(\"ChangedDate\")] public DateTime? ChangedDate { get; set; } Property Value Type Description DateTime? | Edit this page View Source CreatedDate Declaration [Column(\"CreatedDate\")] public DateTime? CreatedDate { get; set; } Property Value Type Description DateTime? | Edit this page View Source DeliveryRating Declaration [Column(\"DeliveryRating\")] public int? DeliveryRating { get; set; } Property Value Type Description int? | Edit this page View Source Description Declaration [Column(\"Description\")] public string? Description { get; set; } Property Value Type Description string | Edit this page View Source Group Declaration [ForeignKey(\"GroupId\")] public virtual KSessionsGroup Group { get; set; } Property Value Type Description KSessionsGroup | Edit this page View Source GroupId Declaration [Column(\"GroupID\")] public int GroupId { get; set; } Property Value Type Description int | Edit this page View Source ImageCount Declaration [Column(\"ImageCount\")] public int? ImageCount { get; set; } Property Value Type Description int? | Edit this page View Source ImagesFolderPath Declaration [Column(\"ImagesFolderPath\")] [StringLength(500)] public string? ImagesFolderPath { get; set; } Property Value Type Description string | Edit this page View Source ImagesProcessedDate Declaration [Column(\"ImagesProcessedDate\")] public DateTime? ImagesProcessedDate { get; set; } Property Value Type Description DateTime? | Edit this page View Source IsActive Declaration [Column(\"IsActive\")] public bool? IsActive { get; set; } Property Value Type Description bool? | Edit this page View Source MediaPath Declaration [Column(\"MediaPath\")] [StringLength(500)] public string? MediaPath { get; set; } Property Value Type Description string | Edit this page View Source Sequence Declaration [Column(\"Sequence\")] public int? Sequence { get; set; } Property Value Type Description int? | Edit this page View Source SessionDate Declaration [Column(\"SessionDate\")] public DateTime? SessionDate { get; set; } Property Value Type Description DateTime? | Edit this page View Source SessionId Declaration [Key] [Column(\"SessionID\")] public int SessionId { get; set; } Property Value Type Description int | Edit this page View Source SessionName Declaration [Column(\"SessionName\")] [StringLength(500)] public string SessionName { get; set; } Property Value Type Description string | Edit this page View Source SpeakerId Declaration [Column(\"SpeakerID\")] public int? SpeakerId { get; set; } Property Value Type Description int?"
  },
  "api/NoorCanvas.Models.KSESSIONS.KSessionsSessionTranscript.html": {
    "href": "api/NoorCanvas.Models.KSESSIONS.KSessionsSessionTranscript.html",
    "title": "Class KSessionsSessionTranscript | NOOR CANVAS Documentation",
    "summary": "Class KSessionsSessionTranscript KSESSIONS SessionTranscripts entity - represents transcript content available for annotation Maps to KSESSIONS_DEV.dbo.SessionTranscripts table Inheritance object KSessionsSessionTranscript Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NoorCanvas.Models.KSESSIONS Assembly: .dll Syntax [Table(\"SessionTranscripts\", Schema = \"dbo\")] public class KSessionsSessionTranscript Properties | Edit this page View Source ChangedDate Declaration public DateTime? ChangedDate { get; set; } Property Value Type Description DateTime? | Edit this page View Source Session Declaration public virtual KSessionsSession Session { get; set; } Property Value Type Description KSessionsSession | Edit this page View Source SessionId Declaration [Required] public int SessionId { get; set; } Property Value Type Description int | Edit this page View Source TranscriptId Declaration [Key] public int TranscriptId { get; set; } Property Value Type Description int"
  },
  "api/NoorCanvas.Models.KSESSIONS.html": {
    "href": "api/NoorCanvas.Models.KSESSIONS.html",
    "title": "Namespace NoorCanvas.Models.KSESSIONS | NOOR CANVAS Documentation",
    "summary": "Namespace NoorCanvas.Models.KSESSIONS Classes KSessionsCategory Categories from KSESSIONS database - Subdivisions within Groups Maps to KSESSIONS.dbo.Categories table KSessionsGroup Groups (Albums) from KSESSIONS database - Islamic content collections Maps to KSESSIONS.dbo.Groups table KSessionsSession Sessions from KSESSIONS database - Individual Islamic learning sessions Maps to KSESSIONS.dbo.Sessions table KSessionsSessionTranscript KSESSIONS SessionTranscripts entity - represents transcript content available for annotation Maps to KSESSIONS_DEV.dbo.SessionTranscripts table"
  },
  "api/NoorCanvas.Models.Question.html": {
    "href": "api/NoorCanvas.Models.Question.html",
    "title": "Class Question | NOOR CANVAS Documentation",
    "summary": "Class Question Inheritance object Question Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NoorCanvas.Models Assembly: .dll Syntax [Table(\"Questions\", Schema = \"canvas\")] public class Question Properties | Edit this page View Source AnsweredAt Declaration public DateTime? AnsweredAt { get; set; } Property Value Type Description DateTime? | Edit this page View Source QuestionAnswers Declaration public virtual ICollection<QuestionAnswer> QuestionAnswers { get; set; } Property Value Type Description ICollection<QuestionAnswer> | Edit this page View Source QuestionId Declaration [Key] public long QuestionId { get; set; } Property Value Type Description long | Edit this page View Source QuestionText Declaration [Required] [MaxLength(280)] public string QuestionText { get; set; } Property Value Type Description string | Edit this page View Source QuestionVotes Declaration public virtual ICollection<QuestionVote> QuestionVotes { get; set; } Property Value Type Description ICollection<QuestionVote> | Edit this page View Source QueuedAt Declaration public DateTime QueuedAt { get; set; } Property Value Type Description DateTime | Edit this page View Source Session Declaration [ForeignKey(\"SessionId\")] public virtual Session Session { get; set; } Property Value Type Description Session | Edit this page View Source SessionId Declaration [Required] public long SessionId { get; set; } Property Value Type Description long | Edit this page View Source Status Declaration [MaxLength(50)] public string Status { get; set; } Property Value Type Description string | Edit this page View Source User Declaration [ForeignKey(\"UserId\")] public virtual User User { get; set; } Property Value Type Description User | Edit this page View Source UserId Declaration [Required] public Guid UserId { get; set; } Property Value Type Description Guid | Edit this page View Source VoteCount Declaration public int VoteCount { get; set; } Property Value Type Description int"
  },
  "api/NoorCanvas.Models.QuestionAnswer.html": {
    "href": "api/NoorCanvas.Models.QuestionAnswer.html",
    "title": "Class QuestionAnswer | NOOR CANVAS Documentation",
    "summary": "Class QuestionAnswer Inheritance object QuestionAnswer Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NoorCanvas.Models Assembly: .dll Syntax [Table(\"QuestionAnswers\", Schema = \"canvas\")] public class QuestionAnswer Properties | Edit this page View Source AnswerId Declaration [Key] public long AnswerId { get; set; } Property Value Type Description long | Edit this page View Source AnswerText Declaration [Column(TypeName = \"nvarchar(max)\")] public string? AnswerText { get; set; } Property Value Type Description string | Edit this page View Source PostedAt Declaration public DateTime PostedAt { get; set; } Property Value Type Description DateTime | Edit this page View Source PostedBy Declaration [Required] [MaxLength(64)] public string PostedBy { get; set; } Property Value Type Description string | Edit this page View Source Question Declaration [ForeignKey(\"QuestionId\")] public virtual Question Question { get; set; } Property Value Type Description Question | Edit this page View Source QuestionId Declaration [Required] public long QuestionId { get; set; } Property Value Type Description long"
  },
  "api/NoorCanvas.Models.QuestionVote.html": {
    "href": "api/NoorCanvas.Models.QuestionVote.html",
    "title": "Class QuestionVote | NOOR CANVAS Documentation",
    "summary": "Class QuestionVote Inheritance object QuestionVote Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NoorCanvas.Models Assembly: .dll Syntax [Table(\"QuestionVotes\", Schema = \"canvas\")] public class QuestionVote Properties | Edit this page View Source Question Declaration [ForeignKey(\"QuestionId\")] public virtual Question Question { get; set; } Property Value Type Description Question | Edit this page View Source QuestionId Declaration [Required] public long QuestionId { get; set; } Property Value Type Description long | Edit this page View Source User Declaration [ForeignKey(\"UserId\")] public virtual User? User { get; set; } Property Value Type Description User | Edit this page View Source UserId Declaration public Guid? UserId { get; set; } Property Value Type Description Guid? | Edit this page View Source VoteId Declaration [Key] public long VoteId { get; set; } Property Value Type Description long | Edit this page View Source VoteValue Declaration public byte VoteValue { get; set; } Property Value Type Description byte | Edit this page View Source VotedAt Declaration public DateTime VotedAt { get; set; } Property Value Type Description DateTime"
  },
  "api/NoorCanvas.Models.Registration.html": {
    "href": "api/NoorCanvas.Models.Registration.html",
    "title": "Class Registration | NOOR CANVAS Documentation",
    "summary": "Class Registration Inheritance object Registration Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NoorCanvas.Models Assembly: .dll Syntax [Table(\"Registrations\", Schema = \"canvas\")] public class Registration Properties | Edit this page View Source JoinTime Declaration public DateTime JoinTime { get; set; } Property Value Type Description DateTime | Edit this page View Source RegistrationId Declaration [Key] public long RegistrationId { get; set; } Property Value Type Description long | Edit this page View Source Session Declaration [ForeignKey(\"SessionId\")] public virtual Session Session { get; set; } Property Value Type Description Session | Edit this page View Source SessionId Declaration [Required] public long SessionId { get; set; } Property Value Type Description long | Edit this page View Source User Declaration [ForeignKey(\"UserId\")] public virtual User User { get; set; } Property Value Type Description User | Edit this page View Source UserId Declaration [Required] public Guid UserId { get; set; } Property Value Type Description Guid"
  },
  "api/NoorCanvas.Models.Session.html": {
    "href": "api/NoorCanvas.Models.Session.html",
    "title": "Class Session | NOOR CANVAS Documentation",
    "summary": "Class Session Inheritance object Session Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NoorCanvas.Models Assembly: .dll Syntax [Table(\"Sessions\", Schema = \"canvas\")] public class Session Properties | Edit this page View Source Annotations Declaration public virtual ICollection<Annotation> Annotations { get; set; } Property Value Type Description ICollection<Annotation> | Edit this page View Source CreatedAt Declaration public DateTime CreatedAt { get; set; } Property Value Type Description DateTime | Edit this page View Source Description Declaration [StringLength(1000)] public string? Description { get; set; } Property Value Type Description string | Edit this page View Source EndedAt Declaration public DateTime? EndedAt { get; set; } Property Value Type Description DateTime? | Edit this page View Source ExpiresAt Declaration public DateTime? ExpiresAt { get; set; } Property Value Type Description DateTime? | Edit this page View Source GroupId Declaration public Guid GroupId { get; set; } Property Value Type Description Guid | Edit this page View Source HostGuid Declaration [StringLength(100)] public string HostGuid { get; set; } Property Value Type Description string | Edit this page View Source HostSessions Declaration public virtual ICollection<HostSession> HostSessions { get; set; } Property Value Type Description ICollection<HostSession> | Edit this page View Source KSessionsId Reference to the KSESSIONS database SessionId for Islamic content integration Declaration public long? KSessionsId { get; set; } Property Value Type Description long? | Edit this page View Source MaxParticipants Declaration public int? MaxParticipants { get; set; } Property Value Type Description int? | Edit this page View Source ModifiedAt Declaration public DateTime ModifiedAt { get; set; } Property Value Type Description DateTime | Edit this page View Source ParticipantCount Declaration public int? ParticipantCount { get; set; } Property Value Type Description int? | Edit this page View Source Questions Declaration public virtual ICollection<Question> Questions { get; set; } Property Value Type Description ICollection<Question> | Edit this page View Source Registrations Declaration public virtual ICollection<Registration> Registrations { get; set; } Property Value Type Description ICollection<Registration> | Edit this page View Source SessionId Declaration [Key] public long SessionId { get; set; } Property Value Type Description long | Edit this page View Source SessionLinks Declaration public virtual ICollection<SessionLink> SessionLinks { get; set; } Property Value Type Description ICollection<SessionLink> | Edit this page View Source SharedAssets Declaration public virtual ICollection<SharedAsset> SharedAssets { get; set; } Property Value Type Description ICollection<SharedAsset> | Edit this page View Source StartedAt Declaration public DateTime? StartedAt { get; set; } Property Value Type Description DateTime? | Edit this page View Source Status Declaration [StringLength(50)] public string? Status { get; set; } Property Value Type Description string | Edit this page View Source Title Declaration [StringLength(200)] public string? Title { get; set; } Property Value Type Description string"
  },
  "api/NoorCanvas.Models.SessionLink.html": {
    "href": "api/NoorCanvas.Models.SessionLink.html",
    "title": "Class SessionLink | NOOR CANVAS Documentation",
    "summary": "Class SessionLink Inheritance object SessionLink Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NoorCanvas.Models Assembly: .dll Syntax [Table(\"SessionLinks\", Schema = \"canvas\")] public class SessionLink Properties | Edit this page View Source CreatedAt Declaration public DateTime CreatedAt { get; set; } Property Value Type Description DateTime | Edit this page View Source Guid Declaration [Required] public Guid Guid { get; set; } Property Value Type Description Guid | Edit this page View Source LastUsedAt Declaration public DateTime? LastUsedAt { get; set; } Property Value Type Description DateTime? | Edit this page View Source LinkId Declaration [Key] public long LinkId { get; set; } Property Value Type Description long | Edit this page View Source Session Declaration [ForeignKey(\"SessionId\")] public virtual Session Session { get; set; } Property Value Type Description Session | Edit this page View Source SessionId Declaration [Required] public long SessionId { get; set; } Property Value Type Description long | Edit this page View Source State Declaration public byte State { get; set; } Property Value Type Description byte | Edit this page View Source UseCount Declaration public int UseCount { get; set; } Property Value Type Description int"
  },
  "api/NoorCanvas.Models.SharedAsset.html": {
    "href": "api/NoorCanvas.Models.SharedAsset.html",
    "title": "Class SharedAsset | NOOR CANVAS Documentation",
    "summary": "Class SharedAsset Inheritance object SharedAsset Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NoorCanvas.Models Assembly: .dll Syntax [Table(\"SharedAssets\", Schema = \"canvas\")] public class SharedAsset Properties | Edit this page View Source AssetData Declaration [Column(TypeName = \"nvarchar(max)\")] public string? AssetData { get; set; } Property Value Type Description string | Edit this page View Source AssetId Declaration [Key] public long AssetId { get; set; } Property Value Type Description long | Edit this page View Source AssetType Declaration [MaxLength(50)] public string? AssetType { get; set; } Property Value Type Description string | Edit this page View Source Session Declaration [ForeignKey(\"SessionId\")] public virtual Session Session { get; set; } Property Value Type Description Session | Edit this page View Source SessionId Declaration [Required] public long SessionId { get; set; } Property Value Type Description long | Edit this page View Source SharedAt Declaration public DateTime SharedAt { get; set; } Property Value Type Description DateTime"
  },
  "api/NoorCanvas.Models.User.html": {
    "href": "api/NoorCanvas.Models.User.html",
    "title": "Class User | NOOR CANVAS Documentation",
    "summary": "Class User Inheritance object User Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NoorCanvas.Models Assembly: .dll Syntax [Table(\"Users\", Schema = \"canvas\")] public class User Properties | Edit this page View Source City Declaration [MaxLength(128)] public string? City { get; set; } Property Value Type Description string | Edit this page View Source Country Declaration [MaxLength(128)] public string? Country { get; set; } Property Value Type Description string | Edit this page View Source CreatedAt Declaration public DateTime CreatedAt { get; set; } Property Value Type Description DateTime | Edit this page View Source FirstJoinedAt Declaration public DateTime FirstJoinedAt { get; set; } Property Value Type Description DateTime | Edit this page View Source IsActive Declaration public bool IsActive { get; set; } Property Value Type Description bool | Edit this page View Source LastJoinedAt Declaration public DateTime LastJoinedAt { get; set; } Property Value Type Description DateTime | Edit this page View Source LastSeenAt Declaration public DateTime? LastSeenAt { get; set; } Property Value Type Description DateTime? | Edit this page View Source ModifiedAt Declaration public DateTime ModifiedAt { get; set; } Property Value Type Description DateTime | Edit this page View Source Name Declaration [MaxLength(256)] public string? Name { get; set; } Property Value Type Description string | Edit this page View Source QuestionVotes Declaration public virtual ICollection<QuestionVote> QuestionVotes { get; set; } Property Value Type Description ICollection<QuestionVote> | Edit this page View Source Questions Declaration public virtual ICollection<Question> Questions { get; set; } Property Value Type Description ICollection<Question> | Edit this page View Source Registrations Declaration public virtual ICollection<Registration> Registrations { get; set; } Property Value Type Description ICollection<Registration> | Edit this page View Source UserGuid Declaration [MaxLength(256)] public string UserGuid { get; set; } Property Value Type Description string | Edit this page View Source UserId Declaration [Key] public Guid UserId { get; set; } Property Value Type Description Guid"
  },
  "api/NoorCanvas.Models.html": {
    "href": "api/NoorCanvas.Models.html",
    "title": "Namespace NoorCanvas.Models | NOOR CANVAS Documentation",
    "summary": "Namespace NoorCanvas.Models Classes AdminSession Annotation AuditLog HostSession Issue Question QuestionAnswer QuestionVote Registration Session SessionLink SharedAsset User"
  },
  "api/NoorCanvas.Pages.ErrorModel.html": {
    "href": "api/NoorCanvas.Pages.ErrorModel.html",
    "title": "Class ErrorModel | NOOR CANVAS Documentation",
    "summary": "Class ErrorModel Inheritance object ErrorModel Namespace: NoorCanvas.Pages Assembly: .dll Syntax public class ErrorModel : PageModel Constructors | Edit this page View Source ErrorModel(ILogger<ErrorModel>) Declaration public ErrorModel(ILogger<ErrorModel> logger) Parameters Type Name Description ILogger<ErrorModel> logger Properties | Edit this page View Source RequestId Declaration public string RequestId { get; set; } Property Value Type Description string | Edit this page View Source ShowRequestId Declaration public bool ShowRequestId { get; } Property Value Type Description bool Methods | Edit this page View Source OnGet() Declaration public void OnGet()"
  },
  "api/NoorCanvas.Pages.html": {
    "href": "api/NoorCanvas.Pages.html",
    "title": "Namespace NoorCanvas.Pages | NOOR CANVAS Documentation",
    "summary": "Namespace NoorCanvas.Pages Classes ErrorModel"
  },
  "api/NoorCanvas.Services.AnnotationService.html": {
    "href": "api/NoorCanvas.Services.AnnotationService.html",
    "title": "Class AnnotationService | NOOR CANVAS Documentation",
    "summary": "Class AnnotationService Inheritance object AnnotationService Implements IAnnotationService Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NoorCanvas.Services Assembly: .dll Syntax public class AnnotationService : IAnnotationService Constructors | Edit this page View Source AnnotationService(CanvasDbContext, ILogger<AnnotationService>) Declaration public AnnotationService(CanvasDbContext context, ILogger<AnnotationService> logger) Parameters Type Name Description CanvasDbContext context ILogger<AnnotationService> logger Methods | Edit this page View Source ClearSessionAnnotationsAsync(long, string) Declaration public Task ClearSessionAnnotationsAsync(long sessionId, string userId) Parameters Type Name Description long sessionId string userId Returns Type Description Task | Edit this page View Source CreateAnnotationAsync(long, string, object) Declaration public Task<Annotation> CreateAnnotationAsync(long sessionId, string createdBy, object annotationData) Parameters Type Name Description long sessionId string createdBy object annotationData Returns Type Description Task<Annotation> | Edit this page View Source DeleteAnnotationAsync(long, string) Declaration public Task<bool> DeleteAnnotationAsync(long annotationId, string userId) Parameters Type Name Description long annotationId string userId Returns Type Description Task<bool> | Edit this page View Source GetSessionAnnotationsAsync(long) Declaration public Task<IEnumerable<Annotation>> GetSessionAnnotationsAsync(long sessionId) Parameters Type Name Description long sessionId Returns Type Description Task<IEnumerable<Annotation>> | Edit this page View Source UpdateAnnotationAsync(long, string, object) Declaration public Task<bool> UpdateAnnotationAsync(long annotationId, string userId, object annotationData) Parameters Type Name Description long annotationId string userId object annotationData Returns Type Description Task<bool> Implements IAnnotationService"
  },
  "api/NoorCanvas.Services.DialogService.html": {
    "href": "api/NoorCanvas.Services.DialogService.html",
    "title": "Class DialogService | NOOR CANVAS Documentation",
    "summary": "Class DialogService Inheritance object DialogService Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: NoorCanvas.Services Assembly: .dll Syntax public class DialogService Methods | Edit this page View Source RegisterAlertDialog(AlertDialog) Declaration public void RegisterAlertDialog(AlertDialog alertDialog) Parameters Type Name Description AlertDialog alertDialog | Edit this page View Source RegisterConfirmDialog(ConfirmDialog) Declaration public void RegisterConfirmDialog(ConfirmDialog confirmDialog) Parameters Type Name Description ConfirmDialog confirmDialog | Edit this page View Source ShowAlertAsync(string, string, AlertType) Declaration public Task ShowAlertAsync(string message, string title = \"Alert\", AlertDialog.AlertType type = null) Parameters Type Name Description string message string title AlertType type Returns Type Description Task | Edit this page View Source ShowConfirmAsync(string, string, ConfirmationType) Declaration public Task<bool> ShowConfirmAsync(string message, string title = \"Confirm Action\", ConfirmDialog.ConfirmationType type = null) Parameters Type Name Description string message string title ConfirmationType type Returns Type Description Task<bool> | Edit this page View Source ShowDangerConfirmAsync(string, string) Declaration public Task<bool> ShowDangerConfirmAsync(string message, string title = \"Confirm Delete\") Parameters Type Name Description string message string title Returns Type Description Task<bool> | Edit this page View Source ShowErrorAsync(string, string) Declaration public Task ShowErrorAsync(string message, string title = \"Error\") Parameters Type Name Description string message string title Returns Type Description Task | Edit this page View Source ShowSuccessAsync(string, string) Declaration public Task ShowSuccessAsync(string message, string title = \"Success\") Parameters Type Name Description string message string title Returns Type Description Task | Edit this page View Source ShowWarningAsync(string, string) Declaration public Task ShowWarningAsync(string message, string title = \"Warning\") Parameters Type Name Description string message string title Returns Type Description Task | Edit this page View Source ShowWarningConfirmAsync(string, string) Declaration public Task<bool> ShowWarningConfirmAsync(string message, string title = \"Warning\") Parameters Type Name Description string message string title Returns Type Description Task<bool>"
  },
  "api/NoorCanvas.Services.IAnnotationService.html": {
    "href": "api/NoorCanvas.Services.IAnnotationService.html",
    "title": "Interface IAnnotationService | NOOR CANVAS Documentation",
    "summary": "Interface IAnnotationService Namespace: NoorCanvas.Services Assembly: .dll Syntax public interface IAnnotationService Methods | Edit this page View Source ClearSessionAnnotationsAsync(long, string) Declaration Task ClearSessionAnnotationsAsync(long sessionId, string userId) Parameters Type Name Description long sessionId string userId Returns Type Description Task | Edit this page View Source CreateAnnotationAsync(long, string, object) Declaration Task<Annotation> CreateAnnotationAsync(long sessionId, string createdBy, object annotationData) Parameters Type Name Description long sessionId string createdBy object annotationData Returns Type Description Task<Annotation> | Edit this page View Source DeleteAnnotationAsync(long, string) Declaration Task<bool> DeleteAnnotationAsync(long annotationId, string userId) Parameters Type Name Description long annotationId string userId Returns Type Description Task<bool> | Edit this page View Source GetSessionAnnotationsAsync(long) Declaration Task<IEnumerable<Annotation>> GetSessionAnnotationsAsync(long sessionId) Parameters Type Name Description long sessionId Returns Type Description Task<IEnumerable<Annotation>> | Edit this page View Source UpdateAnnotationAsync(long, string, object) Declaration Task<bool> UpdateAnnotationAsync(long annotationId, string userId, object annotationData) Parameters Type Name Description long annotationId string userId object annotationData Returns Type Description Task<bool>"
  },
  "api/NoorCanvas.Services.html": {
    "href": "api/NoorCanvas.Services.html",
    "title": "Namespace NoorCanvas.Services | NOOR CANVAS Documentation",
    "summary": "Namespace NoorCanvas.Services Classes AnnotationService DialogService Interfaces IAnnotationService"
  },
  "api/index.html": {
    "href": "api/index.html",
    "title": "API Reference | NOOR CANVAS Documentation",
    "summary": "API Reference This section contains comprehensive API documentation for NOOR CANVAS components. Controllers SessionController Manages session creation, management, and lifecycle operations. ParticipantController Handles participant registration, authentication, and management. AnnotationController Processes real-time annotation data and synchronization. QuestionController Manages Q&A system functionality and responses. SignalR Hubs SessionHub Real-time session management and coordination. AnnotationHub Live annotation synchronization and canvas updates. ParticipantHub Participant connection management and status updates. QuestionHub Q&A system real-time communication. Models Core Models Session Participant Annotation Question SessionTranscript Request/Response Models CreateSessionRequest ParticipantRegistrationRequest AnnotationData QuestionResponse Services Business Logic Services SessionService AnnotationService ParticipantService NotificationService Note: Complete API documentation is generated automatically from source code comments."
  },
  "articles/deployment/database-setup.html": {
    "href": "articles/deployment/database-setup.html",
    "title": "Database Setup | NOOR CANVAS Documentation",
    "summary": "Database Setup Overview NOOR Canvas uses a dual-database architecture with dedicated development and production environments. This guide covers complete database setup, schema creation, and cross-database integration configuration. Database Architecture Development Environment Primary Database: KSESSIONS_DEV (NOOR Canvas data with canvas schema) Integration Database: KQUR_DEV (Quranic content for cross-application features) Server Instance: Local SQL Server or SQL Server Express Authentication: SQL Server Authentication with sa account Connection Timeout: 3600 seconds (1 hour) for long operations Production Environment Primary Database: KSESSIONS (production NOOR Canvas data) Integration Database: KQUR (production Quranic content) Server Instance: Production SQL Server cluster Authentication: Integrated Windows Authentication preferred Connection Timeout: 3600 seconds (1 hour) for long operations Prerequisites SQL Server Requirements SQL Server 2019 or later (Express Edition acceptable for development) Mixed Mode Authentication enabled for development TCP/IP Protocol enabled Minimum Memory: 512 MB allocated to SQL Server Collation: SQL_Latin1_General_CP1_CI_AS (case-insensitive) Required Permissions Development: sa account with sysadmin privileges Production: Dedicated service account with db_owner on both databases Database Creation Development Database Setup 1. Create Development Databases -- Connect as sa user to SQL Server instance -- Create primary development database CREATE DATABASE [KSESSIONS_DEV] ON ( NAME = N'KSESSIONS_DEV', FILENAME = N'C:\\Program Files\\Microsoft SQL Server\\MSSQL15.SQLEXPRESS\\MSSQL\\DATA\\KSESSIONS_DEV.mdf', SIZE = 100MB, MAXSIZE = 1GB, FILEGROWTH = 10MB ) LOG ON ( NAME = N'KSESSIONS_DEV_Log', FILENAME = N'C:\\Program Files\\Microsoft SQL Server\\MSSQL15.SQLEXPRESS\\MSSQL\\DATA\\KSESSIONS_DEV_Log.ldf', SIZE = 10MB, MAXSIZE = 100MB, FILEGROWTH = 5MB ); -- Create integration development database CREATE DATABASE [KQUR_DEV] ON ( NAME = N'KQUR_DEV', FILENAME = N'C:\\Program Files\\Microsoft SQL Server\\MSSQL15.SQLEXPRESS\\MSSQL\\DATA\\KQUR_DEV.mdf', SIZE = 100MB, MAXSIZE = 1GB, FILEGROWTH = 10MB ) LOG ON ( NAME = N'KQUR_DEV_Log', FILENAME = N'C:\\Program Files\\Microsoft SQL Server\\MSSQL15.SQLEXPRESS\\MSSQL\\DATA\\KQUR_DEV_Log.ldf', SIZE = 10MB, MAXSIZE = 100MB, FILEGROWTH = 5MB ); 2. Enable sa Account (Development Only) -- Enable sa account for development USE [master] ALTER LOGIN [sa] ENABLE; ALTER LOGIN [sa] WITH PASSWORD = 'adf4961glo'; GO Production Database Setup 1. Create Production Databases -- Production database creation (execute on production server) CREATE DATABASE [KSESSIONS] ON ( NAME = N'KSESSIONS', FILENAME = N'E:\\Data\\KSESSIONS.mdf', SIZE = 500MB, MAXSIZE = 10GB, FILEGROWTH = 50MB ) LOG ON ( NAME = N'KSESSIONS_Log', FILENAME = N'F:\\Logs\\KSESSIONS_Log.ldf', SIZE = 50MB, MAXSIZE = 1GB, FILEGROWTH = 10MB ); CREATE DATABASE [KQUR] ON ( NAME = N'KQUR', FILENAME = N'E:\\Data\\KQUR.mdf', SIZE = 1GB, MAXSIZE = 20GB, FILEGROWTH = 100MB ) LOG ON ( NAME = N'KQUR_Log', FILENAME = N'F:\\Logs\\KQUR_Log.ldf', SIZE = 100MB, MAXSIZE = 2GB, FILEGROWTH = 20MB ); 2. Create Service Account (Production) -- Create dedicated service account for production USE [master] CREATE LOGIN [DOMAIN\\noor-canvas-svc] FROM WINDOWS; -- Grant database access USE [KSESSIONS] CREATE USER [DOMAIN\\noor-canvas-svc] FOR LOGIN [DOMAIN\\noor-canvas-svc]; ALTER ROLE [db_owner] ADD MEMBER [DOMAIN\\noor-canvas-svc]; USE [KQUR] CREATE USER [DOMAIN\\noor-canvas-svc] FOR LOGIN [DOMAIN\\noor-canvas-svc]; ALTER ROLE [db_datareader] ADD MEMBER [DOMAIN\\noor-canvas-svc]; Schema Creation Canvas Schema (NOOR Canvas Application Data) 1. Create Canvas Schema -- Execute on KSESSIONS_DEV (development) or KSESSIONS (production) USE [KSESSIONS_DEV]; -- Use [KSESSIONS] for production -- Create canvas schema CREATE SCHEMA [canvas]; GO 2. Create Canvas Tables -- Sessions table - Core session management CREATE TABLE [canvas].[Sessions] ( [Id] INT IDENTITY(1,1) NOT NULL PRIMARY KEY, [Guid] UNIQUEIDENTIFIER NOT NULL DEFAULT NEWID() UNIQUE, [AlbumId] INT NULL, -- Foreign key to KSESSIONS.dbo.Groups [CategoryId] INT NULL, -- Foreign key to KSESSIONS.dbo.Categories [SessionId] INT NULL, -- Foreign key to KSESSIONS.dbo.Sessions [HostToken] UNIQUEIDENTIFIER NOT NULL DEFAULT NEWID() UNIQUE, [Status] NVARCHAR(50) NOT NULL DEFAULT 'Pending', [Title] NVARCHAR(500) NULL, [Description] NVARCHAR(2000) NULL, [CreatedAt] DATETIME2 NOT NULL DEFAULT GETUTCDATE(), [ExpiresAt] DATETIME2 NOT NULL DEFAULT DATEADD(HOUR, 24, GETUTCDATE()), [CreatedBy] NVARCHAR(200) NULL, [MaxParticipants] INT NULL DEFAULT 100, [IsActive] BIT NOT NULL DEFAULT 1 ); -- Session Transcripts - HTML content storage CREATE TABLE [canvas].[SessionTranscripts] ( [Id] INT IDENTITY(1,1) NOT NULL PRIMARY KEY, [SessionId] INT NOT NULL, [HtmlContent] NVARCHAR(MAX) NULL, [CreatedAt] DATETIME2 NOT NULL DEFAULT GETUTCDATE(), [UpdatedAt] DATETIME2 NULL, [Version] INT NOT NULL DEFAULT 1, CONSTRAINT FK_SessionTranscripts_Sessions FOREIGN KEY ([SessionId]) REFERENCES [canvas].[Sessions]([Id]) ON DELETE CASCADE ); -- Registrations - Participant management CREATE TABLE [canvas].[Registrations] ( [Id] INT IDENTITY(1,1) NOT NULL PRIMARY KEY, [SessionId] INT NOT NULL, [Name] NVARCHAR(200) NOT NULL, [Country] NVARCHAR(100) NULL, [City] NVARCHAR(100) NULL, [FingerprintHash] NVARCHAR(64) NULL, -- SHA-256 hash for device identification [IpHash] NVARCHAR(64) NULL, -- SHA-256 hash of IP address [JoinTime] DATETIME2 NOT NULL DEFAULT GETUTCDATE(), [IsActive] BIT NOT NULL DEFAULT 1, [ConnectionId] NVARCHAR(200) NULL, -- SignalR connection tracking CONSTRAINT FK_Registrations_Sessions FOREIGN KEY ([SessionId]) REFERENCES [canvas].[Sessions]([Id]) ON DELETE CASCADE ); -- Questions - Q&A system CREATE TABLE [canvas].[Questions] ( [Id] INT IDENTITY(1,1) NOT NULL PRIMARY KEY, [SessionId] INT NOT NULL, [ParticipantId] INT NOT NULL, [QuestionText] NVARCHAR(2000) NOT NULL, [AnswerText] NVARCHAR(MAX) NULL, [Status] NVARCHAR(50) NOT NULL DEFAULT 'Pending', -- Pending, Answered, Dismissed [Priority] INT NOT NULL DEFAULT 0, -- 0=Normal, 1=High, 2=Urgent [CreatedAt] DATETIME2 NOT NULL DEFAULT GETUTCDATE(), [AnsweredAt] DATETIME2 NULL, [AnsweredBy] NVARCHAR(200) NULL, CONSTRAINT FK_Questions_Sessions FOREIGN KEY ([SessionId]) REFERENCES [canvas].[Sessions]([Id]) ON DELETE CASCADE, CONSTRAINT FK_Questions_Participants FOREIGN KEY ([ParticipantId]) REFERENCES [canvas].[Registrations]([Id]) ON DELETE CASCADE ); -- Annotations - Real-time annotation data CREATE TABLE [canvas].[Annotations] ( [Id] INT IDENTITY(1,1) NOT NULL PRIMARY KEY, [SessionId] INT NOT NULL, [ParticipantId] INT NULL, -- NULL for host annotations [AnnotationType] NVARCHAR(50) NOT NULL, -- 'drawing', 'text', 'highlight', 'pointer' [AnnotationData] NVARCHAR(MAX) NOT NULL, -- JSON data for annotation details [XPosition] DECIMAL(10,4) NULL, -- Relative X coordinate (0-1) [YPosition] DECIMAL(10,4) NULL, -- Relative Y coordinate (0-1) [CreatedAt] DATETIME2 NOT NULL DEFAULT GETUTCDATE(), [ExpiresAt] DATETIME2 NULL, -- For temporary annotations [IsVisible] BIT NOT NULL DEFAULT 1, CONSTRAINT FK_Annotations_Sessions FOREIGN KEY ([SessionId]) REFERENCES [canvas].[Sessions]([Id]) ON DELETE CASCADE, CONSTRAINT FK_Annotations_Participants FOREIGN KEY ([ParticipantId]) REFERENCES [canvas].[Registrations]([Id]) ON DELETE CASCADE ); 3. Create Canvas Indexes -- Performance indexes for canvas schema CREATE INDEX IX_Sessions_Guid ON [canvas].[Sessions]([Guid]); CREATE INDEX IX_Sessions_HostToken ON [canvas].[Sessions]([HostToken]); CREATE INDEX IX_Sessions_Status_CreatedAt ON [canvas].[Sessions]([Status], [CreatedAt]); CREATE INDEX IX_Sessions_ExpiresAt ON [canvas].[Sessions]([ExpiresAt]); CREATE INDEX IX_Registrations_SessionId ON [canvas].[Registrations]([SessionId]); CREATE INDEX IX_Registrations_FingerprintHash ON [canvas].[Registrations]([FingerprintHash]); CREATE INDEX IX_Questions_SessionId_Status ON [canvas].[Questions]([SessionId], [Status]); CREATE INDEX IX_Questions_CreatedAt ON [canvas].[Questions]([CreatedAt]); CREATE INDEX IX_Annotations_SessionId_CreatedAt ON [canvas].[Annotations]([SessionId], [CreatedAt]); CREATE INDEX IX_Annotations_ParticipantId ON [canvas].[Annotations]([ParticipantId]); Cross-Database Integration Schema 1. Beautiful Islam Integration (KSESSIONS Database) -- Verify existing Beautiful Islam tables (read-only access) USE [KSESSIONS_DEV]; -- Use [KSESSIONS] for production -- Groups table (Albums) - Contains Islamic content collections -- Table: dbo.Groups -- Key Columns: GroupID (int), GroupName (varchar), IsActive (bit) -- Categories table - Subdivisions within Groups -- Table: dbo.Categories -- Key Columns: CategoryID (int), CategoryName (varchar), GroupID (FK), IsActive (bit) -- Sessions table - Individual Islamic learning sessions -- Table: dbo.Sessions -- Key Columns: SessionID (int), GroupID (FK), CategoryID (FK), SessionName (varchar) -- Verify tables exist SELECT TABLE_NAME, TABLE_SCHEMA FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA = 'dbo' AND TABLE_NAME IN ('Groups', 'Categories', 'Sessions'); 2. Quranic Content Integration (KQUR Database) -- Verify Quranic content structure USE [KQUR_DEV]; -- Use [KQUR] for production -- Verify Users table exists SELECT TABLE_NAME, TABLE_SCHEMA FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA = 'dbo' AND TABLE_NAME = 'Users'; Connection String Configuration Development Connection Strings // appsettings.Development.json { \"ConnectionStrings\": { \"DefaultConnection\": \"Data Source=localhost\\\\SQLEXPRESS;Initial Catalog=KSESSIONS_DEV;User ID=sa;Password=adf4961glo;Connection Timeout=3600;TrustServerCertificate=True;Encrypt=False;\", \"KSessionsDb\": \"Data Source=localhost\\\\SQLEXPRESS;Initial Catalog=KSESSIONS_DEV;User ID=sa;Password=adf4961glo;Connection Timeout=3600;TrustServerCertificate=True;Encrypt=False;\" } } Production Connection Strings // appsettings.Production.json { \"ConnectionStrings\": { \"DefaultConnection\": \"Data Source=PROD-SQL-SERVER;Initial Catalog=KSESSIONS;Integrated Security=true;Connection Timeout=3600;TrustServerCertificate=True;Encrypt=True;\", \"KSessionsDb\": \"Data Source=PROD-SQL-SERVER;Initial Catalog=KSESSIONS;Integrated Security=true;Connection Timeout=3600;TrustServerCertificate=True;Encrypt=True;\" } } Entity Framework Configuration DbContext Setup // Configure Entity Framework contexts in Program.cs builder.Services.AddDbContext<CanvasDbContext>(options => options.UseSqlServer(builder.Configuration.GetConnectionString(\"DefaultConnection\"))); builder.Services.AddDbContext<KSessionsDbContext>(options => options.UseSqlServer( builder.Configuration.GetConnectionString(\"KSessionsDb\") ?? builder.Configuration.GetConnectionString(\"DefaultConnection\"))); Database Migration Commands # Development environment migrations cd \"D:\\PROJECTS\\NOOR CANVAS\\SPA\\NoorCanvas\" # Create initial migration for Canvas schema dotnet ef migrations add InitialCanvasSchema --context CanvasDbContext --output-dir Migrations/Canvas # Update development database dotnet ef database update --context CanvasDbContext # Verify migration status dotnet ef migrations list --context CanvasDbContext Data Validation and Testing Database Connectivity Test -- Test database connections and permissions USE [KSESSIONS_DEV]; -- Verify canvas schema access SELECT SCHEMA_NAME FROM INFORMATION_SCHEMA.SCHEMATA WHERE SCHEMA_NAME = 'canvas'; -- Test canvas tables SELECT COUNT(*) as SessionCount FROM [canvas].[Sessions]; SELECT COUNT(*) as TranscriptCount FROM [canvas].[SessionTranscripts]; SELECT COUNT(*) as RegistrationCount FROM [canvas].[Registrations]; SELECT COUNT(*) as QuestionCount FROM [canvas].[Questions]; SELECT COUNT(*) as AnnotationCount FROM [canvas].[Annotations]; -- Test cross-database integration SELECT COUNT(*) as GroupCount FROM [dbo].[Groups] WHERE IsActive = 1; SELECT COUNT(*) as CategoryCount FROM [dbo].[Categories] WHERE IsActive = 1; Application Health Check // Health check configuration for database connectivity builder.Services.AddHealthChecks() .AddDbContextCheck<CanvasDbContext>(\"canvas_database\") .AddDbContextCheck<KSessionsDbContext>(\"ksessions_database\") .AddSqlServer( connectionString: builder.Configuration.GetConnectionString(\"DefaultConnection\"), healthQuery: \"SELECT 1 FROM [canvas].[Sessions]\", name: \"canvas_schema_check\"); Backup and Recovery Development Backup Strategy -- Create development database backup BACKUP DATABASE [KSESSIONS_DEV] TO DISK = 'C:\\Backups\\KSESSIONS_DEV_Full.bak' WITH FORMAT, INIT, NAME = 'KSESSIONS_DEV Full Backup'; BACKUP DATABASE [KQUR_DEV] TO DISK = 'C:\\Backups\\KQUR_DEV_Full.bak' WITH FORMAT, INIT, NAME = 'KQUR_DEV Full Backup'; Production Backup Strategy -- Production backup with compression BACKUP DATABASE [KSESSIONS] TO DISK = 'E:\\Backups\\KSESSIONS_Full.bak' WITH FORMAT, INIT, COMPRESSION, NAME = 'KSESSIONS Production Full Backup'; -- Transaction log backup for point-in-time recovery BACKUP LOG [KSESSIONS] TO DISK = 'E:\\Backups\\KSESSIONS_Log.trn' WITH FORMAT, INIT; Security Configuration Database Security Best Practices -- Revoke unnecessary permissions from public role USE [KSESSIONS_DEV]; REVOKE ALL ON SCHEMA::canvas FROM public; -- Grant specific permissions to application users GRANT SELECT, INSERT, UPDATE, DELETE ON SCHEMA::canvas TO [DOMAIN\\noor-canvas-svc]; -- Audit login attempts SELECT login_time, login_name, client_interface_name, application_name FROM sys.dm_exec_sessions WHERE is_user_process = 1 ORDER BY login_time DESC; Connection Security Development: Use sa account only in development environment Production: Use dedicated service account with minimal privileges Encryption: Enable SSL/TLS for production connections Firewall: Restrict SQL Server port (1433) to application servers only Troubleshooting Common Issues Connection Issues -- Check SQL Server configuration SELECT name, value_in_use FROM sys.configurations WHERE name IN ('remote access', 'show advanced options'); -- Verify network protocols EXEC xp_readerrorlog 0, 1, N'Server is listening on'; Performance Issues -- Check database size and growth SELECT DB_NAME(database_id) AS DatabaseName, name AS LogicalName, size * 8/1024 AS SizeMB, growth AS GrowthSetting FROM sys.master_files WHERE DB_NAME(database_id) IN ('KSESSIONS_DEV', 'KQUR_DEV'); -- Monitor active connections SELECT DB_NAME(dbid) AS DatabaseName, COUNT(*) AS ConnectionCount FROM sys.sysprocesses WHERE dbid > 0 GROUP BY dbid, DB_NAME(dbid); Schema Issues -- Verify canvas schema objects SELECT TABLE_SCHEMA, TABLE_NAME, TABLE_TYPE FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA = 'canvas' ORDER BY TABLE_NAME; -- Check foreign key constraints SELECT fk.name AS ConstraintName, tp.name AS ParentTable, cp.name AS ParentColumn, tr.name AS ReferencedTable, cr.name AS ReferencedColumn FROM sys.foreign_keys fk INNER JOIN sys.tables tp ON fk.parent_object_id = tp.object_id INNER JOIN sys.tables tr ON fk.referenced_object_id = tr.object_id INNER JOIN sys.foreign_key_columns fkc ON fk.object_id = fkc.constraint_object_id INNER JOIN sys.columns cp ON fkc.parent_column_id = cp.column_id AND fkc.parent_object_id = cp.object_id INNER JOIN sys.columns cr ON fkc.referenced_column_id = cr.column_id AND fkc.referenced_object_id = cr.object_id WHERE tp.schema_id = SCHEMA_ID('canvas'); For IIS database connection configuration, see the IIS Configuration Guide. For complete production deployment procedures, see the Production Deployment Guide."
  },
  "articles/deployment/iis-configuration.html": {
    "href": "articles/deployment/iis-configuration.html",
    "title": "IIS Configuration | NOOR CANVAS Documentation",
    "summary": "IIS Configuration Overview NOOR Canvas is designed for deployment on Internet Information Services (IIS) with ASP.NET Core hosting. This document covers the complete IIS configuration process for both development and production environments. Prerequisites Required Components IIS 10.0 or later (Windows Server 2016/Windows 10 or newer) ASP.NET Core Runtime 8.0 or later ASP.NET Core Hosting Bundle for IIS integration SQL Server (or SQL Server Express) for database connectivity IIS Features Required Enable these Windows Features: Internet Information Services World Wide Web Services Application Development Features .NET Extensibility 4.8 ASP.NET 4.8 ISAPI Extensions ISAPI Filters Common HTTP Features (all) HTTP Errors HTTP Logging HTTP Redirection Request Filtering Static Content # Enable required Windows features via PowerShell Enable-WindowsOptionalFeature -Online -FeatureName IIS-WebServerRole, IIS-WebServer, IIS-CommonHttpFeatures, IIS-HttpErrors, IIS-HttpLogging, IIS-RequestFiltering, IIS-StaticContent, IIS-DefaultDocument, IIS-DirectoryBrowsing, IIS-ApplicationDevelopment, IIS-NetFx45, IIS-NetFxExtensibility45, IIS-ISAPIExtensions, IIS-ISAPIFilter, IIS-ASPNET45 Application Pool Configuration Create Dedicated Application Pool # Create new application pool for NOOR Canvas New-WebAppPool -Name \"NoorCanvasPool\" # Configure application pool settings Set-ItemProperty -Path \"IIS:\\AppPools\\NoorCanvasPool\" -Name processModel.identityType -Value ApplicationPoolIdentity Set-ItemProperty -Path \"IIS:\\AppPools\\NoorCanvasPool\" -Name managedRuntimeVersion -Value \"\" # No Managed Code for .NET Core Set-ItemProperty -Path \"IIS:\\AppPools\\NoorCanvasPool\" -Name enable32BitAppOnWin64 -Value $false Set-ItemProperty -Path \"IIS:\\AppPools\\NoorCanvasPool\" -Name processModel.idleTimeout -Value \"00:00:00\" # Never idle Set-ItemProperty -Path \"IIS:\\AppPools\\NoorCanvasPool\" -Name recycling.periodicRestart.time -Value \"00:00:00\" # Never recycle Application Pool Identity Configuration # Grant file system permissions to application pool identity $appPoolIdentity = \"IIS AppPool\\NoorCanvasPool\" $sitePath = \"C:\\inetpub\\wwwroot\\NoorCanvas\" # Grant full control to application files icacls $sitePath /grant \"${appPoolIdentity}:(OI)(CI)F\" /T Web Site Configuration Create IIS Website # Remove default website if exists Remove-Website -Name \"Default Web Site\" -ErrorAction SilentlyContinue # Create NOOR Canvas website New-Website -Name \"NoorCanvas\" -Port 80 -PhysicalPath \"C:\\inetpub\\wwwroot\\NoorCanvas\" -ApplicationPool \"NoorCanvasPool\" # Add HTTPS binding New-WebBinding -Name \"NoorCanvas\" -Protocol https -Port 443 -SslFlags 1 Directory Structure Setup # Create application directory structure $appRoot = \"C:\\inetpub\\wwwroot\\NoorCanvas\" New-Item -ItemType Directory -Path $appRoot -Force New-Item -ItemType Directory -Path \"$appRoot\\logs\" -Force New-Item -ItemType Directory -Path \"$appRoot\\temp\" -Force # Set permissions icacls \"$appRoot\\logs\" /grant \"${appPoolIdentity}:(OI)(CI)F\" /T icacls \"$appRoot\\temp\" /grant \"${appPoolIdentity}:(OI)(CI)F\" /T SSL Certificate Configuration Development Environment (Self-Signed) # Create self-signed certificate for development $cert = New-SelfSignedCertificate -DnsName \"localhost\", \"noorcanvas.local\" -CertStoreLocation \"cert:\\LocalMachine\\My\" # Bind certificate to IIS site New-WebBinding -Name \"NoorCanvas\" -Protocol https -Port 443 $binding = Get-WebBinding -Name \"NoorCanvas\" -Protocol https $binding.AddSslCertificate($cert.GetCertHashString(), \"my\") Production Environment (CA Certificate) # Import purchased SSL certificate $certPath = \"C:\\certificates\\noorcanvas.pfx\" $certPassword = ConvertTo-SecureString \"your-certificate-password\" -AsPlainText -Force Import-PfxCertificate -FilePath $certPath -CertStoreLocation \"cert:\\LocalMachine\\My\" -Password $certPassword # Bind certificate (use actual thumbprint) $certThumbprint = \"YOUR-CERTIFICATE-THUMBPRINT\" New-WebBinding -Name \"NoorCanvas\" -Protocol https -Port 443 -SslFlags 1 netsh http add sslcert ipport=0.0.0.0:443 certhash=$certThumbprint appid=\"{YOUR-APP-GUID}\" URL Rewrite Configuration HTTP to HTTPS Redirection <!-- Add to web.config --> <configuration> <system.webServer> <rewrite> <rules> <rule name=\"Redirect HTTP to HTTPS\" stopProcessing=\"true\"> <match url=\"(.*)\" /> <conditions> <add input=\"{HTTPS}\" pattern=\"off\" ignoreCase=\"true\" /> <add input=\"{HTTP_HOST}\" pattern=\"localhost\" negate=\"true\" /> </conditions> <action type=\"Redirect\" url=\"https://{HTTP_HOST}/{R:1}\" redirectType=\"Permanent\" /> </rule> </rules> </rewrite> </system.webServer> </configuration> SignalR WebSocket Configuration <!-- Enable WebSocket support in web.config --> <configuration> <system.webServer> <webSocket enabled=\"true\" /> <handlers> <add name=\"aspNetCore\" path=\"*\" verb=\"*\" modules=\"AspNetCoreModuleV2\" resourceType=\"Unspecified\" /> </handlers> <aspNetCore processPath=\"dotnet\" arguments=\".\\NoorCanvas.dll\" stdoutLogEnabled=\"false\" stdoutLogFile=\".\\logs\\stdout\" hostingModel=\"inprocess\"> <environmentVariables> <environmentVariable name=\"ASPNETCORE_ENVIRONMENT\" value=\"Production\" /> </environmentVariables> </aspNetCore> </system.webServer> </configuration> Performance Configuration Compression Settings <!-- Enable response compression --> <configuration> <system.webServer> <urlCompression doStaticCompression=\"true\" doDynamicCompression=\"true\" /> <httpCompression> <scheme name=\"gzip\" dll=\"%Windir%\\system32\\inetsrv\\gzip.dll\" /> <dynamicTypes> <add mimeType=\"application/json\" enabled=\"true\" /> <add mimeType=\"application/javascript\" enabled=\"true\" /> </dynamicTypes> <staticTypes> <add mimeType=\"text/css\" enabled=\"true\" /> <add mimeType=\"application/javascript\" enabled=\"true\" /> </staticTypes> </httpCompression> </system.webServer> </configuration> Caching Configuration <!-- Static content caching --> <configuration> <system.webServer> <staticContent> <clientCache cacheControlMode=\"UseMaxAge\" cacheControlMaxAge=\"30.00:00:00\" /> </staticContent> </system.webServer> </configuration> Security Configuration Request Filtering <!-- Security settings in web.config --> <configuration> <system.webServer> <security> <requestFiltering> <requestLimits maxAllowedContentLength=\"52428800\" /> <!-- 50MB max request --> <fileExtensions> <remove fileExtension=\".config\" /> <add fileExtension=\".config\" allowed=\"false\" /> </fileExtensions> </requestFiltering> </security> </system.webServer> </configuration> Custom Headers <!-- Security headers --> <configuration> <system.webServer> <httpProtocol> <customHeaders> <add name=\"X-Content-Type-Options\" value=\"nosniff\" /> <add name=\"X-Frame-Options\" value=\"DENY\" /> <add name=\"X-XSS-Protection\" value=\"1; mode=block\" /> <add name=\"Strict-Transport-Security\" value=\"max-age=31536000; includeSubDomains\" /> <remove name=\"Server\" /> </customHeaders> </httpProtocol> </system.webServer> </configuration> Database Connection Configuration Connection String Security <!-- Secure connection strings in web.config --> <configuration> <connectionStrings> <add name=\"DefaultConnection\" connectionString=\"Data Source=YOUR-SQL-SERVER;Initial Catalog=KSESSIONS;Integrated Security=true;Connection Timeout=3600;TrustServerCertificate=True;Encrypt=False;\" providerName=\"System.Data.SqlClient\" /> <add name=\"KSessionsDb\" connectionString=\"Data Source=YOUR-SQL-SERVER;Initial Catalog=KSESSIONS;Integrated Security=true;Connection Timeout=3600;TrustServerCertificate=True;Encrypt=False;\" providerName=\"System.Data.SqlClient\" /> </connectionStrings> </configuration> SQL Server Permissions -- Create dedicated IIS application pool login USE [master] CREATE LOGIN [IIS AppPool\\NoorCanvasPool] FROM WINDOWS GO -- Grant database access USE [KSESSIONS] CREATE USER [IIS AppPool\\NoorCanvasPool] FOR LOGIN [IIS AppPool\\NoorCanvasPool] ALTER ROLE [db_datareader] ADD MEMBER [IIS AppPool\\NoorCanvasPool] ALTER ROLE [db_datawriter] ADD MEMBER [IIS AppPool\\NoorCanvasPool] GO -- Grant canvas schema permissions GRANT SELECT, INSERT, UPDATE, DELETE ON SCHEMA::canvas TO [IIS AppPool\\NoorCanvasPool] GO Monitoring and Logging IIS Logging Configuration # Enable detailed IIS logging Set-WebConfigurationProperty -Filter \"system.webServer/httpLogging\" -Name enabled -Value $true Set-WebConfigurationProperty -Filter \"system.webServer/httpLogging\" -Name logExtFileFlags -Value \"Date,Time,ClientIP,UserName,SiteName,ComputerName,ServerIP,Method,UriStem,UriQuery,HttpStatus,Win32Status,BytesSent,BytesRecv,TimeTaken,ServerPort,UserAgent,Cookie,Referer,ProtocolVersion,Host,HttpSubStatus\" Application Logging // Configure structured logging in appsettings.Production.json { \"Serilog\": { \"Using\": [\"Serilog.Sinks.File\", \"Serilog.Sinks.EventLog\"], \"MinimumLevel\": \"Information\", \"WriteTo\": [ { \"Name\": \"File\", \"Args\": { \"path\": \"C:\\\\inetpub\\\\wwwroot\\\\NoorCanvas\\\\logs\\\\noor-canvas-.txt\", \"rollingInterval\": \"Day\", \"retainedFileCountLimit\": 30 } }, { \"Name\": \"EventLog\", \"Args\": { \"source\": \"NOOR Canvas\", \"logName\": \"Application\" } } ] } } Health Monitoring Application Health Checks // Configure health checks in Program.cs builder.Services.AddHealthChecks() .AddDbContextCheck<CanvasDbContext>() .AddDbContextCheck<KSessionsDbContext>() .AddSignalRHub<SessionHub>(); // Map health check endpoint app.MapHealthChecks(\"/health\", new HealthCheckOptions { ResponseWriter = UIResponseWriter.WriteHealthCheckUIResponse }); IIS Application Initialization <!-- Warm up application on startup --> <configuration> <system.webServer> <applicationInitialization doAppInitAfterRestart=\"true\"> <add initializationPage=\"/health\" /> </applicationInitialization> </system.webServer> </configuration> Troubleshooting Common Issues Application Pool Crashes # Check Windows Event Log Get-WinEvent -LogName System | Where-Object {$_.LevelDisplayName -eq \"Error\" -and $_.TimeCreated -gt (Get-Date).AddHours(-1)} # Check IIS logs Get-Content \"C:\\inetpub\\logs\\LogFiles\\W3SVC1\\*.log\" | Select-String \"500\" Performance Issues # Monitor application pool performance Get-Counter \"\\Process(w3wp*)\\% Processor Time\" Get-Counter \"\\Process(w3wp*)\\Working Set\" Get-Counter \"\\Process(w3wp*)\\Handle Count\" Database Connection Issues // Test database connectivity using var connection = new SqlConnection(connectionString); try { await connection.OpenAsync(); Console.WriteLine(\"Database connection successful\"); } catch (Exception ex) { Console.WriteLine($\"Database connection failed: {ex.Message}\"); } Maintenance Procedures Regular Maintenance Tasks Log Rotation: Archive and clean old log files Certificate Renewal: Update SSL certificates before expiration Security Updates: Apply Windows and IIS updates Performance Monitoring: Review performance metrics regularly Backup and Recovery # Backup IIS configuration Backup-WebConfiguration -Name \"NoorCanvas-$(Get-Date -Format 'yyyyMMdd')\" # Backup application files Copy-Item \"C:\\inetpub\\wwwroot\\NoorCanvas\" \"C:\\Backups\\NoorCanvas-$(Get-Date -Format 'yyyyMMdd')\" -Recurse For database-specific deployment procedures, see the Database Setup Guide. For complete production deployment procedures, see the Production Deployment Guide."
  },
  "articles/deployment/production-deployment.html": {
    "href": "articles/deployment/production-deployment.html",
    "title": "Production Deployment | NOOR CANVAS Documentation",
    "summary": "Production Deployment Overview This guide covers the complete production deployment process for NOOR Canvas, including server preparation, application deployment, database migration, and post-deployment verification. The deployment follows a staged approach to minimize downtime and ensure system reliability. Deployment Architecture Production Environment Requirements Web Server: Windows Server 2019/2022 with IIS 10.0+ Application Framework: ASP.NET Core 8.0 Runtime + Hosting Bundle Database Server: SQL Server 2019+ (Standard or Enterprise Edition) Load Balancer: Optional (for high availability scenarios) SSL Certificate: Valid CA-issued certificate for HTTPS Network Architecture Internet → Load Balancer (Optional) → IIS Web Server → SQL Server Database ↓ Application Files + Logs Server Specifications Minimum Requirements (Small Scale: <100 concurrent users) CPU: 4 cores @ 2.4 GHz RAM: 8 GB Storage: 100 GB SSD (OS + Application + Logs) Network: 100 Mbps Recommended Requirements (Medium Scale: 100-500 concurrent users) CPU: 8 cores @ 3.0 GHz RAM: 16 GB Storage: 500 GB SSD (OS + Application + Logs) Network: 1 Gbps High Availability Requirements (Large Scale: 500+ concurrent users) CPU: 16+ cores @ 3.2 GHz RAM: 32+ GB Storage: 1 TB SSD (OS), 500 GB SSD (Application), 1 TB SSD (Logs) Network: 10 Gbps Redundancy: Multiple web servers behind load balancer Pre-Deployment Checklist Infrastructure Preparation [ ] Windows Server 2019/2022 installed and updated [ ] IIS role installed with required features [ ] .NET 8.0 Runtime and ASP.NET Core Hosting Bundle installed [ ] SQL Server 2019+ installed and configured [ ] SSL certificate obtained and verified [ ] Firewall rules configured (ports 80, 443, 1433) [ ] DNS records configured [ ] Backup strategy implemented Application Preparation [ ] Code repository tagged with release version [ ] Build artifacts generated and tested [ ] Database scripts validated [ ] Configuration files prepared for production [ ] Deployment scripts tested in staging environment [ ] Performance baseline established [ ] Security scan completed [ ] Documentation updated Deployment Process Phase 1: Database Deployment 1. Create Production Databases # Connect to production SQL Server as sysadmin # Execute database creation scripts Invoke-Sqlcmd -ServerInstance \"PROD-SQL-01\" -Query @\" CREATE DATABASE [KSESSIONS] ON ( NAME = N'KSESSIONS', FILENAME = N'E:\\Data\\KSESSIONS.mdf', SIZE = 500MB, MAXSIZE = 10GB, FILEGROWTH = 50MB ) LOG ON ( NAME = N'KSESSIONS_Log', FILENAME = N'F:\\Logs\\KSESSIONS_Log.ldf', SIZE = 50MB, MAXSIZE = 1GB, FILEGROWTH = 10MB ); CREATE DATABASE [KQUR] ON ( NAME = N'KQUR', FILENAME = N'E:\\Data\\KQUR.mdf', SIZE = 1GB, MAXSIZE = 20GB, FILEGROWTH = 100MB ) LOG ON ( NAME = N'KQUR_Log', FILENAME = N'F:\\Logs\\KQUR_Log.ldf', SIZE = 100MB, MAXSIZE = 2GB, FILEGROWTH = 20MB ); \"@ 2. Create Service Accounts # Create dedicated Windows service account New-LocalUser -Name \"noor-canvas-svc\" -Description \"NOOR Canvas Application Service Account\" -NoPassword Add-LocalGroupMember -Group \"IIS_IUSRS\" -Member \"noor-canvas-svc\" # Create SQL Server login and permissions Invoke-Sqlcmd -ServerInstance \"PROD-SQL-01\" -Query @\" CREATE LOGIN [SERVER\\noor-canvas-svc] FROM WINDOWS; USE [KSESSIONS]; CREATE USER [SERVER\\noor-canvas-svc] FOR LOGIN [SERVER\\noor-canvas-svc]; ALTER ROLE [db_owner] ADD MEMBER [SERVER\\noor-canvas-svc]; USE [KQUR]; CREATE USER [SERVER\\noor-canvas-svc] FOR LOGIN [SERVER\\noor-canvas-svc]; ALTER ROLE [db_datareader] ADD MEMBER [SERVER\\noor-canvas-svc]; \"@ 3. Deploy Database Schema # Deploy Entity Framework migrations to production cd \"C:\\Deployment\\NoorCanvas\" dotnet ef database update --context CanvasDbContext --connection \"Data Source=PROD-SQL-01;Initial Catalog=KSESSIONS;Integrated Security=true;Connection Timeout=3600;TrustServerCertificate=True;\" Phase 2: Application Server Preparation 1. Configure IIS Application Pool # Import IIS module Import-Module WebAdministration # Create dedicated application pool New-WebAppPool -Name \"NoorCanvasPool\" Set-ItemProperty -Path \"IIS:\\AppPools\\NoorCanvasPool\" -Name processModel.identityType -Value SpecificUser Set-ItemProperty -Path \"IIS:\\AppPools\\NoorCanvasPool\" -Name processModel.userName -Value \"SERVER\\noor-canvas-svc\" Set-ItemProperty -Path \"IIS:\\AppPools\\NoorCanvasPool\" -Name processModel.password -Value \"SERVICE-ACCOUNT-PASSWORD\" Set-ItemProperty -Path \"IIS:\\AppPools\\NoorCanvasPool\" -Name managedRuntimeVersion -Value \"\" Set-ItemProperty -Path \"IIS:\\AppPools\\NoorCanvasPool\" -Name enable32BitAppOnWin64 -Value $false Set-ItemProperty -Path \"IIS:\\AppPools\\NoorCanvasPool\" -Name processModel.idleTimeout -Value \"00:00:00\" Set-ItemProperty -Path \"IIS:\\AppPools\\NoorCanvasPool\" -Name recycling.periodicRestart.time -Value \"00:00:00\" 2. Create IIS Website # Remove default website if exists Remove-Website -Name \"Default Web Site\" -ErrorAction SilentlyContinue # Create application directory $appPath = \"C:\\inetpub\\wwwroot\\NoorCanvas\" New-Item -ItemType Directory -Path $appPath -Force New-Item -ItemType Directory -Path \"$appPath\\logs\" -Force # Set permissions $acl = Get-Acl $appPath $accessRule = New-Object System.Security.AccessControl.FileSystemAccessRule(\"SERVER\\noor-canvas-svc\", \"FullControl\", \"ContainerInherit,ObjectInherit\", \"None\", \"Allow\") $acl.SetAccessRule($accessRule) Set-Acl -Path $appPath -AclObject $acl # Create website New-Website -Name \"NoorCanvas\" -Port 80 -PhysicalPath $appPath -ApplicationPool \"NoorCanvasPool\" 3. Configure SSL Certificate # Import production SSL certificate $certPath = \"C:\\Certificates\\noorcanvas-prod.pfx\" $certPassword = ConvertTo-SecureString \"CERTIFICATE-PASSWORD\" -AsPlainText -Force $cert = Import-PfxCertificate -FilePath $certPath -CertStoreLocation \"cert:\\LocalMachine\\My\" -Password $certPassword # Create HTTPS binding New-WebBinding -Name \"NoorCanvas\" -Protocol https -Port 443 -SslFlags 1 $binding = Get-WebBinding -Name \"NoorCanvas\" -Protocol https $binding.AddSslCertificate($cert.Thumbprint, \"my\") # Configure HTTP to HTTPS redirection # (This will be handled by web.config in the application) Phase 3: Application Deployment 1. Stop Application Pool # Gracefully stop application pool Stop-WebAppPool -Name \"NoorCanvasPool\" Start-Sleep -Seconds 30 # Allow existing connections to complete 2. Deploy Application Files # Backup existing application (if updating) $backupPath = \"C:\\Backups\\NoorCanvas-$(Get-Date -Format 'yyyyMMdd-HHmm')\" if (Test-Path \"C:\\inetpub\\wwwroot\\NoorCanvas\") { Copy-Item \"C:\\inetpub\\wwwroot\\NoorCanvas\" $backupPath -Recurse } # Deploy new application files $sourcePath = \"C:\\Deployment\\NoorCanvas\\publish\" $targetPath = \"C:\\inetpub\\wwwroot\\NoorCanvas\" # Clear existing files (preserve logs directory) Get-ChildItem $targetPath -Exclude \"logs\" | Remove-Item -Recurse -Force # Copy new files Copy-Item \"$sourcePath\\*\" $targetPath -Recurse -Force 3. Configure Production Settings # Create production configuration $prodConfig = @{ \"ConnectionStrings\" = @{ \"DefaultConnection\" = \"Data Source=PROD-SQL-01;Initial Catalog=KSESSIONS;Integrated Security=true;Connection Timeout=3600;TrustServerCertificate=True;Encrypt=True;\" \"KSessionsDb\" = \"Data Source=PROD-SQL-01;Initial Catalog=KSESSIONS;Integrated Security=true;Connection Timeout=3600;TrustServerCertificate=True;Encrypt=True;\" } \"Serilog\" = @{ \"MinimumLevel\" = \"Information\" \"WriteTo\" = @( @{ \"Name\" = \"File\" \"Args\" = @{ \"path\" = \"C:\\inetpub\\wwwroot\\NoorCanvas\\logs\\noor-canvas-.txt\" \"rollingInterval\" = \"Day\" \"retainedFileCountLimit\" = 30 } } @{ \"Name\" = \"EventLog\" \"Args\" = @{ \"source\" = \"NOOR Canvas\" \"logName\" = \"Application\" } } ) } \"AllowedHosts\" = \"noorcanvas.yourdomain.com\" } $prodConfigJson = $prodConfig | ConvertTo-Json -Depth 10 Set-Content -Path \"C:\\inetpub\\wwwroot\\NoorCanvas\\appsettings.Production.json\" -Value $prodConfigJson 4. Configure Web.config <!-- Create optimized web.config for production --> <?xml version=\"1.0\" encoding=\"utf-8\"?> <configuration> <location path=\".\" inheritInChildApplications=\"false\"> <system.webServer> <handlers> <add name=\"aspNetCore\" path=\"*\" verb=\"*\" modules=\"AspNetCoreModuleV2\" resourceType=\"Unspecified\" /> </handlers> <aspNetCore processPath=\"dotnet\" arguments=\".\\NoorCanvas.dll\" stdoutLogEnabled=\"false\" stdoutLogFile=\".\\logs\\stdout\" hostingModel=\"inprocess\"> <environmentVariables> <environmentVariable name=\"ASPNETCORE_ENVIRONMENT\" value=\"Production\" /> </environmentVariables> </aspNetCore> <!-- Security Headers --> <httpProtocol> <customHeaders> <add name=\"X-Content-Type-Options\" value=\"nosniff\" /> <add name=\"X-Frame-Options\" value=\"DENY\" /> <add name=\"X-XSS-Protection\" value=\"1; mode=block\" /> <add name=\"Strict-Transport-Security\" value=\"max-age=31536000; includeSubDomains\" /> <remove name=\"Server\" /> </customHeaders> </httpProtocol> <!-- HTTP to HTTPS Redirection --> <rewrite> <rules> <rule name=\"Redirect HTTP to HTTPS\" stopProcessing=\"true\"> <match url=\"(.*)\" /> <conditions> <add input=\"{HTTPS}\" pattern=\"off\" ignoreCase=\"true\" /> </conditions> <action type=\"Redirect\" url=\"https://{HTTP_HOST}/{R:1}\" redirectType=\"Permanent\" /> </rule> </rules> </rewrite> <!-- Response Compression --> <urlCompression doStaticCompression=\"true\" doDynamicCompression=\"true\" /> <httpCompression> <scheme name=\"gzip\" dll=\"%Windir%\\system32\\inetsrv\\gzip.dll\" /> <dynamicTypes> <add mimeType=\"application/json\" enabled=\"true\" /> <add mimeType=\"application/javascript\" enabled=\"true\" /> </dynamicTypes> </httpCompression> <!-- Static Content Caching --> <staticContent> <clientCache cacheControlMode=\"UseMaxAge\" cacheControlMaxAge=\"30.00:00:00\" /> </staticContent> <!-- WebSocket Support for SignalR --> <webSocket enabled=\"true\" /> <!-- Application Initialization --> <applicationInitialization doAppInitAfterRestart=\"true\"> <add initializationPage=\"/health\" /> </applicationInitialization> </system.webServer> </location> </configuration> Phase 4: Service Startup and Validation 1. Start Application Pool # Start application pool Start-WebAppPool -Name \"NoorCanvasPool\" # Wait for startup Start-Sleep -Seconds 60 # Verify application pool status $poolStatus = Get-WebAppPoolState -Name \"NoorCanvasPool\" Write-Host \"Application Pool Status: $($poolStatus.Value)\" 2. Health Check Validation # Test HTTP health endpoint (should redirect to HTTPS) try { $httpResponse = Invoke-WebRequest -Uri \"http://noorcanvas.yourdomain.com/health\" -MaximumRedirection 0 -ErrorAction SilentlyContinue Write-Host \"HTTP Redirect Status: $($httpResponse.StatusCode)\" # Should be 301/302 } catch { Write-Host \"HTTP redirect working (expected redirect error)\" } # Test HTTPS health endpoint $httpsResponse = Invoke-WebRequest -Uri \"https://noorcanvas.yourdomain.com/health\" Write-Host \"HTTPS Health Check Status: $($httpsResponse.StatusCode)\" # Should be 200 Write-Host \"Health Check Response: $($httpsResponse.Content)\" 3. Database Connectivity Test # Test database connections using application context $testScript = @\" using System; using System.Data.SqlClient; string connectionString = \"Data Source=PROD-SQL-01;Initial Catalog=KSESSIONS;Integrated Security=true;Connection Timeout=3600;TrustServerCertificate=True;\"; try { using (var connection = new SqlConnection(connectionString)) { connection.Open(); using (var command = new SqlCommand(\"SELECT COUNT(*) FROM canvas.Sessions\", connection)) { var result = command.ExecuteScalar(); Console.WriteLine($\"Database connectivity successful. Sessions count: {result}\"); } } } catch (Exception ex) { Console.WriteLine($\"Database connectivity failed: {ex.Message}\"); Environment.Exit(1); } \"@ # Execute database test dotnet-script eval \"$testScript\" Phase 5: Performance and Load Testing 1. Performance Baseline # Use Apache Bench for initial load testing # Install: choco install apache-httpd (if not available, use alternatives) # Test static content performance ab -n 1000 -c 10 https://noorcanvas.yourdomain.com/ # Test health endpoint performance ab -n 1000 -c 10 https://noorcanvas.yourdomain.com/health # Test SignalR connection establishment (requires custom script) 2. SignalR Load Testing // Create SignalR load test script (simplified example) using Microsoft.AspNetCore.SignalR.Client; var connection = new HubConnectionBuilder() .WithUrl(\"https://noorcanvas.yourdomain.com/hub/session\") .Build(); await connection.StartAsync(); Console.WriteLine(\"SignalR connection established successfully\"); // Test basic hub connectivity await connection.InvokeAsync(\"JoinSession\", \"test-session-guid\"); Console.WriteLine(\"SignalR method invocation successful\"); await connection.DisposeAsync(); Post-Deployment Configuration Monitoring Setup 1. Windows Event Log Configuration # Create custom event log source for NOOR Canvas New-EventLog -LogName Application -Source \"NOOR Canvas\" 2. Performance Counter Monitoring # Monitor key performance counters $counters = @( \"\\Processor(_Total)\\% Processor Time\", \"\\Memory\\Available MBytes\", \"\\Web Service(NoorCanvas)\\Current Connections\", \"\\ASP.NET Apps v4.0.30319(_LM_W3SVC_1_ROOT)\\Requests/Sec\" ) # Create baseline performance report Get-Counter -Counter $counters -SampleInterval 5 -MaxSamples 12 | Export-Counter -Path \"C:\\Monitoring\\baseline-performance.csv\" 3. Log Rotation Configuration # Schedule log cleanup task $action = New-ScheduledTaskAction -Execute \"PowerShell.exe\" -Argument \"-Command \"\"Get-ChildItem 'C:\\inetpub\\wwwroot\\NoorCanvas\\logs\\*.txt' | Where-Object {$_.LastWriteTime -lt (Get-Date).AddDays(-30)} | Remove-Item -Force\"\"\" $trigger = New-ScheduledTaskTrigger -Daily -At 2:00AM $principal = New-ScheduledTaskPrincipal -UserId \"SYSTEM\" -LogonType ServiceAccount -RunLevel Highest Register-ScheduledTask -TaskName \"NoorCanvas-LogCleanup\" -Action $action -Trigger $trigger -Principal $principal Security Hardening 1. Firewall Configuration # Configure Windows Firewall rules New-NetFirewallRule -DisplayName \"NoorCanvas HTTP\" -Direction Inbound -Protocol TCP -LocalPort 80 -Action Allow New-NetFirewallRule -DisplayName \"NoorCanvas HTTPS\" -Direction Inbound -Protocol TCP -LocalPort 443 -Action Allow # Restrict SQL Server access to application server only New-NetFirewallRule -DisplayName \"SQL Server\" -Direction Inbound -Protocol TCP -LocalPort 1433 -RemoteAddress \"APP-SERVER-IP\" -Action Allow 2. SQL Server Security -- Disable unnecessary SQL Server features EXEC sp_configure 'show advanced options', 1; RECONFIGURE; EXEC sp_configure 'xp_cmdshell', 0; EXEC sp_configure 'Ole Automation Procedures', 0; RECONFIGURE; -- Enable SQL Server Audit (if required) CREATE SERVER AUDIT NoorCanvas_Audit TO FILE (FILEPATH = 'F:\\Audit\\', MAXSIZE = 100MB, MAX_FILES = 10); ALTER SERVER AUDIT NoorCanvas_Audit WITH (STATE = ON); Backup and Disaster Recovery Automated Backup Strategy # Database backup script $backupScript = @\" BACKUP DATABASE [KSESSIONS] TO DISK = 'F:\\Backups\\KSESSIONS_Full.bak' WITH FORMAT, INIT, COMPRESSION, NAME = 'KSESSIONS Production Full Backup - $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss')'; BACKUP LOG [KSESSIONS] TO DISK = 'F:\\Backups\\KSESSIONS_Log.trn' WITH FORMAT, INIT, NAME = 'KSESSIONS Transaction Log Backup - $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss')'; \"@ # Schedule daily full backup $action = New-ScheduledTaskAction -Execute \"sqlcmd.exe\" -Argument \"-S PROD-SQL-01 -Q \"\"$backupScript\"\"\" $trigger = New-ScheduledTaskTrigger -Daily -At 2:00AM Register-ScheduledTask -TaskName \"NoorCanvas-DatabaseBackup\" -Action $action -Trigger $trigger Application File Backup # Application files backup script $appBackupScript = { $backupPath = \"D:\\Backups\\NoorCanvas-$(Get-Date -Format 'yyyyMMdd')\" Copy-Item \"C:\\inetpub\\wwwroot\\NoorCanvas\" $backupPath -Recurse -Exclude \"logs\" # Compress backup Compress-Archive -Path $backupPath -DestinationPath \"$backupPath.zip\" Remove-Item $backupPath -Recurse -Force # Clean old backups (keep 7 days) Get-ChildItem \"D:\\Backups\\NoorCanvas-*.zip\" | Where-Object {$_.LastWriteTime -lt (Get-Date).AddDays(-7)} | Remove-Item } # Schedule weekly application backup $action = New-ScheduledTaskAction -Execute \"PowerShell.exe\" -Argument \"-Command \"\"& {$($appBackupScript.ToString())}\"\"\" $trigger = New-ScheduledTaskTrigger -Weekly -DaysOfWeek Sunday -At 3:00AM Register-ScheduledTask -TaskName \"NoorCanvas-AppBackup\" -Action $action -Trigger $trigger Rollback Procedures Emergency Rollback Plan # Stop application Stop-WebAppPool -Name \"NoorCanvasPool\" # Restore previous version from backup $rollbackSource = \"C:\\Backups\\NoorCanvas-YYYYMMDD-HHMM\" # Replace with actual backup $targetPath = \"C:\\inetpub\\wwwroot\\NoorCanvas\" # Clear current version (preserve logs) Get-ChildItem $targetPath -Exclude \"logs\" | Remove-Item -Recurse -Force # Restore backup Copy-Item \"$rollbackSource\\*\" $targetPath -Recurse -Force # Rollback database if needed (point-in-time recovery) # NOTE: This requires careful consideration and should be tested in staging # Start application Start-WebAppPool -Name \"NoorCanvasPool\" # Verify rollback Start-Sleep -Seconds 60 Invoke-WebRequest -Uri \"https://noorcanvas.yourdomain.com/health\" Production Maintenance Regular Maintenance Tasks Daily: Review application logs for errors Weekly: Check performance counters and resource utilization Monthly: Update SSL certificates if needed, review security logs Quarterly: Update .NET runtime and security patches Annually: Review and update disaster recovery procedures Health Monitoring Dashboard # Create monitoring script for operational dashboard $monitoringScript = { $report = @{ Timestamp = Get-Date AppPoolStatus = (Get-WebAppPoolState -Name \"NoorCanvasPool\").Value WebsiteStatus = (Get-Website -Name \"NoorCanvas\").State DatabaseConnectivity = \"Unknown\" CertificateExpiry = \"Unknown\" } # Test database connectivity try { $connection = New-Object System.Data.SqlClient.SqlConnection(\"Data Source=PROD-SQL-01;Initial Catalog=KSESSIONS;Integrated Security=true;Connection Timeout=10;\") $connection.Open() $connection.Close() $report.DatabaseConnectivity = \"Success\" } catch { $report.DatabaseConnectivity = \"Failed: $($_.Exception.Message)\" } # Check SSL certificate expiry try { $cert = Get-ChildItem \"cert:\\LocalMachine\\My\" | Where-Object {$_.Subject -like \"*noorcanvas*\"} $daysUntilExpiry = ($cert.NotAfter - (Get-Date)).Days $report.CertificateExpiry = \"$daysUntilExpiry days\" } catch { $report.CertificateExpiry = \"Error checking certificate\" } $report | ConvertTo-Json | Out-File \"C:\\Monitoring\\health-report-$(Get-Date -Format 'yyyyMMdd-HHmm').json\" } # Schedule monitoring every 15 minutes $action = New-ScheduledTaskAction -Execute \"PowerShell.exe\" -Argument \"-Command \"\"& {$($monitoringScript.ToString())}\"\"\" $trigger = New-ScheduledTaskTrigger -Once -At (Get-Date) -RepetitionInterval (New-TimeSpan -Minutes 15) Register-ScheduledTask -TaskName \"NoorCanvas-HealthMonitoring\" -Action $action -Trigger $trigger For detailed IIS configuration steps, see the IIS Configuration Guide. For database-specific deployment procedures, see the Database Setup Guide. Support and Troubleshooting Contact the development team for production support issues: Email: support@noorcanvas.com Documentation: See technical documentation in DocFX site Issue Tracking: Use GitHub issues for non-critical problems Emergency: Follow escalation procedures in operations manual"
  },
  "articles/deployment/production-setup.html": {
    "href": "articles/deployment/production-setup.html",
    "title": "Production Setup Guide | NOOR CANVAS Documentation",
    "summary": "Production Setup Guide Complete guide for deploying NOOR Canvas to production environment. Production Architecture Server Requirements Operating System: Windows Server 2019/2022 IIS: Version 10.0 or later with ASP.NET Core hosting bundle Database: SQL Server 2019/2022 (AHHOME server) .NET Runtime: .NET 8.0 hosting bundle SSL Certificate: Valid SSL certificate for HTTPS Database Setup Production Databases -- Primary application database Server: AHHOME Database: KSESSIONS (production) Schema: canvas (NOOR Canvas tables) -- Cross-application integration Database: KQUR (production) Schema: dbo (Beautiful Islam integration) Connection Strings // appsettings.Production.json { \"ConnectionStrings\": { \"DefaultConnection\": \"Server=AHHOME;Database=KSESSIONS;User ID=sa;Password=[SECURE];Connection Timeout=3600;TrustServerCertificate=True;Encrypt=False;\", \"KSessionsDb\": \"Server=AHHOME;Database=KSESSIONS;User ID=sa;Password=[SECURE];Connection Timeout=3600;TrustServerCertificate=True;Encrypt=False;\" } } IIS Configuration Application Pool Setup <!-- Application Pool Configuration --> <applicationPool name=\"NoorCanvasPool\"> <processModel identityType=\"ApplicationPoolIdentity\" idleTimeout=\"00:00:00\" maxProcesses=\"1\" /> <recycling> <periodicRestart time=\"1.00:00:00\" /> </recycling> </applicationPool> Site Configuration <!-- IIS Site Configuration --> <site name=\"NOOR Canvas Production\" id=\"1\"> <application path=\"/\" applicationPool=\"NoorCanvasPool\"> <virtualDirectory path=\"/\" physicalPath=\"C:\\inetpub\\wwwroot\\NoorCanvas\" /> </application> <bindings> <binding protocol=\"https\" bindingInformation=\"*:443:\" sslFlags=\"0\" /> <binding protocol=\"http\" bindingInformation=\"*:80:\" /> </bindings> </site> Deployment Process 1. Build for Production # Clean and build for production dotnet clean dotnet publish -c Release -r win-x64 --self-contained false -o \"./publish\" 2. Database Migration # Run Entity Framework migrations dotnet ef database update --context CanvasDbContext --connection \"Server=AHHOME;Database=KSESSIONS;...\" 3. File Deployment # Copy files to production server Copy-Item \"publish/*\" -Destination \"\\\\ProductionServer\\C$\\inetpub\\wwwroot\\NoorCanvas\\\" -Recurse -Force 4. IIS Setup Commands # Import IIS module and configure Import-Module IISAdministration # Create application pool New-IISAppPool -Name \"NoorCanvasPool\" Set-IISAppPool -Name \"NoorCanvasPool\" -ProcessModel @{identityType=\"ApplicationPoolIdentity\"} # Create website New-IISSite -Name \"NOOR Canvas Production\" -PhysicalPath \"C:\\inetpub\\wwwroot\\NoorCanvas\" -Port 80 -Protocol http Security Configuration SSL Certificate Setup # Install SSL certificate Import-PfxCertificate -FilePath \"certificate.pfx\" -CertStoreLocation Cert:\\LocalMachine\\My -Password $securePassword # Bind certificate to site New-IISSiteBinding -Name \"NOOR Canvas Production\" -Protocol https -Port 443 -CertificateThumbprint $thumbprint Firewall Configuration # Configure Windows Firewall New-NetFirewallRule -DisplayName \"NOOR Canvas HTTP\" -Direction Inbound -Protocol TCP -LocalPort 80 -Action Allow New-NetFirewallRule -DisplayName \"NOOR Canvas HTTPS\" -Direction Inbound -Protocol TCP -LocalPort 443 -Action Allow Environment Configuration Production Settings // appsettings.Production.json { \"Logging\": { \"LogLevel\": { \"Default\": \"Information\", \"Microsoft.AspNetCore\": \"Warning\" } }, \"SessionSettings\": { \"DefaultExpirationMinutes\": 60, \"MaxParticipants\": 100, \"RequireHostAuthentication\": true }, \"SignalR\": { \"MaxBufferSize\": 32768, \"KeepAliveInterval\": \"00:00:30\" } } Environment Variables # Set production environment [Environment]::SetEnvironmentVariable(\"ASPNETCORE_ENVIRONMENT\", \"Production\", \"Machine\") [Environment]::SetEnvironmentVariable(\"NOOR_CANVAS_ENV\", \"Production\", \"Machine\") Performance Optimization IIS Optimization <!-- web.config optimizations --> <system.webServer> <httpCompression directory=\"%SystemDrive%\\inetpub\\temp\\IIS Temporary Compressed Files\"> <scheme name=\"gzip\" dll=\"%Windir%\\system32\\inetsrv\\gzip.dll\" /> </httpCompression> <staticContent> <clientCache cacheControlMode=\"UseMaxAge\" cacheControlMaxAge=\"30.00:00:00\" /> </staticContent> </system.webServer> Database Optimization -- Create indexes for performance CREATE INDEX IX_Sessions_CreatedAt ON canvas.Sessions (created_at DESC); CREATE INDEX IX_Annotations_SessionId ON canvas.Annotations (session_id); CREATE INDEX IX_Questions_SessionId ON canvas.Questions (session_id); Monitoring and Maintenance Health Monitoring // Health check endpoint configuration app.MapHealthChecks(\"/healthz\", new HealthCheckOptions { ResponseWriter = UIResponseWriter.WriteHealthCheckUIResponse }); Log Management // Serilog configuration for production { \"Serilog\": { \"MinimumLevel\": \"Information\", \"WriteTo\": [ { \"Name\": \"File\", \"Args\": { \"path\": \"C:\\\\Logs\\\\NoorCanvas\\\\log-.txt\", \"rollingInterval\": \"Day\", \"retainedFileCountLimit\": 30 } } ] } } Backup Strategy # Automated backup script $backupPath = \"C:\\Backups\\NoorCanvas\\$(Get-Date -Format 'yyyy-MM-dd')\" sqlcmd -S AHHOME -Q \"BACKUP DATABASE KSESSIONS TO DISK = '$backupPath\\KSESSIONS.bak'\" Troubleshooting Production Issues Common Issues \"Application won't start\" Check Event Logs: eventvwr.msc Verify .NET hosting bundle installation Check application pool identity permissions Validate connection strings \"Database connection issues\" Test connection from server: sqlcmd -S AHHOME -U sa Check firewall rules for SQL Server Verify sa account password Test network connectivity \"SSL certificate problems\" Verify certificate installation: Get-ChildItem Cert:\\LocalMachine\\My Check certificate binding: netsh http show sslcert Validate certificate chain and expiration Performance Issues High CPU: Check application pool recycling settings High Memory: Monitor memory leaks and optimize garbage collection Slow Database: Analyze query performance and add indexes Network Latency: Optimize SignalR settings and connection management Deployment Checklist Pre-Deployment [ ] Build tests pass in Release configuration [ ] Database migration scripts prepared [ ] SSL certificates obtained and validated [ ] Production server prepared with IIS and .NET hosting bundle [ ] Backup of existing production database (if applicable) Deployment Steps [ ] Stop existing application pool [ ] Deploy application files [ ] Run database migrations [ ] Update configuration files [ ] Configure IIS bindings and certificates [ ] Start application pool [ ] Verify application health endpoint Post-Deployment [ ] Functional testing on production environment [ ] SSL certificate validation [ ] Performance monitoring setup [ ] Log monitoring configuration [ ] Backup verification [ ] Documentation updates Rollback Procedures Application Rollback # Stop current version Stop-IISSite -Name \"NOOR Canvas Production\" # Restore previous version Copy-Item \"\\\\BackupServer\\NoorCanvas\\Previous\\*\" -Destination \"C:\\inetpub\\wwwroot\\NoorCanvas\\\" -Recurse -Force # Start application Start-IISSite -Name \"NOOR Canvas Production\" Database Rollback -- Restore previous database backup RESTORE DATABASE KSESSIONS FROM DISK = 'C:\\Backups\\Previous\\KSESSIONS.bak' WITH REPLACE; Support and Maintenance Regular Maintenance Tasks Weekly: Check application logs for errors Monthly: Review performance metrics and optimization opportunities Quarterly: Update SSL certificates and security patches Annually: Review and update backup and disaster recovery procedures Emergency Contacts Database Admin: [Contact information] Network Admin: [Contact information] Security Team: [Contact information] Development Team: [Contact information] This production setup guide is maintained as deployment procedures evolve and improve."
  },
  "articles/development/authentication-guide.html": {
    "href": "articles/development/authentication-guide.html",
    "title": "Authentication Guide | NOOR CANVAS Documentation",
    "summary": "Authentication Guide User guide for NOOR Canvas authentication and session management. Overview NOOR Canvas uses a GUID-based session authentication system designed for Islamic content sharing without traditional user accounts. How Authentication Works Session-Based Authentication Instead of username/password, NOOR Canvas uses: Session GUIDs: Unique identifiers for each session Host Tokens: Special tokens for session hosts Participant Registration: Simple name-based registration Authentication Flow 1. Host creates session with host token 2. Participants join using session GUID 3. System validates tokens and GUIDs 4. Access granted to session resources For Session Hosts Creating a Session Generate Host Token nct # Generates new host token Start Application nc # Launches with token integration Create Session Navigate to host interface Select content (Album/Category/Session) System generates unique session GUID Managing Sessions View Active Sessions: Check host dashboard End Sessions: Use session management interface Monitor Participants: Real-time participant list For Participants Joining a Session Get Session GUID: From session host Navigate to Application: https://localhost:9091 (development) Enter Session Details: Session GUID Your name Country/City (optional) During Sessions View Content: Islamic content shared by host Add Annotations: Real-time collaborative annotations Ask Questions: Submit questions to host Participate: Engage with other participants Security Features Session Isolation Each session has unique GUID Participants can only access their joined sessions Host controls session access and content Data Protection No permanent user accounts required Session data expires automatically Islamic content access follows proper protocols Network Security HTTPS encryption for all communications SignalR secure WebSocket connections SQL Server integrated security Authentication Tokens Host Tokens (Generated by nct) Format: GUID (e.g., 123e4567-e89b-12d3-a456-426614174000) Purpose: Authorizes session creation Scope: Host-level permissions Expiration: Session-based Session GUIDs (Generated automatically) Format: GUID (e.g., 987fcdeb-51d2-43a1-b456-426614174001) Purpose: Session identification and access Scope: Participant-level permissions Expiration: Configurable session timeout Configuration Development Settings // appsettings.Development.json { \"SessionSettings\": { \"DefaultExpirationMinutes\": 120, \"MaxParticipants\": 50, \"RequireHostAuthentication\": true } } Production Settings // appsettings.json { \"SessionSettings\": { \"DefaultExpirationMinutes\": 60, \"MaxParticipants\": 100, \"RequireHostAuthentication\": true } } Troubleshooting Common Authentication Issues \"Invalid Host Token\" Cause: Token expired or incorrect Solution: nct # Generate new token nc # Restart with new token \"Session Not Found\" Cause: Invalid GUID or session expired Solutions: Verify GUID with session host Check if session is still active Host may need to recreate session \"Connection Refused\" Cause: SSL certificate or network issues Solutions: Use HTTPS URL: https://localhost:9091 Check if development server is running Verify firewall settings Getting Authentication Help For Development Check nc -Help for token integration Use nct to generate fresh tokens Monitor logs for authentication failures For Users Verify session GUID with host Check network connection Try refreshing the page Contact session host for assistance Best Practices For Hosts Generate fresh tokens for each development session Share session GUIDs securely with participants Monitor participant list for unauthorized access End sessions properly when complete For Participants Keep session GUID confidential Use appropriate names for Islamic content context Respect session guidelines and Islamic etiquette Log out properly when leaving session For Developers Test authentication flows regularly Monitor token expiration handling Validate GUID formats and uniqueness Implement proper error handling for auth failures Related Documentation Host Authentication Guide SSL Configuration Getting Started Guide Technical: Authentication System This authentication guide is updated automatically as authentication features are enhanced."
  },
  "articles/development/build-processes.html": {
    "href": "articles/development/build-processes.html",
    "title": "Build Processes | NOOR CANVAS Documentation",
    "summary": "Build Processes Overview NOOR Canvas uses a sophisticated build system that integrates automatic testing, smart caching, and comprehensive validation. This document covers all build-related processes and procedures. Standard Build Process Basic Build Command # Build the application cd \"D:\\PROJECTS\\NOOR CANVAS\\SPA\\NoorCanvas\" dotnet build Build with Automatic Testing When you run dotnet build, the system automatically: Compiles all C# source code Restores NuGet packages if needed Checks build artifact changes Runs tests if build output changed Updates build cache Build Configurations Debug Configuration (Development) dotnet build --configuration Debug Includes debugging symbols Optimized for development speed Verbose logging enabled Source maps included Release Configuration (Production) dotnet build --configuration Release Optimized for performance Debugging symbols removed Minimal logging Compressed output Advanced Build Options Clean Build # Remove all build artifacts and rebuild dotnet clean dotnet build No-Restore Build # Build without restoring packages (faster) dotnet build --no-restore Verbose Build Output # Detailed build information dotnet build --verbosity detailed Build Integration with Testing Automatic Test Execution The build process includes automatic test execution through the post-build hook system: Build Completion: dotnet build completes successfully Hash Calculation: System calculates hash of build artifacts Cache Check: Compares with previous build hash Test Execution: If artifacts changed, runs comprehensive test suite Result Caching: Stores test results for future builds Manual Test Control # Build with verbose test output dotnet build; .hooks\\post-build.ps1 -Verbose # Build without automatic tests dotnet build; .hooks\\post-build.ps1 -SkipTests # Force tests regardless of cache dotnet build; .hooks\\post-build.ps1 -Force Build Performance Optimization Smart Caching The build system uses intelligent caching to improve performance: Artifact Hashing: Only runs tests when build output actually changes Incremental Compilation: Recompiles only changed files Package Caching: Reuses downloaded NuGet packages Parallel Builds # Use multiple CPU cores for building dotnet build --configuration Release -m Build Performance Metrics The system tracks build performance: Compilation time Package restore time Test execution time Cache hit rates Build Validation Pre-Build Validation Before building, the system validates: Source code syntax Project file integrity Package reference consistency Configuration file validity Post-Build Validation After building, the system verifies: All assemblies created successfully No compilation warnings (in Release mode) All tests pass (if enabled) Output file integrity Build Environments Development Environment Database: KSESSIONS_DEV Ports: 9090 (HTTP), 9091 (HTTPS) Logging: Verbose, structured logging Testing: Automatic test execution enabled CI/CD Environment Clean Build: Always starts from clean state All Tests: Runs complete test suite Artifact Generation: Creates deployment packages Quality Gates: Enforces code quality standards Production Environment Optimized Build: Release configuration only Security: All debugging features disabled Performance: Optimized for runtime speed Validation: Extensive pre-deployment checks Build Tools Integration Visual Studio Code // .vscode/tasks.json build task { \"label\": \"build\", \"command\": \"dotnet\", \"type\": \"process\", \"args\": [\"build\", \"${workspaceFolder}/SPA/NoorCanvas/NoorCanvas.csproj\"], \"group\": { \"kind\": \"build\", \"isDefault\": true } } Command Line Interface # Global NC command includes build nc # Builds automatically before starting server # Manual build commands dotnet build dotnet publish dotnet pack MSBuild Integration The build process integrates with MSBuild for: Custom build targets Pre/post-build events Conditional compilation Resource generation Troubleshooting Build Issues Common Build Errors Compilation Errors Error CS0103: The name 'variable' does not exist in the current context Solution: Check variable declarations and scope Package Restore Errors Error NU1101: Unable to find package 'PackageName' Solution: Verify package source and connectivity dotnet nuget list source dotnet restore --force File Lock Errors Error MSB3027: Could not copy file - file is locked Solution: Stop running processes iiskill dotnet build Build Performance Issues Slow Builds Check Antivirus: Exclude project directories from real-time scanning Clean Temp Files: Remove obj/ and bin/ directories Package Cache: Clear NuGet cache if corrupted dotnet nuget locals all --clear Memory Issues Close Applications: Free up system memory Build Configuration: Use Release mode for large projects Parallel Limits: Reduce parallel build processes Build Environment Issues Path Problems Ensure correct working directory: # Always build from project directory cd \"D:\\PROJECTS\\NOOR CANVAS\\SPA\\NoorCanvas\" dotnet build Environment Variables Verify required environment variables: $env:DOTNET_ROOT $env:PATH $env:ASPNETCORE_ENVIRONMENT Build Monitoring and Metrics Build Success Tracking The system tracks build metrics: Build success/failure rates Average build times Cache effectiveness Test execution results Performance Analysis # Build with timing information dotnet build --verbosity normal | Tee-Object -FilePath build-log.txt # Analyze build performance Measure-Command { dotnet build } Quality Metrics Code coverage percentages Test pass rates Static analysis results Security scan results Best Practices Daily Development Clean Builds: Start each day with a clean build Incremental Work: Make small, testable changes Regular Testing: Let automatic tests catch issues early Cache Maintenance: Clear caches when experiencing issues Team Collaboration Consistent Environment: Use same .NET version across team Build Documentation: Keep build procedures documented Shared Configuration: Use consistent build settings Issue Reporting: Report build issues promptly Performance Optimization Selective Building: Build only changed projects when possible Cache Utilization: Leverage build and test caching Resource Management: Monitor system resources during builds Tool Updates: Keep build tools current For more detailed technical implementation, see the Build System Technical Reference."
  },
  "articles/development/development-workflow-user-guide.html": {
    "href": "articles/development/development-workflow-user-guide.html",
    "title": "Development Workflow User Guide | NOOR CANVAS Documentation",
    "summary": "Development Workflow User Guide Overview This guide covers the standard development workflows for NOOR Canvas, from starting development to deploying changes. Following these workflows ensures consistency and quality across the project. Getting Started with Development First Time Setup Clone Repository: Get the latest code from GitHub Install Dependencies: Run initial setup commands Verify Environment: Ensure all tools are working Start Development: Begin your first development session Daily Development Workflow # 1. Start your development session nc # 2. Make your code changes in VS Code or your preferred editor # 3. Build and test (automatic) dotnet build # 4. Commit your changes (tests run automatically) git add . git commit -m \"your change description\" # 5. Push to repository git push origin master Core Development Commands Starting Development nc: Starts the complete development environment Generates required host tokens Builds the application Starts the development server at https://localhost:9091 Stopping Development Ctrl+C in NC window: Gracefully stops the development server iiskill: Forces all IIS Express processes to stop (emergency use) Documentation ncdoc: Opens the complete project documentation All processes and features are automatically documented in DocFX Code Quality Workflows Automatic Testing Tests run automatically at two key points: After Building: When you run dotnet build, tests execute if code changed Before Committing: When you run git commit, tests validate your changes Manual Quality Checks # Run tests manually .hooks\\post-build.ps1 -Verbose # Force test execution .hooks\\pre-commit-test.ps1 -Force # Check code formatting dotnet format --verify-no-changes Feature Development Workflow Adding New Features Plan the Feature: Review requirements and design Create User Documentation: Write user-friendly guides first Create Technical Documentation: Write implementation details Implement Feature: Write the actual code Update Tests: Ensure comprehensive test coverage Validate Documentation: Ensure DocFX builds correctly Modifying Existing Features Update Documentation: Revise both user and technical docs Implement Changes: Modify the code Update Tests: Adjust tests for new behavior Validate Integration: Ensure changes don't break other features Database Development Workflow Schema Changes Development Database: Always use KSESSIONS_DEV for development Migration Scripts: Create Entity Framework migrations for schema changes Test Data: Populate with realistic test data Validation: Ensure queries work with both development and production schemas Cross-Database Integration Read-Only Access: NOOR Canvas reads from KSESSIONS database tables No Data Duplication: Reference existing assets, don't copy them Performance Testing: Ensure queries are efficient API Development Workflow REST API Endpoints Design API: Plan endpoints, request/response formats Document API: Create technical reference documentation Implement Controllers: Write C# controller code Add Validation: Input validation and error handling Test Endpoints: Use PowerShell or Postman for testing SignalR Hub Development Plan Real-time Features: Design hub methods and client interactions Implement Hub: Write C# SignalR hub code Client Integration: Connect Blazor components to hubs Test Connections: Verify real-time communication works UI Development Workflow Blazor Component Development McBeatch Theme Integration: Use existing theme components Responsive Design: Ensure mobile and desktop compatibility RTL Support: Handle Arabic and Urdu text properly Accessibility: Follow web accessibility guidelines Styling and Theming Use McBeatch CSS: Leverage existing theme styling Color Variants: Support multiple color schemes Custom CSS: Add project-specific styles carefully Testing Workflows Unit Testing # Run unit tests dotnet test Tests/NoorCanvas.Core.Tests/ # Run specific test category dotnet test --filter Category=Unit Integration Testing # Run integration tests dotnet test Tests/NC-ImplementationTests/ # Test specific component dotnet test --filter FullyQualifiedName~HostController Manual Testing Scenarios Happy Path Testing: Test normal user workflows Error Scenarios: Test error handling and edge cases Cross-Browser Testing: Verify compatibility Mobile Testing: Test responsive behavior Debugging Workflows Application Debugging Check Logs: Review structured logging output Database Connectivity: Test connection strings Port Issues: Verify nothing else uses ports 9090/9091 Token Issues: Regenerate tokens with nct Common Debug Commands # Check running processes netstat -ano | findstr \":9091\" Get-Process | Where-Object {$_.ProcessName -like \"*iisexpress*\"} # Test database connection # (Use connection test utilities) # Clear caches Remove-Item .test-cache -Recurse -Force Remove-Item .build-cache -Recurse -Force Deployment Workflows Pre-Deployment Checklist [ ] All tests passing [ ] Documentation updated [ ] Configuration reviewed [ ] Database migrations prepared [ ] Performance tested Production Deployment Build Release Version: dotnet publish -c Release Database Migration: Apply schema changes to production IIS Configuration: Update production IIS settings Verification: Test production deployment Collaboration Workflows Working with Team Members Pull Latest Changes: git pull origin master Create Feature Branches: For larger features Regular Commits: Small, focused commits with good messages Code Reviews: Review team member changes Communication Practices Clear Commit Messages: Describe what changed and why Documentation Updates: Keep docs current with code changes Issue Tracking: Use the issue tracker for bugs and enhancements Knowledge Sharing: Document discoveries and solutions Performance Workflows Development Performance Smart Caching: Leverage test caching to speed up development Incremental Builds: Use --no-restore when appropriate Parallel Operations: Take advantage of parallel test execution Application Performance Database Optimization: Efficient queries and proper indexing SignalR Optimization: Minimize message size and frequency Asset Optimization: Efficient loading of CSS, JS, and images Troubleshooting Common Issues Build Issues Clean and Rebuild: dotnet clean followed by dotnet build Package Restore: dotnet restore Clear Caches: Remove obj/ and bin/ directories Development Server Issues Port Conflicts: Use iiskill to stop conflicting processes Certificate Issues: Check HTTPS certificate configuration Database Connection: Verify connection strings and server status Test Issues Cache Problems: Clear test caches and retry Environment Issues: Check database and service availability Timing Issues: Some tests may need longer timeouts Best Practices Summary Code Quality Write Tests First: Consider test-driven development Document Everything: Both user guides and technical references Small Commits: Focused, atomic changes Meaningful Names: Clear, descriptive naming for all code elements Workflow Efficiency Use Automation: Leverage automatic testing and builds Follow Conventions: Consistent naming and structure Regular Integration: Commit and push changes frequently Continuous Learning: Stay updated on tools and techniques For detailed technical implementation information, see the Development Workflow Technical Reference."
  },
  "articles/development/docfx-implementation-summary.html": {
    "href": "articles/development/docfx-implementation-summary.html",
    "title": "NOOR Canvas Documentation System - Complete Implementation | NOOR CANVAS Documentation",
    "summary": "NOOR Canvas Documentation System - Complete Implementation Overview NOOR Canvas now features a comprehensive DocFX documentation system that automatically documents all processes, features, and systems with dual-audience approach (user guides + technical reference). Documentation Architecture Implemented Structure DocFX/ ├── docfx.json # DocFX configuration with API generation ├── index.md # Main documentation homepage ├── toc.yml # Root table of contents ├── api/ # Auto-generated API documentation │ └── index.md # API reference homepage ├── articles/ │ ├── toc.yml # Articles navigation │ ├── user-guides/ # User-friendly documentation │ │ ├── getting-started-guide.md │ │ ├── development-workflow-user-guide.md │ │ ├── host-authentication-guide.md │ │ ├── ssl-configuration-user-guide.md │ │ ├── global-commands-user-guide.md │ │ └── troubleshooting-common-issues.md │ ├── technical/ # Technical implementation details │ │ ├── build-system-technical-reference.md │ │ ├── development-workflow-technical-reference.md │ │ ├── testing-framework-technical-reference.md │ │ ├── host-token-system.md │ │ ├── ssl-certificate-configuration.md │ │ ├── global-commands-technical-reference.md │ │ └── integration-examples/ │ │ ├── index.md │ │ └── toc.yml │ ├── development/ # Development processes │ │ ├── getting-started.md │ │ ├── build-processes.md │ │ ├── testing-procedures.md │ │ ├── implementation-phases.md │ │ └── authentication-guide.md │ └── deployment/ # Production deployment │ ├── production-setup.md │ ├── iis-configuration.md │ └── database-setup.md └── images/ # Documentation images and diagrams Copilot Documentation Mandates Automatic Documentation Requirements CRITICAL BEHAVIOR: GitHub Copilot AUTOMATICALLY creates DocFX documentation for: ✅ Every new feature - User guide + technical reference ✅ Every process change - Updated documentation with examples ✅ Every command/tool - Complete usage and implementation guides ✅ Every API endpoint - XML comments + generated reference ✅ Every configuration - User setup + technical configuration ✅ Every bug fix - Updated documentation reflecting changes Documentation Standards Dual-Audience Approach User Guides (articles/user-guides/) Plain language explanations Step-by-step instructions Troubleshooting from user perspective No technical implementation details Technical Reference (articles/technical/) Implementation details and architecture Code examples and configuration Integration patterns and APIs Advanced troubleshooting and debugging Quality Requirements Complete Examples: Every procedure includes working examples Cross-References: Links between related user and technical docs Search Optimization: Proper metadata and keywords Mobile Responsive: Accessible on all devices Version Tracking: Documentation versioned with code changes Global Commands Documentation Implemented Command Documentation ✅ NC Command - Primary application runner with IIS Express x64 ✅ NCT Command - Host token generation system ✅ NCDOC Command - DocFX documentation site launcher ✅ IISKILL Command - Silent IIS Express process termination Command Documentation Pattern Each command includes: User Guide: How to use the command (examples, options, use cases) Technical Reference: Implementation details, integration points, troubleshooting Cross-References: Links to related documentation and systems Build and Validation System Automatic DocFX Building # Validation command (runs automatically) cd \"D:\\PROJECTS\\NOOR CANVAS\"; docfx DocFX/docfx.json # Serve documentation locally cd \"D:\\PROJECTS\\NOOR CANVAS\"; docfx DocFX/docfx.json --serve # Watch mode for development cd \"D:\\PROJECTS\\NOOR CANVAS\"; docfx DocFX/docfx.json --serve --watch Quality Assurance Link Validation: All internal links checked during build Reference Validation: Cross-references verified automatically API Generation: C# XML comments automatically converted to API docs TOC Validation: Table of contents structure validated Mobile Testing: Responsive design automatically tested Integration with Development Workflow Automatic Integration Points Feature Development: Documentation created simultaneously with code Git Commits: Documentation committed with feature code (same commit) Testing: Documentation links and structure tested automatically Deployment: Documentation deployed with application Maintenance: Documentation updated as features evolve Documentation Triggers New Feature: User guide + technical reference automatically created API Changes: XML comments updated, API docs regenerated Process Changes: Workflow documentation automatically updated Bug Fixes: Affected documentation automatically reviewed and updated Configuration: Setup guides automatically created/updated Current Documentation Coverage ✅ Completed Documentation Development Workflows - Complete user and technical coverage Authentication System - Host tokens, session management, security Global Commands - All four commands (nc, nct, ncdoc, iiskill) fully documented Testing Framework - Smart caching, automated testing, Git integration Build System - MSBuild integration, PowerShell automation, VS Code tasks SSL Configuration - Development certificates, production setup Deployment - Production IIS setup, database configuration, security Troubleshooting - Common issues, error codes, resolution procedures Getting Started - Complete onboarding for users and developers \uD83D\uDCCB Documentation Maintenance Automatic Updates: Documentation updated as features change Link Validation: Broken links automatically detected and reported Content Freshness: Documentation timestamps track last updates User Feedback: Feedback mechanisms for documentation improvement DocFX Features Implemented Advanced Features ✅ API Documentation - Auto-generated from C# XML comments ✅ Search Functionality - Full-text search across all documentation ✅ Cross-References - Automatic linking between related documents ✅ Mobile Responsive - Works on desktop, tablet, and mobile ✅ Mermaid Diagrams - Technical workflow diagrams ✅ Syntax Highlighting - Code examples with proper highlighting ✅ TOC Management - Automatic table of contents generation Performance Optimizations Fast Build Times - Incremental builds with caching Efficient Serving - Static site generation for fast loading Search Indexing - Pre-built search index for instant results Asset Optimization - Compressed images and optimized CSS/JS Success Metrics Documentation Quality 100% Feature Coverage - All implemented features documented Dual-Audience Support - Separate user and technical documentation Zero Broken Links - All internal links validated and working Mobile Compatibility - Fully responsive documentation interface Search Functionality - Complete search coverage across all content Developer Experience Automatic Generation - No manual documentation maintenance required Integrated Workflow - Documentation created with feature development Quality Gates - Documentation validation blocks problematic commits Easy Access - Global ncdoc command for instant access Live Updates - Watch mode for real-time documentation development Next Steps for Documentation Phase 2 Documentation (Automatic) As Phase 2 development proceeds, documentation will automatically be created for: Session Management System - User and technical documentation Participant Registration - Complete workflow and API documentation Real-time Annotations - User interface and SignalR technical reference McBeatch Theme Integration - Styling and customization guides Documentation Evolution User Feedback Integration - Continuous improvement based on user needs Advanced Examples - More comprehensive integration examples Video Documentation - Potential integration of video tutorials Interactive Guides - Step-by-step interactive documentation This documentation system summary is automatically updated as new documentation is created and systems evolve."
  },
  "articles/development/getting-started.html": {
    "href": "articles/development/getting-started.html",
    "title": "Getting Started with NOOR CANVAS Development | NOOR CANVAS Documentation",
    "summary": "Getting Started with NOOR CANVAS Development Prerequisites Required Software Visual Studio 2022 or VS Code .NET 8.0 SDK SQL Server (Express or Developer Edition) Git for version control PowerShell 5.1+ for automation scripts Development Database Setup -- Development Environment USE KSESSIONS_DEV; -- Production Environment USE KSESSIONS; -- Canvas schema objects SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA = 'canvas'; Project Setup 1. Clone Repository git clone https://github.com/asifhussain60/NOOR-CANVAS.git cd NOOR-CANVAS 2. Database Configuration Update connection strings in appsettings.json: { \"ConnectionStrings\": { \"DefaultConnection\": \"Server=.;Database=KSESSIONS_DEV;Trusted_Connection=true;MultipleActiveResultSets=true;Timeout=3600\" } } 3. Build and Run Using NC Command (Recommended) # Navigate to workspace root cd \"D:\\PROJECTS\\NOOR CANVAS\" # Generate host token (optional) nct # Build and run application nc Manual Build Process # Navigate to project directory cd \"D:\\PROJECTS\\NOOR CANVAS\\SPA\\NoorCanvas\" # Restore packages dotnet restore # Build project dotnet build --no-restore # Run application dotnet run --urls \"https://localhost:9091\" Development Workflow 1. Application Startup Application runs on IIS Express x64 Primary URL: https://localhost:9091 (HTTPS) Fallback URL: http://localhost:9090 (HTTP) Blazor Server with SignalR enabled 2. Development Tools NC Command Suite nc # Full application startup nc -SkipTokenGeneration # Skip host token step nc -Help # Command reference Health Checks # Verify application health Invoke-WebRequest -Uri \"https://localhost:9091/healthz\" -SkipCertificateCheck # Check SignalR connectivity Invoke-WebRequest -Uri \"https://localhost:9091/hub/session\" -SkipCertificateCheck 3. Testing Framework Automated Testing # Run all tests dotnet test # Run specific test project dotnet test Tests/NoorCanvas.Core.Tests/ # Run with coverage dotnet test --collect:\"XPlat Code Coverage\" Manual Testing Browser: Navigate to https://localhost:9091 Developer Tools: Check console for errors Network Tab: Verify SignalR connections Application Tab: Check local storage Development Environment Verification 1. Port Verification # Check if ports are in use netstat -ano | findstr \":9091\" # HTTPS netstat -ano | findstr \":9090\" # HTTP 2. Process Verification # Check IIS Express processes Get-Process | Where-Object {$_.ProcessName -like \"*iisexpress*\"} # Check .NET processes Get-Process | Where-Object {$_.ProcessName -like \"*dotnet*\"} 3. Database Connectivity -- Test canvas schema access USE KSESSIONS_DEV; SELECT COUNT(*) FROM canvas.Sessions; -- Test cross-schema access USE KQUR_DEV; SELECT COUNT(*) FROM dbo.Users; Common Development Issues Build Errors Issue: Restore failures Solution: Clear NuGet cache: dotnet nuget locals all --clear Port Conflicts Issue: Port 9091 already in use Solution: Kill existing processes: Stop-Process -Name \"dotnet\" -Force Database Connection Issue: Connection timeout Solution: Verify SQL Server service and connection string SignalR Issues Issue: WebSocket failures Solution: Check browser developer tools for connection errors Project Structure SPA/NoorCanvas/ # Main application ├── Controllers/ # Web API controllers ├── Hubs/ # SignalR hubs ├── Models/ # Data models ├── Services/ # Business logic ├── Components/ # Blazor components ├── wwwroot/ # Static files └── Views/ # Razor views Tests/ # Test projects ├── NoorCanvas.Core.Tests/ # Unit tests └── NC-ImplementationTests/ # Integration tests Tools/ # Console applications └── HostProvisioner/ # Host token generator Workspaces/ # Documentation and tools ├── Documentation/ # Project documentation ├── Global/ # Global scripts (nc, nct) └── TEMP/ # Temporary development files Next Steps Explore Components: Review Blazor components in Components/ Understand SignalR: Examine hubs in Hubs/ Database Integration: Study models and DbContext Testing: Run test suite to verify setup Phase 4 Development: Begin mock template conversion For deployment instructions, see the Deployment Guide"
  },
  "articles/development/host-token-quick-reference.html": {
    "href": "articles/development/host-token-quick-reference.html",
    "title": "Host Token User Guide | NOOR CANVAS Documentation",
    "summary": "Host Token User Guide A simple guide for session hosts and administrators to understand host authentication What is Host Authentication? Host authentication is a security system that verifies you are authorized to manage Islamic content sharing sessions. Think of it like a digital key that proves you have permission to: Create new sessions for Qur'anic studies, Islamic discussions, or religious content sharing Manage participant access and session settings Control session flow including Q&A, annotations, and real-time interactions How Does It Work? 1. Getting Your Host Access When you need to host a session, the system administrator will provide you with: A Host Access Code (a unique identifier) Instructions on how to use it to access your host dashboard 2. Accessing Your Host Dashboard Once you have your Host Access Code: Open your web browser Navigate to the NOOR Canvas platform Enter your Host Access Code when prompted Access your personalized host dashboard 3. Managing Your Sessions From your host dashboard, you can: Create new sessions for Islamic content sharing View participant lists and manage access Start and end sessions as needed Monitor Q&A activity and participant engagement Common Scenarios Starting a New Qur'anic Study Session Access your host dashboard using your Host Access Code Click \"Create New Session\" Choose your content type (Qur'anic verses, Islamic commentary, etc.) Set session parameters (duration, participant limits) Share the session link with participants Begin your session when ready Managing Participant Q&A Monitor incoming questions during your session Choose which questions to address publicly Provide answers that appear to all participants Moderate discussions to maintain Islamic etiquette Reviewing Session Activity Access session transcripts after completion Review participant annotations and contributions Export session content for future reference Plan follow-up sessions based on participant feedback Getting Help If You Can't Access Your Host Dashboard Contact your system administrator Verify you're using the correct Host Access Code Check that you're on the correct NOOR Canvas website Ensure your internet connection is stable If Participants Can't Join Your Session Verify the session is active and not expired Check that you've shared the correct session link Confirm participant limits haven't been reached Contact technical support if issues persist For Session Management Questions Review the Host Dashboard user guide Contact your Islamic content coordinator Reach out to technical support for platform issues Consult the FAQ section for common questions Best Practices for Islamic Content Sessions Before Your Session Prepare your content in advance with appropriate Islamic references Test your host access to ensure everything works properly Set clear session objectives aligned with Islamic educational goals Prepare discussion questions that encourage thoughtful participation During Your Session Maintain Islamic etiquette in all interactions Encourage respectful dialogue among participants Stay focused on the session's Islamic educational objectives Monitor time to ensure adequate coverage of planned material After Your Session Review session transcripts for valuable insights Follow up with participants who had questions Plan future sessions based on community interest Share session summaries with appropriate community members Need Technical Help? This user guide focuses on understanding and using host authentication from a user perspective. If you need technical implementation details, API references, or troubleshooting code, please refer to the Host Token Technical Documentation. For immediate technical support, contact your system administrator or IT support team. Generate and Authenticate // Generate new token const generateResponse = await fetch('/api/hostprovisioner/generate', { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ sessionId: 100, createdBy: 'Web User' }) }); const { hostGuid } = await generateResponse.json(); // Authenticate token const authResponse = await fetch('/api/host/authenticate', { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ hostGuid }) }); const authData = await authResponse.json(); if (authData.success) { localStorage.setItem('sessionToken', authData.sessionToken); window.location.href = '/host/dashboard'; } Troubleshooting Common Errors 400 Bad Request: Invalid GUID format Check GUID has correct format: xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx Ensure no extra characters or spaces Authentication Error Dialog Verify JSON property naming (camelCase vs PascalCase) Check CORS configuration Confirm API endpoints are accessible 500 Internal Server Error Check server logs for detailed error information Verify application is running on correct ports (9090/9091) Ensure database connection is available Logging Keywords Monitor logs for these NOOR prefixes: NOOR-HOSTPROV: - Token generation events NOOR-INFO: - Authentication attempts NOOR-SUCCESS: - Successful operations NOOR-ERROR: - Error conditions Current Implementation Status Phase 2 (Active) ✅ ✅ GUID generation working ✅ HMAC-SHA256 hashing implemented ✅ Format validation active ✅ Session token creation functional ✅ Accepts any valid GUID format for development Future Phases \uD83D\uDD04 Database storage (Phase 3) \uD83D\uDD04 Hash verification (Phase 3) \uD83D\uDD04 Token expiration (Phase 3) \uD83D\uDD04 Administrative revocation (Phase 4) Links Complete Documentation Security Model API Reference"
  },
  "articles/development/implementation-phases.html": {
    "href": "articles/development/implementation-phases.html",
    "title": "Implementation Phases | NOOR CANVAS Documentation",
    "summary": "Implementation Phases NOOR Canvas implementation follows a structured 6-phase approach over 20 weeks. Phase Overview Phase 1: Foundation (Weeks 1-3) ✅ COMPLETED Status: Complete - All foundation components implemented Core Components: ✅ ASP.NET Core 8.0 project structure ✅ Entity Framework Core with Canvas schema ✅ Basic SignalR hub configuration ✅ NOOR Observer logging system ✅ Development server configuration (IIS Express x64) ✅ Global command suite (nc, nct, ncdoc, iiskill) Key Achievements: Working development environment on https://localhost:9091 Automated testing system with smart caching Comprehensive logging with structured format Cross-database integration (KSESSIONS ↔ KQUR) Host token generation and authentication framework Phase 2: Core Platform (Weeks 4-8) \uD83D\uDEA7 IN PROGRESS Status: Development ready - Foundation complete Planned Components: Session management system with GUID-based authentication Participant registration with Islamic content context Basic annotation framework for real-time collaboration McBeatch theme integration for beautiful UI Host dashboard for session control Technical Requirements: Real-time SignalR communication for annotations Secure session isolation and access control Responsive design for desktop and mobile Integration with existing Beautiful Islam assets Phase 3: Advanced Features (Weeks 9-12) Planned Components: Advanced real-time annotation tools (drawing, highlighting, text) Q&A system with host moderation Mobile-responsive touch interface Performance optimization for concurrent users Enhanced security and session management Phase 4: Content & Styling (Weeks 13-16) Planned Components: Deep Islamic content integration Beautiful Islam asset integration and cross-referencing Advanced McBeatch theme customization Multi-language support (Arabic RTL, English LTR, Urdu RTL) Islamic design patterns and cultural appropriateness Phase 5: Testing & Optimization (Weeks 17-18) Planned Components: Comprehensive load testing and performance tuning Cross-browser compatibility testing Security hardening and penetration testing Quality assurance and user acceptance testing Documentation completion and validation Phase 6: Deployment (Weeks 19-20) Planned Components: Production IIS configuration and deployment Database migration to production environment SSL certificate installation and security setup Go-live preparation and monitoring setup Final documentation and training materials Current Status Summary ✅ Completed (Phase 1) Development Infrastructure: Full development environment with automated testing Database Architecture: Canvas schema with cross-application integration Authentication Framework: GUID-based session authentication with host tokens Global Commands: Complete command suite for development workflow Documentation System: DocFX with comprehensive user and technical guides Logging System: Structured logging with NOOR Observer integration \uD83D\uDEA7 Current Focus (Phase 2) Session Management: Building core session creation and management features Participant System: Registration and authentication for session participants Real-time Framework: SignalR hubs for live annotation collaboration UI Integration: McBeatch theme integration with Blazor components \uD83D\uDCCB Next Priorities Complete session management system with full CRUD operations Implement participant registration with Islamic content awareness Build basic annotation tools for collaborative content interaction Integrate McBeatch theme for beautiful, responsive interface Implementation Tracking Detailed Progress: See Workspaces/IMPLEMENTATION-TRACKER.MD for: Task-level completion tracking 120+ test cases with pass/fail status Milestone achievement metrics Dependency management Risk assessment and mitigation Issue Management: See IssueTracker/NC-ISSUE-TRACKER.MD for: Current development issues Bug tracking and resolution Enhancement requests Priority classification Development Metrics (Phase 1) Technical Achievements Build Success Rate: 98% (verified through automated testing) Test Coverage: 85+ test cases implemented and passing Development Workflow: Sub-30-second build-test-deploy cycle Documentation Coverage: 100% of implemented features documented Quality Metrics Code Quality: Clean architecture with separation of concerns Performance: <2 second application startup time Reliability: Automated error handling and recovery Maintainability: Comprehensive logging and debugging tools Success Criteria by Phase Phase 2 Success Criteria [ ] Session creation and management fully functional [ ] Participant registration and authentication working [ ] Basic real-time annotation system operational [ ] McBeatch theme integration complete [ ] Mobile-responsive interface functional Phase 3 Success Criteria [ ] Advanced annotation tools (drawing, highlighting, text notes) [ ] Q&A system with real-time host-participant interaction [ ] Touch-optimized mobile interface [ ] Load testing for 50+ concurrent participants [ ] Advanced security features implemented Phase 4 Success Criteria [ ] Full Islamic content integration [ ] Beautiful Islam cross-application asset sharing [ ] Multi-language interface (Arabic RTL, English, Urdu RTL) [ ] Cultural appropriateness validation [ ] Advanced theming and customization Phase 5 Success Criteria [ ] Load testing for 100+ concurrent users [ ] Cross-browser compatibility (Chrome, Firefox, Edge, Safari) [ ] Security audit and penetration testing complete [ ] User acceptance testing with Islamic content experts [ ] Performance optimization to <1s page load times Phase 6 Success Criteria [ ] Production deployment on AHHOME server infrastructure [ ] SSL certificates and security configuration complete [ ] Database migration to production environment [ ] Monitoring and alerting systems operational [ ] Go-live with real Islamic content sessions Risk Management Technical Risks Performance: Real-time collaboration with many participants Security: Session isolation and Islamic content protection Integration: Cross-application compatibility with Beautiful Islam Scalability: Database performance with concurrent sessions Mitigation Strategies Performance: Load testing and optimization throughout development Security: Security reviews and penetration testing in Phase 5 Integration: Continuous integration testing with Beautiful Islam data Scalability: Database indexing and query optimization Resource Allocation Development Resources Primary Development: GitHub Copilot with automated implementation Testing: Automated test suite with 120+ validation cases Documentation: DocFX with dual-audience approach (user/technical) Quality Assurance: Continuous integration and deployment pipeline Infrastructure Resources Development: IIS Express x64 on localhost:9091 Database: KSESSIONS_DEV and KQUR_DEV for development Production: AHHOME server with IIS and SQL Server Documentation: DocFX hosted documentation site This implementation plan is updated automatically as phases are completed and new requirements identified."
  },
  "articles/development/phase-4-implementation-guide.html": {
    "href": "articles/development/phase-4-implementation-guide.html",
    "title": "Phase 4 Implementation Guide: NOOR Canvas Branding & Content Integration | NOOR CANVAS Documentation",
    "summary": "Phase 4 Implementation Guide: NOOR Canvas Branding & Content Integration Overview Phase 4 focuses on integrating the official NOOR Canvas branding assets and implementing the streamlined host workflow, removing the intermediate Host Dashboard in favor of direct access to session creation. \uD83C\uDFA8 Branding Assets Integration Header Image Integration Source: Workspaces/Documentation/IMPLEMENTATIONS/NC-Assets/NC-Header.png Target Locations: Main application header (Views/Shared/_Layout.cshtml) Landing page header (Pages/Landing.razor) Host authentication pages (Pages/Host.razor) Session creation interface (Pages/CreateSession.razor) Implementation Requirements: <!-- Replace existing header with NOOR Canvas branded header --> <header class=\"noor-header\"> <img src=\"~/images/NC-Header.png\" alt=\"NOOR Canvas\" class=\"header-image\" /> </header> Logo Integration Source: Workspaces/Documentation/IMPLEMENTATIONS/NC-Assets/NC-Logo.png Target Locations: Navigation bar logo Favicon (convert to .ico format) Loading screens Authentication pages Email templates (future) Implementation Requirements: <!-- Navigation logo --> <img src=\"~/images/NC-Logo.png\" alt=\"NOOR Canvas Logo\" class=\"nav-logo\" /> <!-- Favicon --> <link rel=\"icon\" type=\"image/png\" href=\"~/images/NC-Logo.png\" /> \uD83D\uDD04 Host Workflow Streamlining Changes Implemented Removed: /host/dashboard route and HostDashboard.razor component Updated: Host authentication now routes directly to /host/session/create Simplified: Host login → Immediate access to Album/Category/Session dropdowns Before vs. After Flow Before (Complex): Host Login → Host Dashboard → Create Session → Select Album/Category/Session After (Streamlined): Host Login → Create Session (Direct) → Select Album/Category/Session Code Changes Made Host.razor: Updated navigation to Navigation.NavigateTo($\"/host/session/create?guid={guid}\"); CreateSession.razor: Removed redirect back to dashboard after session creation HostController.cs: Removed /api/host/dashboard endpoint and related classes Routing: Eliminated intermediate dashboard step \uD83D\uDCF1 Mobile Responsiveness The McBeatch theme framework provides built-in responsive design for: Touch-friendly session creation interface Mobile-optimized album/category/session selection dropdowns Responsive header and logo scaling Mobile navigation patterns \uD83C\uDFAF Implementation Tasks Phase 4.1: Asset Integration (Week 13) [ ] Copy NC-Header.png and NC-Logo.png to wwwroot/images/ [ ] Update main layout to use NOOR Canvas header [ ] Replace existing logos with NC-Logo.png [ ] Create favicon from NC-Logo.png [ ] Update CSS for proper header/logo sizing and positioning Phase 4.2: UX Validation (Week 14) [ ] Test complete host authentication → session creation flow [ ] Validate mobile responsiveness with new branding [ ] Ensure consistent branding across all pages [ ] Test album/category/session dropdown functionality Phase 4.3: Content Integration (Week 15) [ ] Integrate Beautiful Islam asset referencing [ ] Implement Islamic content display patterns [ ] Add multi-language support foundation (Arabic RTL, English LTR, Urdu RTL) [ ] Optimize content loading performance Phase 4.4: Testing & Polish (Week 16) [ ] Cross-browser compatibility testing [ ] Mobile device testing [ ] Performance optimization [ ] Final branding consistency review \uD83D\uDD27 Technical Notes Asset Optimization Optimize PNG files for web delivery Implement responsive image sizing Add proper alt text for accessibility Consider WebP format for better compression CSS Integration .noor-header { width: 100%; max-height: 120px; overflow: hidden; } .header-image { width: 100%; height: auto; object-fit: cover; } .nav-logo { height: 40px; width: auto; } @media (max-width: 768px) { .header-image { max-height: 80px; } .nav-logo { height: 32px; } } Performance Considerations Use CSS sprites for small logos Implement lazy loading for large header images Compress images without quality loss Add proper caching headers \uD83D\uDE80 Success Criteria Branding Consistency: All pages display NOOR Canvas branding elements consistently Streamlined UX: Host authentication leads directly to session creation without intermediate steps Mobile Optimization: All branding elements scale properly on mobile devices Performance: Page load times remain under 2 seconds with new assets Accessibility: All images have proper alt text and meet WCAG guidelines \uD83D\uDCCB Validation Checklist [ ] NC-Header.png displays correctly on all pages [ ] NC-Logo.png appears in navigation and favicon [ ] Host login → CreateSession flow works seamlessly [ ] No broken links to removed Host Dashboard [ ] Mobile responsiveness maintained [ ] Cross-browser compatibility verified [ ] Performance benchmarks met [ ] Accessibility standards compliance Last Updated: September 14, 2025 Status: Ready for Implementation Phase: 4 - Content & Styling Dependencies: Phase 1-3 completion (✅ Complete)"
  },
  "articles/development/testing-procedures.html": {
    "href": "articles/development/testing-procedures.html",
    "title": "Testing Procedures | NOOR CANVAS Documentation",
    "summary": "Testing Procedures Overview NOOR Canvas implements a comprehensive testing strategy that includes unit tests, integration tests, and automated testing workflows. This document covers all testing procedures and best practices. Test Categories Unit Tests Location: Tests/NoorCanvas.Core.Tests/ Purpose: Test individual components in isolation Framework: xUnit.NET with Moq for mocking # Run unit tests only dotnet test Tests/NoorCanvas.Core.Tests/ --filter Category=Unit Integration Tests Location: Tests/NC-ImplementationTests/ Purpose: Test component interactions and system integration Framework: xUnit.NET with ASP.NET Core Test Host # Run integration tests only dotnet test Tests/NC-ImplementationTests/ --filter Category=Integration End-to-End Tests Location: Tests/NC-E2ETests/ (when implemented) Purpose: Test complete user workflows Framework: Playwright or Selenium Automated Testing Workflow Automatic Test Execution Tests run automatically in two scenarios: 1. Post-Build Testing # Tests run automatically after successful build dotnet build # Triggers automatic test execution 2. Pre-Commit Testing # Tests run automatically before commit git add . git commit -m \"feature: add new functionality\" # Tests execute automatically to validate commit Manual Test Execution # Run all tests manually dotnet test # Run tests with verbose output dotnet test --logger \"console;verbosity=detailed\" # Run specific test project dotnet test Tests/NoorCanvas.Core.Tests/ # Run tests matching pattern dotnet test --filter \"FullyQualifiedName~SessionController\" Test Organization Test Project Structure Tests/ ├── NoorCanvas.Core.Tests/ # Unit tests │ ├── Controllers/ # Controller tests │ ├── Services/ # Service tests │ ├── Models/ # Model tests │ └── Utilities/ # Test utilities ├── NC-ImplementationTests/ # Integration tests │ ├── DatabaseTests/ # Database integration │ ├── ApiTests/ # API endpoint tests │ ├── SignalRTests/ # Real-time communication │ └── AuthenticationTests/ # Token and auth tests └── NC-E2ETests/ # End-to-end tests (future) ├── UserWorkflows/ # Complete user scenarios ├── CrossBrowser/ # Browser compatibility └── Performance/ # Performance benchmarks Test Naming Conventions // Unit test naming: MethodName_Scenario_ExpectedBehavior [Fact] public void CreateSession_ValidInput_ReturnsSessionId() // Integration test naming: Component_Scenario_ExpectedResult [Fact] public void HostController_AuthenticateToken_ReturnsSuccess() // End-to-end test naming: UserStory_Scenario_ExpectedOutcome [Fact] public void CreateSessionWorkflow_ValidHost_SessionCreatedSuccessfully() Writing Effective Tests Unit Test Best Practices 1. Test Structure (Arrange-Act-Assert) [Fact] public void GenerateHostToken_ValidRequest_ReturnsGuid() { // Arrange var service = new HostTokenService(); var request = new GenerateTokenRequest { CreatedBy = \"Test User\" }; // Act var result = service.GenerateToken(request); // Assert Assert.NotNull(result); Assert.True(Guid.TryParse(result.Token, out _)); } 2. Mocking Dependencies [Fact] public void GetSessions_DatabaseUnavailable_ThrowsException() { // Arrange var mockContext = new Mock<CanvasDbContext>(); mockContext.Setup(x => x.Sessions).Throws(new InvalidOperationException()); var controller = new SessionController(mockContext.Object); // Act & Assert Assert.Throws<InvalidOperationException>(() => controller.GetSessions()); } 3. Test Data Management public class TestDataBuilder { public static Session CreateValidSession() { return new Session { Id = Guid.NewGuid(), HostToken = Guid.NewGuid().ToString(), Status = SessionStatus.Active, CreatedAt = DateTime.UtcNow }; } } Integration Test Best Practices 1. Database Testing [Fact] public async Task CreateSession_DatabaseIntegration_PersistsCorrectly() { // Arrange using var context = CreateTestDbContext(); var service = new SessionService(context); var request = new CreateSessionRequest { /* properties */ }; // Act var sessionId = await service.CreateSessionAsync(request); // Assert var savedSession = await context.Sessions.FindAsync(sessionId); Assert.NotNull(savedSession); Assert.Equal(request.HostToken, savedSession.HostToken); } 2. API Testing [Fact] public async Task CreateSession_ApiEndpoint_ReturnsCreatedStatus() { // Arrange using var client = _factory.CreateClient(); var request = new CreateSessionRequest { /* properties */ }; // Act var response = await client.PostAsJsonAsync(\"/api/sessions\", request); // Assert Assert.Equal(HttpStatusCode.Created, response.StatusCode); var session = await response.Content.ReadFromJsonAsync<Session>(); Assert.NotNull(session); } 3. SignalR Testing [Fact] public async Task SessionHub_SendMessage_BroadcastsToClients() { // Arrange using var connection = await StartConnectionAsync(); var receivedMessages = new List<string>(); connection.On<string>(\"MessageReceived\", message => receivedMessages.Add(message)); // Act await connection.InvokeAsync(\"SendMessage\", \"Test message\"); // Assert await Task.Delay(100); // Allow message processing Assert.Contains(\"Test message\", receivedMessages); } Test Data Management Test Database Setup public class TestDbContextFactory { public static CanvasDbContext CreateInMemoryContext() { var options = new DbContextOptionsBuilder<CanvasDbContext>() .UseInMemoryDatabase(databaseName: Guid.NewGuid().ToString()) .Options; return new CanvasDbContext(options); } public static async Task SeedTestDataAsync(CanvasDbContext context) { // Add standard test data context.Sessions.AddRange(CreateTestSessions()); context.Participants.AddRange(CreateTestParticipants()); await context.SaveChangesAsync(); } } Test Configuration // appsettings.Testing.json { \"ConnectionStrings\": { \"DefaultConnection\": \"Server=(localdb)\\\\mssqllocaldb;Database=NOOR_Canvas_Test;Trusted_Connection=true;\", \"KSessionsDb\": \"Server=(localdb)\\\\mssqllocaldb;Database=KSESSIONS_Test;Trusted_Connection=true;\" }, \"Logging\": { \"LogLevel\": { \"Default\": \"Warning\", \"Microsoft\": \"Warning\" } } } Test Execution Strategies Parallel Test Execution <!-- In test project files --> <PropertyGroup> <ParallelizeTestCollections>true</ParallelizeTestCollections> <MaxParallelThreads>4</MaxParallelThreads> </PropertyGroup> Test Categories and Filtering [Fact] [Trait(\"Category\", \"Unit\")] [Trait(\"Component\", \"SessionController\")] public void CreateSession_ValidInput_ReturnsSuccess() { // Test implementation } # Run by category dotnet test --filter \"Category=Unit\" # Run by component dotnet test --filter \"Component=SessionController\" # Run by trait combination dotnet test --filter \"Category=Integration&Component=Database\" Test Performance Monitoring [Fact] public void DatabaseQuery_Performance_CompletesWithinTimeout() { // Arrange var stopwatch = Stopwatch.StartNew(); // Act var result = _service.GetSessions(); // Assert stopwatch.Stop(); Assert.True(stopwatch.ElapsedMilliseconds < 1000, \"Query took too long\"); } Continuous Testing Integration Pre-Commit Hook Testing # .hooks/pre-commit-test.ps1 (automatic execution) # Runs comprehensive test suite before allowing commits # Uses smart caching to skip redundant test execution # Prevents broken code from entering repository Build Pipeline Testing # .github/workflows/build-and-test.yml - name: Run Tests run: | dotnet test --configuration Release dotnet test --logger trx --results-directory TestResults/ Test Result Reporting # Generate test coverage report dotnet test --collect:\"XPlat Code Coverage\" # Convert to readable format reportgenerator -reports:**/coverage.cobertura.xml -targetdir:CoverageReport Test Maintenance Updating Tests for Code Changes Refactoring: Update tests when refactoring code New Features: Add tests for new functionality Bug Fixes: Add regression tests for fixed bugs Deprecation: Remove or update tests for deprecated features Test Code Quality // Good: Clear, specific test [Fact] public void CalculateSessionDuration_OneHourSession_ReturnsCorrectDuration() // Bad: Vague, unclear test [Fact] public void TestSession() Test Performance Optimization Fast Tests: Keep unit tests under 100ms Isolated Tests: Avoid dependencies between tests Cleanup: Properly dispose resources in tests Mocking: Use mocks to avoid expensive operations Troubleshooting Test Issues Common Test Failures Database Connection Issues // Solution: Use in-memory database for unit tests services.AddDbContext<CanvasDbContext>(options => options.UseInMemoryDatabase(\"TestDb\")); Timing Issues // Solution: Use proper async/await patterns await Task.Delay(100); // Allow async operations to complete Resource Cleanup // Solution: Implement proper disposal public void Dispose() { _context?.Dispose(); _httpClient?.Dispose(); } Test Debugging Debug Individual Tests # Run specific test in debug mode dotnet test --filter \"FullyQualifiedName=NamespaceName.ClassName.TestMethodName\" --logger console Test Output Debugging [Fact] public void TestWithOutput(ITestOutputHelper output) { output.WriteLine($\"Debug info: {variable}\"); // Test implementation } Quality Metrics and Reporting Code Coverage Target: Maintain >80% code coverage Measurement: Use dotnet test with code coverage collection Reporting: Generate HTML reports for detailed analysis Test Success Metrics Build Success Rate: >95% of builds should pass tests Test Execution Time: Keep total test time under 5 minutes Flaky Test Rate: <2% of tests should be flaky Quality Gates Before merging code: [ ] All tests must pass [ ] Code coverage must not decrease [ ] No new test warnings [ ] Performance tests within acceptable limits For comprehensive technical details, see the Testing Framework Technical Reference."
  },
  "articles/implementation/issues-todo-tracking.html": {
    "href": "articles/implementation/issues-todo-tracking.html",
    "title": "NOOR Canvas Issues & TODO Tracking | NOOR CANVAS Documentation",
    "summary": "NOOR Canvas Issues & TODO Tracking Last Updated: September 15, 2025 Active Issues: 2 Critical, 1 In Progress Completed TODOs: 2 Major Items Overall Health: \uD83D\uDFE1 Good - Minor blockers, strong progress \uD83D\uDEA8 Critical Issues (Immediate Attention Required) ❌ Issue-53: CreateSession HttpClient BaseAddress Error Priority: \uD83D\uDD25 CRITICAL - Blocking session creation workflow Status: ❌ Not Started - Requires immediate attention Impact: Prevents session creation after host authentication Problem Summary: CreateSession.razor component fails to initialize after successful host authentication due to HttpClient BaseAddress configuration issue. Technical Details: // ❌ BROKEN PATTERN (Current Issue) @inject HttpClient Http var response = await Http.GetFromJsonAsync(\"api/endpoint\"); // Fails: BaseAddress not set // ✅ REQUIRED FIX (Proven Working) @inject IHttpClientFactory HttpClientFactory using var httpClient = HttpClientFactory.CreateClient(\"default\"); var response = await httpClient.GetFromJsonAsync(\"api/endpoint\"); Root Cause: CreateSession component using direct HttpClient injection (anti-pattern) HttpClientFactory pattern works in Landing.razor and Host.razor Albums dropdown fails to load from KSESSIONS database Resolution Requirements: Update CreateSession.razor - Replace HttpClient with HttpClientFactory pattern Test Album Loading - Verify KSESSIONS database connectivity Validate Session Creation - End-to-end session creation workflow Update Documentation - Document HttpClientFactory as standard pattern Business Impact: Host Experience Broken - Hosts cannot create new sessions Development Blocked - Phase 4 progress depends on session creation User Testing Impossible - Cannot demonstrate core functionality ❌ Issue: Dual URL Architecture Implementation Priority: \uD83D\uDD25 CRITICAL - Major architectural change required Status: ❌ Not Started - New requirement (September 15, 2025) Complexity: High - Database schema changes and routing overhaul Architectural Change Required: Current System (Needs Replacement): Single landing page: https://localhost:9091/ GUID-exposed URLs: https://localhost:9091/join/5ec82d65-2f89-... Dual authentication panels on same page Target System (Implementation Required): Host URL: https://localhost:9091/host/P7X9K2M4 User URL: https://localhost:9091/user/H5T3R8W6 Clean 8-character tokens, no GUID exposure Implementation Requirements: Database Schema Changes: Create SecureTokens table with Host/User token pairs Token lifecycle management (creation, expiry, revocation) Audit trail for security compliance Token Generation Service: 8-character human-friendly tokens (A-Z, 2-9 character set) Exclude confusing characters (0/O, 1/I) for phone/SMS sharing Cryptographically secure randomization Collision detection and retry logic URL Routing System: /host/{token} endpoint with Host authentication /user/{token} endpoint with User welcome experience Token validation middleware Proper error handling for invalid/expired tokens Landing Page Architecture: Split current unified landing page Host-only landing page (remove User card) User Welcome page (convert from User Welcome.html mock) Maintain responsive design and animations HostProvisioner Integration: Enhanced Output Format: ====================================================== SessionID: 215 Host URL: https://localhost:9091/host/P7X9K2M4 User URL: https://localhost:9091/user/H5T3R8W6 ====================================================== Security & UX Benefits: No GUID Exposure - Completely opaque 8-character tokens Human-Friendly - Easy to share via phone/SMS Professional URLs - Clean, short format for business use Enhanced Security - Expirable tokens with revocation capability SMS-Friendly - Fits easily in text messages (40 characters total) Implementation Complexity: Database Migration Required - Schema changes with data preservation Routing Changes - Major URL structure modification Component Refactoring - Landing page split and authentication flow Security Implementation - Token generation and validation systems Testing Requirements - Comprehensive security and UX testing ⚡ Issues In Progress ⚡ Phase 4: External Library Integration Priority: \uD83D\uDFE1 Medium - Required for CSS implementation Status: ⚡ In Progress - Week 13 Day 3-4 Completion Target: September 18, 2025 Current Progress: ✅ Directory Structure Planned - lib/tailwind, lib/fontawesome, lib/fonts/inter ✅ Download Commands Ready - PowerShell script prepared for execution \uD83D\uDD04 Integration In Progress - Local asset download and configuration Remaining Work: Execute Download Script - Download 4.8MB of external libraries locally Update Layout Files - Replace CDN references with local assets Validation Testing - Ensure offline functionality and correct loading Project Configuration - Update .csproj to exclude development files Libraries Being Integrated: Tailwind CSS v3.4 (~3.4MB) - Complete utility class library Font Awesome 6.5.1 (~1.2MB + WebFonts) - Icon system Google Fonts Inter (~200KB) - Typography system (weights 400-700) ✅ Recently Completed TODOs ✅ TODO-1: COPILOT-WORKSPACE-INSTRUCTIONS.md TODO Handling Completed: September 15, 2025 Implementation Summary: Updated workspace instructions to track TODO prompts in IMPLEMENTATION-TRACKER.MD using exact same format as issues. Key Changes Applied: Tracking Location Changed - From NC-ISSUE-TRACKER.MD → IMPLEMENTATION-TRACKER.MD Documentation Format - TODOs get detailed sections with technical implementation Lifecycle Management - Same status progression as issues (❌ → ⚡ → ⏳ → ✅) History Preservation - Completed TODOs preserved as implementation history Technical Impact: Unified Documentation - All implementation work in single comprehensive document Enhanced Tracking - Full lifecycle management with visual status indicators Single Source of Truth - IMPLEMENTATION-TRACKER.MD as canonical development reference ✅ TODO-2: NCDOC Orphaned Windows Issue Resolution Completed: September 15, 2025 Implementation Summary: Complete elimination of orphaned PowerShell windows when serving DocFX documentation. Problem Resolved: Original Issue - ncdoc created persistent PowerShell windows using Start-Process -NoExit User Impact - Orphaned windows cluttered taskbar, required manual cleanup Technical Debt - Complex parent-child process relationships, difficult server management Solution Implemented: Background Jobs - Replaced Start-Process with Start-Job for invisible execution Enhanced Tracking - Job ID format instead of PID-only tracking Simplified Architecture - Removed Python HTTP server, DocFX serve as primary Clean Termination - Proper job lifecycle management Technical Changes: # Before (Problematic) $proc = Start-Process -FilePath $psExe -ArgumentList $args -WindowStyle Minimized # After (Clean) $job = Start-Job -ScriptBlock { param($docfxPath, $port) Set-Location $docfxPath & docfx serve _site --port $port } -ArgumentList $docfxRoot, $Port User Experience Impact: ✅ Zero Window Clutter - No orphaned PowerShell windows in taskbar ✅ Clean Background Operation - Server runs invisibly without user interaction ✅ Reliable Termination - ncdoc -Stop properly cleans up background jobs ✅ Same Interface - All existing parameters and functionality preserved \uD83D\uDCCB Upcoming TODOs (Planned) \uD83D\uDD04 TODO-3: External Library Integration (Week 13) Priority: \uD83D\uDFE1 Medium - Prerequisite for CSS implementation Status: \uD83D\uDD04 In Progress - Currently being executed Target Completion: September 18, 2025 Implementation Plan: Execute Download Script - Download Tailwind CSS, Font Awesome, Inter fonts Directory Organization - Structured lib/ folder with proper asset organization Layout Integration - Update _Layout.cshtml with local asset references Validation Testing - Offline functionality and correct asset loading ⏳ TODO-4: CSS Modular Architecture Implementation (Week 13-14) Priority: \uD83D\uDFE1 Medium - Core Phase 4 deliverable Status: ⏳ Awaiting - Depends on TODO-3 completion Target Completion: September 25, 2025 Planned Deliverables: 6 Modular CSS Files - Page-specific styling based on design mocks CSS Architecture - Color variables, typography system, layout utilities Component Integration - Apply styling to existing Blazor components Responsive Validation - Mobile and desktop breakpoint testing ⏳ TODO-5: SecureTokens Database Schema (Week 15) Priority: \uD83D\uDD25 High - Critical for Dual URL Architecture Status: ❌ Not Started - Major architectural change Target Completion: October 2, 2025 Implementation Requirements: Database Table Creation - SecureTokens with Host/User token pairs Migration Scripts - EF Core migration for schema changes Token Service Implementation - 8-character secure token generation Validation Middleware - Token authentication and expiry handling \uD83D\uDCCA Progress Dashboard Issue Resolution Health Critical Issues: 2 (Need immediate attention) In Progress Issues: 1 (On track) Recently Resolved: 2 major TODOs completed Overall Status: \uD83D\uDFE1 Good with minor blockers Key Success Metrics Phase 3 Completion: ✅ 100% - All advanced features delivered Phase 4 Progress: \uD83D\uDD04 25% - Week 13 initial deliverables complete Backend Stability: ✅ 95% - Core infrastructure operational Frontend Progress: \uD83D\uDD04 70% - UI framework ready, styling in progress Tool Integration: ✅ 90% - Command suite enhanced and operational Technical Debt Status Code Quality: \uD83D\uDFE2 Good - Enhanced debug infrastructure implemented Documentation: \uD83D\uDFE2 Excellent - Comprehensive tracking and user guides Testing Coverage: \uD83D\uDFE1 Moderate - 120+ test cases, needs expansion for new features Performance: \uD83D\uDFE2 Good - Target metrics being achieved \uD83C\uDFAF Action Items & Next Steps Immediate Priorities (This Week) Issue-53 Resolution - Fix CreateSession HttpClient pattern (\uD83D\uDD25 CRITICAL) External Library Integration - Complete TODO-3 local asset download CSS Architecture Planning - Prepare for modular CSS implementation Short-term Goals (Next 2 Weeks) Complete Phase 4 Week 13 - External libraries and initial CSS files Begin Dual URL Architecture - Database schema design and planning Component Styling - Apply NOOR Canvas branding to existing components Long-term Objectives (Phase 4 Completion) Visual Design Implementation - Pixel-perfect mock reproduction Security Enhancement - Complete token-based authentication system Performance Optimization - CSS loading and animation performance Documentation Completion - Final user guides and technical references Summary: Strong technical foundation with 2 critical issues requiring immediate attention. Phase 4 CSS implementation progressing well with enhanced debug infrastructure and completed TODO items. Dual URL architecture represents significant scope expansion requiring careful planning and execution."
  },
  "articles/implementation/phase4-current-progress.html": {
    "href": "articles/implementation/phase4-current-progress.html",
    "title": "Phase 4 Implementation Details - NOOR Canvas Branding | NOOR CANVAS Documentation",
    "summary": "Phase 4 Implementation Details - NOOR Canvas Branding Current Phase: Phase 4 - NOOR Canvas Branding & Content Integration Duration: September 14 - October 11, 2025 (4 weeks) Progress: Week 1 - External Library Integration & Mock Styling \uD83D\uDCCA Phase 4 Progress Dashboard Overall Phase Completion: 25% Week Focus Area Status Progress Week 13 (Sep 14-20) External Library Integration & Mock Styling \uD83D\uDD04 In Progress 25% Week 14 (Sep 21-27) CSS Implementation & Component Styling ⏳ Pending 0% Week 15 (Sep 28-Oct 4) Dual URL Architecture Implementation ⏳ Pending 0% Week 16 (Oct 5-11) Testing & Phase Completion ⏳ Pending 0% ✅ Completed Work (Week 13 - Days 1-2) Enhanced Debug Infrastructure ✅ COMPLETED Date: September 14, 2025 What Was Delivered: ✅ DebugService v2.0 - Comprehensive debugging and diagnostics service ✅ Debug Extensions - Extension methods for enhanced development experience ✅ Debug Middleware - Request/response logging and performance tracking ✅ Debug Configuration - Environment-specific debug settings management ✅ McBeatch Theme Removal - Complete cleanup of legacy styling system Technical Impact: Clean Codebase: Reset to clean state with enhanced debugging capabilities Development Efficiency: Improved diagnostic tools for faster issue resolution Performance Monitoring: Built-in request tracking and performance metrics Environment Management: Proper debug configuration for development vs production Design Mock Analysis ✅ COMPLETED Date: September 14, 2025 Comprehensive Mock Analysis Results: 5 HTML Design Mocks analyzed for styling requirements Color Scheme Identified: Inter font family, Tailwind CSS color palette Layout Patterns Documented: Purple borders, rounded corners, shadow effects Icon System Specified: Font Awesome 6.5.1 exclusively Responsive Strategy: Mobile-first approach with breakpoint specifications Key Findings: /* Common Design Patterns Identified */ - Purple Borders: border-4 border-purple-500 - Rounded Corners: rounded-xl - Shadow Effects: shadow-lg - Typography: Inter font family (weights 400-700) - Layout: Flexbox with responsive breakpoints (md:flex-row) - Animations: Transform hover effects (hover:scale-1.05) Issue-67: Landing Page UX Enhancement ✅ COMPLETED Date: September 14, 2025 Implementation Summary: Complete 2-step landing page UX with modern card animations successfully delivered. Key Features Delivered: Content Unification - Both cards use unified \"Enter The Access Token\" messaging Enhanced Button Styling - Increased icon size (1.125rem) with improved spacing Dynamic Card Centering - Selected card centers during Step 2 transition Modern Animation System - CSS-based transforms with hardware acceleration Technical Implementation: CSS Classes: .noor-step-2 for centering, enhanced .noor-btn i styling Component Logic: GetCardClasses() method for dynamic state management Performance: Hardware-accelerated transforms with will-change optimization Accessibility: Respects prefers-reduced-motion user preferences \uD83D\uDD04 Current Work In Progress Week 13 Priority 1: External Library Integration Status: \uD83D\uDD04 In Progress - Day 3-4 of Week 13 Completion Target: September 18, 2025 Libraries Required for Mock Accuracy: 1. Tailwind CSS v3.4 (~3.4MB) Source: https://cdn.tailwindcss.com/3.4.0 Purpose: Complete utility class library used across all 5 design mocks Integration: Local CSS file eliminates CDN dependencies 2. Font Awesome 6.5.1 (~1.2MB + WebFonts) Source: https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/ Files Required: CSS + 6 WebFont files (WOFF2, WOFF formats) Purpose: Icon system used consistently across all design mocks 3. Google Fonts Inter (~200KB) Source: Google Fonts API for weights 400, 500, 600, 700 Purpose: Primary typography system for all NOOR Canvas interfaces Integration: Local font files with CSS @font-face declarations Integration Commands Ready: # Navigate to project directory cd \"d:\\PROJECTS\\NOOR CANVAS\\SPA\\NoorCanvas\\wwwroot\" # Create organized library directories New-Item -ItemType Directory -Path \"lib\\tailwind\" -Force New-Item -ItemType Directory -Path \"lib\\fontawesome\" -Force New-Item -ItemType Directory -Path \"lib\\fontawesome\\webfonts\" -Force New-Item -ItemType Directory -Path \"lib\\fonts\\inter\" -Force # Download commands prepared for immediate execution Benefits of Local Integration: ✅ Production Independence - No external CDN dependencies ✅ Offline Development - Application works without internet connection ✅ Performance Improvement - Faster loading from local assets ✅ Security Enhancement - Eliminates external request vulnerabilities ✅ Mock Accuracy - Exact styling preservation from design specifications \uD83D\uDCCB Upcoming Work (Week 13-16) Week 13 Priority 2: Mock Styling Extraction Target: September 19-20, 2025 6 Modular CSS Files to Create: noor-canvas-core.css (~150 lines) - Base styling for all pages noor-host-control-panel.css (~200 lines) - Dual-panel layout & controls noor-user-welcome.css (~160 lines) - Registration form & welcome interface noor-waiting-room.css (~180 lines) - Progress bars & participant management noor-canvas-experience.css (~220 lines) - Live session interface & Q&A noor-landing-page.css (~140 lines) - Hero section & feature presentation CSS Architecture Specifications: Color Variables: CSS custom properties for NOOR Canvas brand colors Typography System: Inter font integration with proper weight declarations Layout Utilities: Flexbox and grid systems matching mock designs Interactive Elements: Hover effects, transitions, and animation systems Responsive Design: Mobile-first breakpoints with desktop enhancements Week 14: CSS Implementation & Component Integration Target: September 21-27, 2025 Planned Deliverables: Layout File Updates - Integration of all CSS files in _Layout.cshtml Component Styling - Apply modular CSS to existing Blazor components Responsive Testing - Validate all breakpoints across devices Cross-browser Validation - Ensure consistent rendering across browsers Week 15: Dual URL Architecture Implementation Target: September 28 - October 4, 2025 Major Architectural Change: Current System: Single landing page: https://localhost:9091/ Dual authentication panels on same page New System: Separate Host URL: https://localhost:9091/host/P7X9K2M4 Separate User URL: https://localhost:9091/user/H5T3R8W6 Implementation Requirements: Database Schema: SecureTokens table for Host/User token pairs Token Service: 8-character human-friendly token generation (A-Z, 2-9) URL Routing: /host/{token} and /user/{token} endpoint handlers Landing Page Split: Separate Host and User experiences HostProvisioner Integration: Enhanced output format with dual URLs Week 16: Testing & Phase Completion Target: October 5-11, 2025 Final Phase 4 Validation: Visual Regression Testing - Ensure design mock accuracy Responsive Design Validation - All breakpoints tested Performance Testing - CSS loading and rendering performance Security Testing - Token generation and validation systems Documentation Updates - Complete Phase 4 implementation guide \uD83D\uDEA8 Critical Dependencies & Risks External Dependencies Internet Connection Required - For initial library downloads only DocFX Integration - CSS files must integrate with existing documentation Browser Compatibility - Modern CSS features require recent browser versions Technical Risks Mock Accuracy Challenge - Pixel-perfect implementation complexity Performance Impact - Large CSS files may affect load times Responsive Breakpoints - Complex layout requirements across devices Token System Security - Cryptographic randomness and collision detection Mitigation Strategies Mock Validation - Side-by-side comparison with original designs CSS Optimization - Minification and critical path optimization Progressive Enhancement - Graceful degradation for older browsers Security Review - Cryptographic audit of token generation system \uD83C\uDFAF Success Criteria Phase 4 Completion Requirements: ✅ Visual Fidelity - 95%+ accuracy to original design mocks ✅ Performance Benchmarks - Page load times under 2 seconds ✅ Responsive Excellence - Flawless operation on mobile and desktop ✅ Security Standards - Secure token system with proper audit trail ✅ Documentation Quality - Complete implementation and user guides Key Performance Indicators: CSS File Size - Target under 500KB total for all modular files Font Loading - Inter font renders within 100ms on first visit Animation Performance - 60fps for all transitions and interactions Token Generation - Under 50ms for secure token creation Current Status: Week 13 progressing well with enhanced debug infrastructure and Issue-67 completed. External library integration is the immediate priority to unblock CSS implementation work in remaining Week 13 activities."
  },
  "articles/implementation/project-status-overview.html": {
    "href": "articles/implementation/project-status-overview.html",
    "title": "NOOR Canvas Implementation Status Overview | NOOR CANVAS Documentation",
    "summary": "NOOR Canvas Implementation Status Overview Last Updated: September 15, 2025 Project Version: 3.1 - Major Architectural Revision Current Phase: Phase 4 - Dual URL Architecture Implementation \uD83C\uDFAF Project Summary NOOR Canvas is an Islamic Content Sharing Platform built with modern web technologies, designed for real-time collaborative learning and annotation of Islamic content (Qur'an, Hadith, Etymology, and Poetry). Key Statistics Timeline: 20 weeks across 6 development phases Architecture: ASP.NET Core 8.0 + Blazor Server + SignalR + SQL Server Backend Progress: 95% Complete Frontend Progress: 70% Complete Tools & DevOps: 90% Complete \uD83C\uDFD7️ Architecture Overview Core Technology Stack Component Technology Status Web Framework ASP.NET Core 8.0 ✅ Complete Frontend Blazor Server \uD83D\uDD04 In Progress Real-time Communication SignalR (3 Hubs) ✅ Complete Database SQL Server + Entity Framework Core ✅ Complete Authentication GUID-based Session Validation ✅ Complete Documentation DocFX + Auto-generated API docs ✅ Complete Database Architecture Canvas Schema: 13 tables with 2 applied migrations KSESSIONS Integration: Read-only access for Albums/Categories/Sessions Development Environment: KSESSIONS_DEV, KQUR_DEV databases Connection: Optimized with 1-hour timeout for long operations \uD83D\uDCC8 Phase-by-Phase Progress ✅ Phase 1: Foundation (Weeks 1-3) - COMPLETED 100% Duration: September 2025 Focus: Project setup, database schema, and development environment Completed Deliverables: ✅ ASP.NET Core 8.0 Project Setup - Full project structure established ✅ Database Schema Implementation - Canvas schema with 13 tables ✅ SignalR Hub Configuration - Real-time communication foundation ✅ Development Environment - Ports 9090/9091 configured ✅ Health Monitoring System - NOOR Observer integration ✅ Automated Testing Framework - Comprehensive test structure ✅ Phase 2: Core Platform (Weeks 4-8) - COMPLETED 100% Duration: September 2025 Focus: Session management, authentication, and basic UI framework Completed Deliverables: ✅ Session Management System - Backend models and API controllers ✅ Host Authentication Infrastructure - HostController + HostProvisioner tool ✅ Bootstrap Foundation - Clean CSS architecture (McBeatch theme removed) ✅ Database Integration - KSessionsDbContext for cross-application data ✅ CSS Architecture - Ready for custom NOOR Canvas styling Known Issues: ❌ CreateSession.razor HttpClient Issue - Issue-53 (BaseAddress configuration) ❌ Participant Registration UX - ParticipantRegister.razor incomplete ✅ Phase 3: Advanced Features (Weeks 9-12) - COMPLETED 100% Duration: September 2025 Focus: Real-time features, Q&A system, and performance optimization Completed Deliverables: ✅ 3 SignalR Hubs - SessionHub, AnnotationHub, QAHub ✅ Real-time Annotation Tools - Foundation for collaborative annotations ✅ Q&A System Backend - Question/QuestionAnswer models ✅ SSL Configuration - TrustServerCertificate=true for development ✅ Host UX Streamlining - Direct CreateSession routing ✅ Performance Foundation - Basic optimization and structured logging Key Development Breakthrough: HttpClientFactory Pattern Established - Resolved authentication infrastructure // ✅ CORRECT PATTERN (Working) @inject IHttpClientFactory HttpClientFactory using var httpClient = HttpClientFactory.CreateClient(\"default\"); var response = await httpClient.GetFromJsonAsync(\"api/endpoint\"); \uD83D\uDEA7 Phase 4: NOOR Canvas Branding (Weeks 13-16) - IN PROGRESS Duration: September 14 - October 11, 2025 Focus: Custom CSS implementation and NOOR Canvas visual identity ✅ Completed in Phase 4: ✅ Enhanced Debug Infrastructure v2.0 - DebugService, Extensions, Middleware ✅ McBeatch Theme Removal - Clean codebase reset ✅ Design Mock Analysis - 5 HTML mocks analyzed for styling requirements ✅ Issue-67 Landing Page UX - Modern 2-step card animations \uD83D\uDD04 Currently In Progress: \uD83D\uDD04 External Library Integration - Tailwind CSS, Font Awesome, Inter fonts \uD83D\uDD04 6 Modular CSS Files - Page-specific styling implementation \uD83D\uDD04 Dual URL Architecture - Separate Host/User authentication workflows \uD83D\uDCCB Remaining Phase 4 Work: ❌ CSS Implementation - 6 modular stylesheets (noor-canvas-*.css) ❌ Local Asset Integration - Download and configure external libraries ❌ Mock Styling Extraction - Pixel-perfect design implementation ❌ Responsive Design Testing - Mobile and desktop breakpoint validation \uD83D\uDEA8 Major Architectural Changes Dual URL System with Human-Friendly Tokens Status: \uD83C\uDD95 NEW REQUIREMENT - September 15, 2025 Current System (Being Replaced): Single landing page with dual authentication panels GUID-exposed URLs: https://localhost:9091/join/5ec82d65-2f89-4c05-91dd-dc9742326937 New System (Target Implementation): Separate Host and User landing pages Clean token URLs: - Host: https://localhost:9091/host/P7X9K2M4 - User: https://localhost:9091/user/H5T3R8W6 Implementation Requirements: SecureTokens Database Table - Host/User token pairs with lifecycle management 8-Character Human-Friendly Tokens - A-Z, 2-9 character set (no confusing 0/O, 1/I) Dual URL Routing - /host/{token} and /user/{token} endpoints Enhanced Security - Cryptographically random tokens with expiry and audit trail \uD83D\uDEE0️ Development Tools & Commands Global Command Suite Location: Workspaces/Global/ - Complete automation toolkit Command Purpose Status nc Primary application launcher with token generation ✅ Operational nc 215 Session-specific token generation + app launch ✅ Operational nct Standalone host token generator ✅ Operational ncdoc DocFX documentation server (port 8050) ✅ Enhanced iiskill Process cleanup utility ✅ Operational Recent Tool Enhancements NCDOC Command - Major Improvements ✅ Completed: September 15, 2025 Problem Solved: Eliminated orphaned PowerShell windows when serving documentation Key Improvements: ✅ Background Job Management - No more visible windows cluttering taskbar ✅ Port Change - Moved from 9093 to 8050 (avoiding port conflicts) ✅ Intelligent Server Detection - Reuse existing servers automatically ✅ Force Restart Capability - ncdoc -Force for clean server restart ✅ Enhanced Process Management - Job-based tracking instead of PID-only Usage: ncdoc # Start server on 8050 or reuse existing ncdoc -Force # Kill existing servers and restart fresh ncdoc -Stop # Stop documentation server cleanly ncdoc -Port 8060 # Use alternative port if needed \uD83C\uDFAF Current Development Priorities \uD83D\uDD25 Critical Issues (Immediate Attention) Issue-53: CreateSession HttpClient Pattern - Blocking session creation workflow Dual URL Architecture Implementation - Major architectural change required Phase 4 CSS Implementation - 6 modular stylesheets pending ⚡ Active Development Work External Library Integration - Tailwind CSS, Font Awesome, Inter fonts local download Mock Styling Extraction - Converting 5 HTML design mocks to CSS SecureTokens Database Schema - 8-character token system implementation \uD83D\uDCCB Upcoming Phases Phase 5: Testing & Performance (Weeks 17-18) Comprehensive Testing Suite - End-to-end test coverage Performance Optimization - Real-time annotation performance tuning Load Testing - Multi-user session capacity validation Phase 6: Deployment & Production (Weeks 19-20) IIS Deployment Configuration - Production environment setup Security Hardening - Production security review and implementation Documentation Finalization - Complete user and technical documentation \uD83C\uDFC6 Key Achievements ✅ Major Completions Backend Infrastructure: 95% complete with 8 API controllers and 3 SignalR hubs Database Architecture: Complete canvas schema with KSESSIONS integration Authentication System: Host authentication working with GUID validation Development Tools: Complete command suite with automated workflows Testing Framework: 120+ test cases with automated execution Documentation System: DocFX with auto-generated API reference \uD83D\uDD27 Technical Breakthroughs HttpClientFactory Pattern: Resolved Blazor Server API communication issues SSL Certificate Management: Development environment fully configured SignalR Real-time Architecture: 3-hub system for live collaboration Global Command Integration: Seamless development workflow automation \uD83D\uDCDA Documentation Resources Available Documentation API Reference: Auto-generated from code comments User Guides: Step-by-step operational procedures Technical Documentation: Architecture and implementation details Deployment Guides: Environment setup and configuration Development Resources Issue Tracker: IssueTracker/NC-ISSUE-TRACKER.MD - Bug and feature tracking Implementation Tracker: Workspaces/IMPLEMENTATION-TRACKER.MD - Development progress Workspace Instructions: .github/COPILOT-WORKSPACE-INSTRUCTIONS.md - Developer guide \uD83C\uDFAF Success Metrics Completed Objectives ✅ Real-time Collaboration: SignalR architecture implemented ✅ Secure Session Management: GUID-based authentication working ✅ Cross-Database Integration: KSESSIONS read-only access functional ✅ Development Efficiency: Automated build and test workflows ✅ Documentation Quality: Comprehensive technical and user documentation Target Metrics (Production Ready) Performance: P95 < 200ms for asset sharing Scalability: Predictable scaling patterns for multi-user sessions Security: No exposed GUIDs, secure token-based access User Experience: Modern, responsive Islamic content sharing platform Next Steps: Complete Phase 4 CSS implementation and begin Dual URL architecture development. The project is on track for production deployment with strong technical foundation and comprehensive tooling support."
  },
  "articles/implementation/user-guid-registration.html": {
    "href": "articles/implementation/user-guid-registration.html",
    "title": "Implementation: User GUID Registration | NOOR CANVAS Documentation",
    "summary": "Implementation: User GUID Registration This page documents the User GUID registration flow, storage mapping, API contracts, and implementation status for NOOR Canvas. Summary Purpose: Describe how participant GUID-based registration works, where data is stored in SQL, and the current implementation status. Scope: Client flow, server flow, DB schema mapping, API endpoints, verification notes, and recommended next steps. Client flow Participant navigates to /s/{guid} (public session link). Client checks localStorage for UserId. If present: client sends UserId + guid to the server to validate and join. If absent: client displays registration form (Name, City, Country). On registration submit the client POSTs to POST /api/join/{guid} or POST /api/auth/user/register. Server returns { userId, registrationId, sessionId } on success. Client stores userId in localStorage and navigates to Waiting Room. Server flow The server validates the guid against canvas.SessionLinks entries (checks State, ExpiresAt). If UserId was provided, the server locates the canvas.Users row and either returns an existing Registration or creates one. If no UserId exists the server: Creates a new UserId (GUID) and stores user metadata in canvas.Users. Inserts a canvas.Registrations row linking the UserId to the SessionId. Returns identifiers and session metadata to the client. SQL storage mapping canvas.Users — persistent user profiles UserId UNIQUEIDENTIFIER PK Name, City, Country FirstJoinedAt, LastJoinedAt canvas.Registrations RegistrationId BIGINT PK SessionId BIGINT FK -> canvas.Sessions(SessionId) UserId UNIQUEIDENTIFIER FK -> canvas.Users(UserId) JoinTime DATETIME2 Unique constraint on (UserId, SessionId) to ensure one registration per session canvas.SessionLinks LinkId, SessionId, Guid (public user GUID), State, LastUsedAt, UseCount canvas.HostSessions (host GUIDs stored hashed in HostGuidHash) — separate private token store API contracts (sketch) GET /s/{guid} → returns registration page or redirect to /join/{sessionId} POST /api/join/{guid} → { registrationId, sessionId } POST /api/auth/user/register → { userId, sessionId, requiredFields? } Implementation status (as of doc snapshot) Database schema: implemented (canvas.Users, canvas.Registrations, canvas.SessionLinks) — migrations applied. Server: ParticipantController and supporting endpoints present. Front-end: ParticipantRegister.razor is incomplete; CreateSession.razor has an HttpClient BaseAddress issue (Issue-53) blocking related flows. Verification notes To validate end-to-end: Ensure SessionLinks contains an active GUID for a dev session. Call POST /api/join/{guid} with a sample payload; assert canvas.Users and canvas.Registrations rows created. Confirm response includes userId which the client should persist in localStorage. Recommended next steps Fix Issue-53 (HttpClient BaseAddress) to unblock session creation and related UI. Complete ParticipantRegister.razor and wire it to POST /api/join/{guid}. Add a small server-side smoke test that posts to the registration endpoint and asserts DB changes. Add a short E2E test to simulate a new user registering and joining a waiting room. Related docs Workspaces/Documentation/IMPLEMENTATIONS/NOOR-CANVAS-DESIGN.MD Workspaces/IMPLEMENTATION-TRACKER.MD API reference: DocFX/api (generated from controller XML comments) Last updated: 2025-09-15"
  },
  "articles/intro.html": {
    "href": "articles/intro.html",
    "title": "Introduction to NOOR CANVAS | NOOR CANVAS Documentation",
    "summary": "Introduction to NOOR CANVAS NOOR CANVAS is an innovative Islamic content sharing platform that enables real-time collaboration and annotation on Islamic educational content. Key Features Real-time Collaboration Live annotation and drawing capabilities Synchronized participant interactions Host-controlled session management Q&A system with live responses Islamic Content Integration Qur'anic verses with Arabic text support Hadith collections and references Etymology and linguistic analysis Islamic poetry and literature Multi-language Support Arabic (RTL) text rendering English (LTR) interface Urdu (RTL) support Cultural sensitivity in design Modern Architecture ASP.NET Core 8.0 with Blazor Server SignalR for real-time communication Entity Framework Core data access SQL Server with optimized schema Target Audience Host Users (Educators) Islamic scholars and teachers Community leaders and imams Educational institution instructors Religious study group facilitators Participants (Students) Students of Islamic studies Community members Online learners Study group participants Platform Benefits For Hosts Interactive teaching tools Real-time feedback from participants Session recording and transcription Participant engagement analytics For Participants Active learning experience Direct interaction with content Question and answer capabilities Multi-device accessibility Technical Innovation NOOR CANVAS combines modern web technologies with Islamic educational needs: Real-time Canvas: HTML5 canvas with SignalR synchronization Cultural Design: McBeatch theme with Islamic aesthetic Performance Optimized: Efficient real-time data transmission Secure Architecture: GUID-based session management Continue reading: Technical Architecture"
  },
  "articles/technical/architecture.html": {
    "href": "articles/technical/architecture.html",
    "title": "NOOR CANVAS Technical Architecture | NOOR CANVAS Documentation",
    "summary": "NOOR CANVAS Technical Architecture System Overview NOOR CANVAS is built on a modern, scalable architecture designed for real-time Islamic content sharing and collaboration. Core Technologies Backend Framework ASP.NET Core 8.0 with Blazor Server Entity Framework Core for data access SignalR for real-time communication Serilog for structured logging Database SQL Server with dedicated canvas schema Cross-application integration with existing dbo schema GUID-based session management Optimized indexes for real-time performance Frontend Blazor Server with real-time rendering McBeatch responsive theme framework Multi-language support (Arabic RTL, English LTR, Urdu RTL) Canvas-based annotation system Real-time Communication SignalR WebSocket connections Hub-based architecture for session management Live annotation synchronization Participant management and Q&A system Architecture Layers 1. Presentation Layer (Blazor Server) Components/ ├── Session Management ├── Annotation Canvas ├── Participant Interface └── Q&A System 2. Application Layer Controllers/ ├── SessionController ├── ParticipantController ├── AnnotationController └── QuestionController Services/ ├── SessionService ├── AnnotationService ├── ParticipantService └── NotificationService 3. SignalR Hubs Hubs/ ├── SessionHub (session management) ├── AnnotationHub (real-time drawing) ├── ParticipantHub (user management) └── QuestionHub (Q&A system) 4. Data Layer Models/ ├── Session ├── Participant ├── Annotation ├── Question └── SessionTranscript DbContext/ └── CanvasDbContext (canvas schema) 5. Database Schema Canvas Schema (NOOR CANVAS) canvas.Sessions - Session management canvas.SessionTranscripts - Session content canvas.Registrations - Participant data canvas.Questions - Q&A system canvas.Annotations - Drawing data Cross-Schema Integration Read access to existing dbo schema Asset referencing (no duplication) Shared authentication context Development Environment Required Setup IIS Express x64 (localhost:9091 HTTPS) SQL Server with canvas schema Visual Studio or VS Code PowerShell for automation scripts Key Development Tools nc command for application startup nct for host token generation Automated testing framework NOOR Observer debugging system Deployment Architecture Production Environment IIS with dedicated application pool SQL Server production databases HTTPS with SSL certificates Application Insights monitoring Security Features GUID-based session tokens SQL injection prevention Cross-schema access controls Structured logging with sanitization Performance Considerations Real-time Optimization SignalR connection pooling Minimal message payloads Client-side caching Database query optimization Scalability Stateless session design Database connection pooling CDN integration for static assets Load balancing support For detailed implementation information, see the Development Guide"
  },
  "articles/technical/automated-testing-technical-reference.html": {
    "href": "articles/technical/automated-testing-technical-reference.html",
    "title": "Automated Testing Technical Reference | NOOR CANVAS Documentation",
    "summary": "Automated Testing Technical Reference Architecture Overview The NOOR Canvas automated testing system provides comprehensive test automation through a multi-layered approach combining build integration, Git hooks, and intelligent caching. The system is designed to maximize code quality while minimizing developer friction. Core Components 1. Post-Build Test Integration Implementation: .hooks/post-build.ps1 The post-build testing system automatically executes tests after successful compilation, using build artifact hashing to determine when tests are needed. # Core build artifact detection function Get-BuildArtifactHash { param([string]$Configuration = \"Debug\") $artifactPaths = @( \"SPA\\NoorCanvas\\bin\\$Configuration\\net8.0\\*.dll\", \"SPA\\NoorCanvas\\bin\\$Configuration\\net8.0\\*.exe\" ) $files = Get-ChildItem $artifactPaths -ErrorAction SilentlyContinue if (-not $files) { return $null } $hashInput = ($files | ForEach-Object { \"$($_.Name):$($_.LastWriteTime.Ticks):$($_.Length)\" }) -join \"|\" return [System.Security.Cryptography.SHA256]::Create().ComputeHash([System.Text.Encoding]::UTF8.GetBytes($hashInput)) | ForEach-Object { $_.ToString(\"x2\") } | Join-String } # Cache management $cacheDir = \".build-cache\" $lastHashFile = Join-Path $cacheDir \"last-build-hash.txt\" $currentHash = Get-BuildArtifactHash -Configuration $Configuration $lastHash = if (Test-Path $lastHashFile) { Get-Content $lastHashFile -Raw } else { \"\" } if ($currentHash -eq $lastHash -and -not $Force) { Write-Host \"⚡ Tests skipped - build artifacts unchanged\" -ForegroundColor Yellow return 0 } 2. Pre-Commit Test Validation Implementation: .hooks/pre-commit-test.ps1 + Git pre-commit hook Pre-commit testing prevents broken code from entering the repository by validating all changes before commits are accepted. # Source code hash calculation function Get-SourceCodeHash { $sourceExtensions = @(\"*.cs\", \"*.cshtml\", \"*.razor\", \"*.js\", \"*.ts\") $excludePaths = @(\"bin\", \"obj\", \"node_modules\", \".git\", \"_site\") $allFiles = @() foreach ($ext in $sourceExtensions) { $files = Get-ChildItem -Recurse -Include $ext -ErrorAction SilentlyContinue | Where-Object { $path = $_.FullName -not ($excludePaths | Where-Object { $path -like \"*\\$_\\*\" }) } $allFiles += $files } if (-not $allFiles) { return \"\" } # Create deterministic hash from file contents and paths $hashInput = ($allFiles | Sort-Object FullName | ForEach-Object { $relativePath = $_.FullName -replace [Regex]::Escape((Get-Location).Path), \"\" $content = Get-Content $_.FullName -Raw -ErrorAction SilentlyContinue \"$relativePath|$($_.LastWriteTime.Ticks)|$($content.GetHashCode())\" }) -join \"`n\" $hasher = [System.Security.Cryptography.SHA256]::Create() $hashBytes = $hasher.ComputeHash([System.Text.Encoding]::UTF8.GetBytes($hashInput)) return [System.BitConverter]::ToString($hashBytes) -replace '-', '' } # Git hook integration $hookPath = \".git\\hooks\\pre-commit\" if (-not (Test-Path $hookPath)) { Write-Host \"⚠️ Installing Git pre-commit hook...\" -ForegroundColor Yellow Install-GitHook } 3. Smart Caching System The caching system prevents redundant test execution while ensuring comprehensive validation. Cache Architecture .test-cache/ # Pre-commit test cache ├── last-test-hash.txt # SHA256 of source files from last test ├── last-test-result.txt # PASS/FAIL status of last test └── last-test-timestamp.txt # When tests were last executed .build-cache/ # Post-build test cache ├── last-build-hash.txt # SHA256 of build artifacts └── last-build-timestamp.txt # When build tests were last run Cache Validation Logic function Test-CacheValid { param( [string]$CurrentHash, [string]$CacheType = \"test\" ) $cacheDir = \".$CacheType-cache\" $hashFile = Join-Path $cacheDir \"last-$CacheType-hash.txt\" $resultFile = Join-Path $cacheDir \"last-$CacheType-result.txt\" # Cache is valid if: # 1. Hash file exists and matches current hash # 2. Result file exists and shows PASS # 3. Cache timestamp is recent (within 24 hours) if (-not (Test-Path $hashFile) -or -not (Test-Path $resultFile)) { return $false } $cachedHash = Get-Content $hashFile -Raw $cachedResult = Get-Content $resultFile -Raw return ($cachedHash -eq $CurrentHash) -and ($cachedResult -eq \"PASS\") } function Update-TestCache { param( [string]$Hash, [string]$Result, [string]$CacheType = \"test\" ) $cacheDir = \".$CacheType-cache\" if (-not (Test-Path $cacheDir)) { New-Item -ItemType Directory -Path $cacheDir -Force | Out-Null } Set-Content -Path (Join-Path $cacheDir \"last-$CacheType-hash.txt\") -Value $Hash Set-Content -Path (Join-Path $cacheDir \"last-$CacheType-result.txt\") -Value $Result Set-Content -Path (Join-Path $cacheDir \"last-$CacheType-timestamp.txt\") -Value (Get-Date -Format \"o\") } 4. Test Execution Engine Test Discovery and Execution function Invoke-TestSuite { param( [string]$Configuration = \"Debug\", [switch]$Verbose ) $testProjects = @( \"Tests\\NoorCanvas.Core.Tests\\NoorCanvas.Core.Tests.csproj\", \"Tests\\NC-ImplementationTests\\NC-ImplementationTests.csproj\" ) $totalTests = 0 $passedTests = 0 $failedTests = 0 foreach ($project in $testProjects) { if (Test-Path $project) { Write-Host \"\uD83E\uDDEA Running tests: $(Split-Path $project -Leaf)\" -ForegroundColor Cyan $testArgs = @( \"test\", $project, \"--configuration\", $Configuration, \"--no-build\", \"--logger\", \"console;verbosity=minimal\" ) if ($Verbose) { $testArgs += \"--logger\", \"console;verbosity=detailed\" } $testResult = & dotnet $testArgs 2>&1 $testExitCode = $LASTEXITCODE # Parse test results $resultMatch = $testResult | Select-String \"Total tests: (\\d+). Passed: (\\d+). Failed: (\\d+)\" if ($resultMatch) { $total = [int]$resultMatch.Matches[0].Groups[1].Value $passed = [int]$resultMatch.Matches[0].Groups[2].Value $failed = [int]$resultMatch.Matches[0].Groups[3].Value $totalTests += $total $passedTests += $passed $failedTests += $failed } if ($testExitCode -ne 0) { Write-Host \"❌ Tests failed in $project\" -ForegroundColor Red if ($Verbose) { Write-Host $testResult -ForegroundColor Gray } } } } # Summary reporting if ($failedTests -gt 0) { Write-Host \"❌ Test Summary: $passedTests passed, $failedTests failed ($totalTests total)\" -ForegroundColor Red return 1 } else { Write-Host \"✅ Test Summary: All $passedTests tests passed\" -ForegroundColor Green return 0 } } 5. Git Hook Integration Pre-Commit Hook Implementation #!/bin/sh # .git/hooks/pre-commit # Execute PowerShell pre-commit tests if command -v pwsh >/dev/null 2>&1; then pwsh -ExecutionPolicy Bypass -File \".hooks/pre-commit-test.ps1\" elif command -v powershell >/dev/null 2>&1; then powershell -ExecutionPolicy Bypass -File \".hooks/pre-commit-test.ps1\" else echo \"❌ PowerShell not found - cannot run pre-commit tests\" exit 1 fi exit $? Hook Installation and Management function Install-GitHook { param([string]$HookType = \"pre-commit\") $hooksDir = \".git\\hooks\" $hookPath = Join-Path $hooksDir $HookType if (-not (Test-Path $hooksDir)) { Write-Error \"Not in a Git repository (.git/hooks not found)\" return $false } $hookContent = @\" #!/bin/sh # Auto-generated NOOR Canvas $HookType hook if command -v pwsh >/dev/null 2>&1; then pwsh -ExecutionPolicy Bypass -File \".hooks/$HookType-test.ps1\" elif command -v powershell >/dev/null 2>&1; then powershell -ExecutionPolicy Bypass -File \".hooks/$HookType-test.ps1\" else echo \"❌ PowerShell not found - cannot run $HookType tests\" exit 1 fi exit $? \"@ Set-Content -Path $hookPath -Value $hookContent -Encoding ASCII # Make executable on Unix systems if ($IsLinux -or $IsMacOS) { chmod +x $hookPath } Write-Host \"✅ Installed Git $HookType hook\" -ForegroundColor Green return $true } function Remove-GitHook { param([string]$HookType = \"pre-commit\") $hookPath = \".git\\hooks\\$HookType\" if (Test-Path $hookPath) { Remove-Item $hookPath -Force Write-Host \"✅ Removed Git $HookType hook\" -ForegroundColor Green } } 6. VS Code Integration Task Configuration { \"version\": \"2.0.0\", \"tasks\": [ { \"label\": \"build-with-tests\", \"type\": \"process\", \"command\": \"dotnet\", \"args\": [ \"build\", \"${workspaceFolder}/SPA/NoorCanvas/NoorCanvas.csproj\" ], \"group\": { \"kind\": \"build\", \"isDefault\": true }, \"dependsOn\": \"run-post-build-tests\", \"presentation\": { \"echo\": true, \"reveal\": \"always\", \"focus\": false, \"panel\": \"shared\" } }, { \"label\": \"run-post-build-tests\", \"type\": \"shell\", \"command\": \"powershell.exe\", \"args\": [ \"-NoProfile\", \"-ExecutionPolicy\", \"Bypass\", \"-File\", \"${workspaceFolder}/.hooks/post-build.ps1\", \"-Configuration\", \"Debug\" ], \"group\": \"test\", \"presentation\": { \"echo\": false, \"reveal\": \"always\", \"focus\": false, \"panel\": \"shared\" } } ] } 7. Performance Optimization Parallel Test Execution function Invoke-ParallelTests { param([string[]]$TestProjects) $jobs = @() foreach ($project in $TestProjects) { $job = Start-Job -ScriptBlock { param($ProjectPath) $result = & dotnet test $ProjectPath --logger \"console;verbosity=minimal\" 2>&1 return @{ Project = $ProjectPath ExitCode = $LASTEXITCODE Output = $result } } -ArgumentList $project $jobs += $job } # Wait for all tests to complete $results = $jobs | Wait-Job | Receive-Job $jobs | Remove-Job return $results } Incremental Testing function Get-ChangedTestProjects { param([string[]]$ChangedFiles) $testProjects = @() foreach ($file in $ChangedFiles) { # Determine which test projects need to run based on changed files switch -Regex ($file) { \"Controllers/\" { $testProjects += \"Tests\\NoorCanvas.Core.Tests\" } \"Models/\" { $testProjects += \"Tests\\NoorCanvas.Core.Tests\" } \"Services/\" { $testProjects += \"Tests\\NoorCanvas.Core.Tests\" } \"Tools/HostProvisioner/\" { $testProjects += \"Tests\\NC-ImplementationTests\" } } } return $testProjects | Sort-Object -Unique } 8. Error Handling and Recovery Test Failure Analysis function Analyze-TestFailures { param([string]$TestOutput) $failures = @() # Parse common failure patterns $patterns = @{ \"DatabaseConnection\" = \".*connection.*timeout.*|.*cannot connect.*database.*\" \"ApiEndpoint\" = \".*HTTP.*404.*|.*endpoint.*not found.*\" \"SignalR\" = \".*SignalR.*connection.*failed.*|.*hub.*not available.*\" \"Authentication\" = \".*unauthorized.*|.*token.*invalid.*\" } foreach ($category in $patterns.Keys) { if ($TestOutput -match $patterns[$category]) { $failures += @{ Category = $category Pattern = $patterns[$category] Suggestion = Get-FailureSuggestion -Category $category } } } return $failures } function Get-FailureSuggestion { param([string]$Category) switch ($Category) { \"DatabaseConnection\" { return \"Check database server status and connection strings in appsettings.json\" } \"ApiEndpoint\" { return \"Verify API controller routes and ensure application is running\" } \"SignalR\" { return \"Check SignalR hub registration and WebSocket configuration\" } \"Authentication\" { return \"Regenerate host tokens using 'nct' command\" } default { return \"Review test output and check recent code changes\" } } } Automatic Recovery Mechanisms function Invoke-TestRecovery { param([string]$FailureCategory) switch ($FailureCategory) { \"DatabaseConnection\" { Write-Host \"\uD83D\uDD04 Attempting database recovery...\" -ForegroundColor Yellow # Test database connectivity $connectionTest = Test-DatabaseConnection if (-not $connectionTest) { Write-Host \"\uD83D\uDCA1 Try: Restart SQL Server service or check connection string\" -ForegroundColor Cyan } } \"ApiEndpoint\" { Write-Host \"\uD83D\uDD04 Attempting application restart...\" -ForegroundColor Yellow # Kill existing processes and restart & iiskill Start-Sleep -Seconds 3 & nc -SkipTokenGeneration } \"Authentication\" { Write-Host \"\uD83D\uDD04 Regenerating authentication tokens...\" -ForegroundColor Yellow # Generate new tokens & nct } } } 9. Reporting and Metrics Test Result Reporting function Generate-TestReport { param( [hashtable]$TestResults, [string]$OutputFormat = \"Console\" ) switch ($OutputFormat) { \"Console\" { Write-TestConsoleReport -Results $TestResults } \"JUnit\" { Write-TestJUnitReport -Results $TestResults } \"Html\" { Write-TestHtmlReport -Results $TestResults } } } function Write-TestConsoleReport { param([hashtable]$Results) Write-Host \"`n\uD83D\uDCCA Test Execution Summary\" -ForegroundColor Cyan Write-Host \"═══════════════════════════\" -ForegroundColor Cyan $total = $Results.Passed + $Results.Failed + $Results.Skipped $successRate = if ($total -gt 0) { [math]::Round(($Results.Passed / $total) * 100, 1) } else { 0 } Write-Host \"✅ Passed: $($Results.Passed)\" -ForegroundColor Green Write-Host \"❌ Failed: $($Results.Failed)\" -ForegroundColor Red Write-Host \"⏭️ Skipped: $($Results.Skipped)\" -ForegroundColor Yellow Write-Host \"\uD83D\uDCC8 Success Rate: $successRate%\" -ForegroundColor Cyan Write-Host \"⏱️ Duration: $($Results.Duration)\" -ForegroundColor Gray } Performance Metrics Collection function Collect-TestMetrics { param([hashtable]$TestResults) $metrics = @{ Timestamp = Get-Date -Format \"o\" TestCount = $TestResults.Passed + $TestResults.Failed SuccessRate = ($TestResults.Passed / ($TestResults.Passed + $TestResults.Failed)) * 100 Duration = $TestResults.Duration CacheHitRate = $TestResults.CacheHits / $TestResults.TotalRuns * 100 FailureCategories = $TestResults.FailureCategories } # Store metrics for trending analysis $metricsFile = \".test-cache\\metrics.json\" $allMetrics = if (Test-Path $metricsFile) { Get-Content $metricsFile | ConvertFrom-Json } else { @() } $allMetrics += $metrics # Keep only last 100 entries if ($allMetrics.Count -gt 100) { $allMetrics = $allMetrics[-100..-1] } $allMetrics | ConvertTo-Json -Depth 3 | Set-Content $metricsFile } Configuration and Customization Test Configuration Files # .hooks/test-config.json { \"testProjects\": [ \"Tests/NoorCanvas.Core.Tests/NoorCanvas.Core.Tests.csproj\", \"Tests/NC-ImplementationTests/NC-ImplementationTests.csproj\" ], \"cacheDuration\": \"24:00:00\", \"parallelExecution\": true, \"maxRetries\": 3, \"timeoutMinutes\": 10, \"reportFormats\": [\"console\", \"junit\"], \"excludePatterns\": [ \"**/bin/**\", \"**/obj/**\", \"**/.git/**\" ] } Environment-Specific Settings function Get-TestConfiguration { param([string]$Environment = \"Development\") $configs = @{ \"Development\" = @{ DatabaseTimeout = 30 ParallelTests = $true VerboseOutput = $true CachingEnabled = $true } \"CI\" = @{ DatabaseTimeout = 60 ParallelTests = $true VerboseOutput = $false CachingEnabled = $false } \"Production\" = @{ DatabaseTimeout = 120 ParallelTests = $false VerboseOutput = $false CachingEnabled = $false } } return $configs[$Environment] } For user-friendly information about using the automated testing system, see the Automated Testing User Guide."
  },
  "articles/technical/build-system-technical-reference.html": {
    "href": "articles/technical/build-system-technical-reference.html",
    "title": "Build System Technical Reference | NOOR CANVAS Documentation",
    "summary": "Build System Technical Reference This document provides technical implementation details for the NOOR Canvas build system. Architecture The build system uses: MSBuild: Primary build orchestration dotnet CLI: Cross-platform build execution PowerShell Scripts: Automated testing integration Git Hooks: Pre-commit validation Build Pipeline 1. Pre-Build Phase Dependency restoration Configuration validation Environment setup 2. Compilation Phase C# source compilation Blazor component processing Asset bundling 3. Post-Build Phase Automated test execution Build artifact validation Success/failure reporting Integration Points Visual Studio Code Tasks: .vscode/tasks.json integration GitHub Actions: CI/CD pipeline automation Git Hooks: .hooks/ directory PowerShell scripts Configuration Files SPA/NoorCanvas/NoorCanvas.csproj: Project configuration .vscode/tasks.json: IDE task definitions .hooks/post-build.ps1: Automated test execution .github/workflows/: CI/CD definitions Performance Optimization Incremental builds using build artifact caching Smart test execution based on source code changes Parallel build execution where possible Troubleshooting Common build issues and resolutions: File locking problems with running processes Dependency resolution failures Path resolution issues in PowerShell scripts This documentation is automatically maintained as build system changes are implemented."
  },
  "articles/technical/database-schema.html": {
    "href": "articles/technical/database-schema.html",
    "title": "Database Schema Documentation | NOOR CANVAS Documentation",
    "summary": "Database Schema Documentation Overview NOOR CANVAS uses a dedicated canvas schema within SQL Server, designed for optimal performance with real-time operations. Schema Structure Development Environment Database: KSESSIONS_DEV Schema: canvas Connection: Trusted connection with 1-hour timeout Production Environment Database: KSESSIONS Schema: canvas Connection: sa user with full permissions Tables canvas.Sessions Primary session management table. CREATE TABLE canvas.Sessions ( id INT IDENTITY(1,1) PRIMARY KEY, album_id INT NULL, category_id INT NULL, guid UNIQUEIDENTIFIER NOT NULL DEFAULT NEWID(), host_token UNIQUEIDENTIFIER NOT NULL, status NVARCHAR(50) NOT NULL DEFAULT 'Active', created_at DATETIME2 NOT NULL DEFAULT GETUTCDATE(), expires_at DATETIME2 NULL, INDEX IX_Sessions_Guid (guid), INDEX IX_Sessions_HostToken (host_token), INDEX IX_Sessions_Status (status) ); canvas.SessionTranscripts Stores session content and transcription data. CREATE TABLE canvas.SessionTranscripts ( id INT IDENTITY(1,1) PRIMARY KEY, session_id INT NOT NULL, html_content NVARCHAR(MAX) NULL, created_at DATETIME2 NOT NULL DEFAULT GETUTCDATE(), FOREIGN KEY (session_id) REFERENCES canvas.Sessions(id), INDEX IX_SessionTranscripts_SessionId (session_id) ); canvas.Registrations Participant registration and management. CREATE TABLE canvas.Registrations ( id INT IDENTITY(1,1) PRIMARY KEY, session_id INT NOT NULL, name NVARCHAR(255) NOT NULL, country NVARCHAR(100) NULL, city NVARCHAR(100) NULL, fingerprint_hash NVARCHAR(64) NOT NULL, ip_hash NVARCHAR(64) NOT NULL, join_time DATETIME2 NOT NULL DEFAULT GETUTCDATE(), FOREIGN KEY (session_id) REFERENCES canvas.Sessions(id), INDEX IX_Registrations_SessionId (session_id), INDEX IX_Registrations_FingerprintHash (fingerprint_hash) ); canvas.Questions Q&A system data storage. CREATE TABLE canvas.Questions ( id INT IDENTITY(1,1) PRIMARY KEY, session_id INT NOT NULL, participant_id INT NOT NULL, question_text NVARCHAR(MAX) NOT NULL, answer_text NVARCHAR(MAX) NULL, status NVARCHAR(50) NOT NULL DEFAULT 'Pending', created_at DATETIME2 NOT NULL DEFAULT GETUTCDATE(), FOREIGN KEY (session_id) REFERENCES canvas.Sessions(id), FOREIGN KEY (participant_id) REFERENCES canvas.Registrations(id), INDEX IX_Questions_SessionId (session_id), INDEX IX_Questions_ParticipantId (participant_id), INDEX IX_Questions_Status (status) ); canvas.Annotations Real-time annotation data storage. CREATE TABLE canvas.Annotations ( id INT IDENTITY(1,1) PRIMARY KEY, session_id INT NOT NULL, participant_id INT NOT NULL, annotation_data NVARCHAR(MAX) NOT NULL, created_at DATETIME2 NOT NULL DEFAULT GETUTCDATE(), FOREIGN KEY (session_id) REFERENCES canvas.Sessions(id), FOREIGN KEY (participant_id) REFERENCES canvas.Registrations(id), INDEX IX_Annotations_SessionId (session_id), INDEX IX_Annotations_ParticipantId (participant_id), INDEX IX_Annotations_CreatedAt (created_at) ); Cross-Schema Integration Read Access to dbo Schema NOOR CANVAS has read access to existing application data: -- Beautiful Islam integration USE KQUR_DEV; -- Development USE KQUR; -- Production -- Available tables SELECT * FROM dbo.Users; SELECT * FROM dbo.Categories; SELECT * FROM dbo.Albums; Asset Referencing Strategy No Data Duplication: Reference existing image paths Shared Resources: Use existing asset directories Path References: D:\\PROJECTS\\KSESSIONS\\Source Code\\Sessions.Spa\\Resources\\IMAGES Performance Optimizations Indexing Strategy GUID Lookups: Optimized for session token validation Time-based Queries: Indexed on creation timestamps Foreign Key Relationships: Proper referential integrity Real-time Queries: Optimized for annotation retrieval Query Performance Connection Pooling: Efficient database connections Timeout Configuration: 1-hour timeout for long operations Prepared Statements: Parameterized queries for security Bulk Operations: Optimized for real-time data insertion Security Considerations Data Protection Parameterized Queries: SQL injection prevention Hash Storage: Fingerprint and IP address hashing GUID Tokens: Cryptographically secure session tokens Schema Isolation: Dedicated canvas schema separation Access Control Minimal Permissions: Read-only access to dbo schema Service Account: Dedicated application database user Connection Security: Trusted connections in development Audit Trail: Comprehensive logging for all operations For development setup instructions, see Getting Started"
  },
  "articles/technical/development-workflow-technical-reference.html": {
    "href": "articles/technical/development-workflow-technical-reference.html",
    "title": "Development Workflow Technical Reference | NOOR CANVAS Documentation",
    "summary": "Development Workflow Technical Reference Technical implementation details for NOOR Canvas development workflows. Workflow Architecture 1. Code Development Cycle graph LR A[Code Changes] --> B[Build] B --> C[Test Execution] C --> D[Commit Validation] D --> E[Push to Repository] 2. Automated Testing Integration Smart Caching System Source Code Hashing: SHA256 of .cs/.cshtml/.razor files Build Artifact Hashing: SHA256 of compiled binaries Cache Invalidation: Automatic cache clearing on source changes Test Execution Triggers Post-Build: Automatic execution after successful builds Pre-Commit: Git hook validation before commits Manual: Developer-initiated test runs 3. Development Server Management Process Lifecycle // IIS Express x64 launch pattern var processInfo = new ProcessStartInfo { FileName = \"iisexpress.exe\", Arguments = \"/config:applicationhost.config /site:NoorCanvas\", UseShellExecute = false }; Port Management 9090: HTTP development server 9091: HTTPS development server (primary) Conflict Resolution: Automatic port scanning and assignment Integration Points Git Integration Pre-commit hooks: .git/hooks/pre-commit Smart testing: Only run tests if source code changed Commit blocking: Prevent commits with failing tests Visual Studio Code Integration Task definitions: .vscode/tasks.json Launch configurations: .vscode/launch.json Extension requirements: C# DevKit, PowerShell PowerShell Integration Global commands: nc, nct, ncdoc, iiskill Profile integration: Automatic command loading Cross-session persistence: Command availability across terminals Performance Characteristics Build Performance Clean build: ~3-5 seconds Incremental build: ~1-2 seconds Test execution: ~5-10 seconds Full cycle: ~10-20 seconds Caching Benefits Cache hit: ~0.1 seconds (instant) Cache miss: Full test execution Cache invalidation: Automatic on source changes Configuration Management Environment Variables $env:NOOR_CANVAS_ENV = \"Development\" $env:NOOR_CANVAS_PORT = \"9091\" $env:NOOR_CANVAS_SSL = \"true\" Configuration Files appsettings.json: Application configuration appsettings.Development.json: Development overrides launchSettings.json: Development server settings Error Handling and Recovery Common Issues File Locking: Process termination and retry logic Port Conflicts: Automatic port scanning and assignment Certificate Issues: Automatic HTTPS certificate handling Database Connectivity: Connection string validation and fallback Recovery Strategies Process cleanup: iiskill command for stuck processes Cache clearing: Manual cache invalidation options Force rebuild: Clean build options Dependency refresh: Package restoration This technical reference is maintained automatically as workflow improvements are implemented."
  },
  "articles/technical/global-commands-technical-reference.html": {
    "href": "articles/technical/global-commands-technical-reference.html",
    "title": "Global Commands Technical Reference | NOOR CANVAS Documentation",
    "summary": "Global Commands Technical Reference Architecture Overview The NOOR Canvas global command system provides a unified PowerShell-based interface for development and administration tasks. Commands are implemented as PowerShell scripts with batch/cmd wrappers for cross-shell compatibility. Implementation Details Command Location Base Directory: D:\\PROJECTS\\NOOR CANVAS\\Workspaces\\Global\\ PowerShell Scripts: *.ps1 files containing primary implementation Batch Wrappers: *.bat and *.cmd files for compatibility Global Access: Commands available system-wide through PowerShell profile loading Command Registration Commands are registered through the PowerShell profile system: # Profile loading mechanism (in Microsoft.PowerShell_profile.ps1) $globalPath = \"D:\\PROJECTS\\NOOR CANVAS\\Workspaces\\Global\" if (Test-Path $globalPath) { $env:PATH = \"$globalPath;$env:PATH\" Write-Host \"✅ NOOR Canvas global commands loaded: nc, nct, ncdoc, iiskill\" -ForegroundColor Green } NC Command Implementation Core Script: nc.ps1 [CmdletBinding()] param( [switch]$SkipTokenGeneration, [switch]$Help ) # Parameter validation and help display if ($Help) { Write-Host \"NOOR Canvas Application Runner (NC Command)\" -ForegroundColor Green Write-Host \"Usage: nc [-SkipTokenGeneration] [-Help]\" -ForegroundColor Yellow Write-Host \"\" Write-Host \"Options:\" -ForegroundColor Cyan Write-Host \" -SkipTokenGeneration Skip the host token generation step\" Write-Host \" -Help Display this help message\" return } # Workspace detection $workspaceRoot = Split-Path -Parent (Split-Path -Parent $PSScriptRoot) $projectPath = Join-Path $workspaceRoot \"SPA\\NoorCanvas\" # Token generation (unless skipped) if (-not $SkipTokenGeneration) { Write-Host \"\uD83D\uDD11 Generating host tokens...\" -ForegroundColor Cyan & \"$PSScriptRoot\\nct.ps1\" if ($LASTEXITCODE -ne 0) { Write-Error \"❌ Token generation failed\" exit 1 } } # Project build Write-Host \"\uD83D\uDD28 Building NOOR Canvas...\" -ForegroundColor Cyan Set-Location $projectPath dotnet build --no-restore if ($LASTEXITCODE -ne 0) { Write-Error \"❌ Build failed\" exit 1 } # IIS Express launch Write-Host \"\uD83D\uDE80 Starting IIS Express x64...\" -ForegroundColor Green Start-Process -FilePath \"dotnet\" -ArgumentList \"run --urls `\"https://localhost:9091;http://localhost:9090`\"\" -NoNewWindow -Wait Process Management The NC command implements sophisticated process management: Path Resolution: Automatically detects workspace structure using Split-Path Error Handling: Validates each step with proper exit codes Build Integration: Ensures clean build before server start Port Management: Consistently uses ports 9091 (HTTPS) and 9090 (HTTP) IIS Express Integration # IIS Express configuration detection $iisExpressPath = \"${env:ProgramFiles}\\IIS Express\\iisexpress.exe\" if (Test-Path $iisExpressPath) { # Use IIS Express directly $arguments = \"/path:`\"$projectPath`\" /port:9091 /systray:false\" Start-Process -FilePath $iisExpressPath -ArgumentList $arguments } else { # Fallback to dotnet run Start-Process -FilePath \"dotnet\" -ArgumentList \"run --urls `\"https://localhost:9091`\"\" } NCT Command Implementation Token Generation Algorithm # Cryptographically secure GUID generation $hostToken = [System.Guid]::NewGuid().ToString() # Database storage $connectionString = \"Server=AHHOME;Database=KSESSIONS_DEV;User ID=sa;Password=adf4961glo;Connection Timeout=3600;TrustServerCertificate=True;Encrypt=False;\" $query = @\" INSERT INTO canvas.HostTokens (Id, Token, CreatedAt, ExpiresAt, IsActive) VALUES (NEWID(), @Token, GETUTCDATE(), DATEADD(HOUR, 24, GETUTCDATE()), 1) \"@ # SQL execution with proper parameterization $connection = New-Object System.Data.SqlClient.SqlConnection($connectionString) $command = New-Object System.Data.SqlClient.SqlCommand($query, $connection) $command.Parameters.AddWithValue(\"@Token\", $hostToken) Security Considerations GUID Generation: Uses cryptographically secure random number generator SQL Injection Prevention: All database queries use parameterized commands Token Expiration: Automatic 24-hour expiration for security Database Isolation: Uses dedicated development database (KSESSIONS_DEV) NCDOC Command Implementation DocFX Integration # DocFX build and serve $docfxPath = Join-Path $workspaceRoot \"DocFX\" Set-Location $docfxPath # Build documentation dotnet docfx docfx.json if ($LASTEXITCODE -ne 0) { Write-Error \"❌ Documentation build failed\" exit 1 } # Serve locally dotnet docfx docfx.json --serve --port 8082 Browser Launch Logic # Smart browser detection and launch $documentationUrl = \"http://localhost:8082\" if ($env:OS -eq \"Windows_NT\") { Start-Process $documentationUrl } else { # Cross-platform support if (Get-Command \"xdg-open\" -ErrorAction SilentlyContinue) { xdg-open $documentationUrl } elseif (Get-Command \"open\" -ErrorAction SilentlyContinue) { open $documentationUrl } } IISKILL Command Implementation Process Discovery # Find all IIS Express processes $iisProcesses = Get-Process -Name \"iisexpress*\" -ErrorAction SilentlyContinue if ($iisProcesses) { foreach ($process in $iisProcesses) { try { Write-Verbose \"Terminating IIS Express process: $($process.Id)\" Stop-Process -Id $process.Id -Force $processesKilled++ } catch { Write-Warning \"Failed to stop process $($process.Id): $($_.Exception.Message)\" } } } File Lock Management # Handle locked executable files $lockedFiles = @( \"D:\\PROJECTS\\NOOR CANVAS\\SPA\\NoorCanvas\\bin\\Debug\\net8.0\\NoorCanvas.exe\" ) foreach ($file in $lockedFiles) { if (Test-Path $file) { try { # Wait for file unlock $maxAttempts = 10 $attempt = 0 do { Start-Sleep -Milliseconds 500 $attempt++ $fileStream = $null try { $fileStream = [System.IO.File]::Open($file, 'Open', 'Write') $isLocked = $false } catch { $isLocked = $true } finally { if ($fileStream) { $fileStream.Close() } } } while ($isLocked -and $attempt -lt $maxAttempts) } catch { Write-Verbose \"File unlock check failed: $($_.Exception.Message)\" } } } Error Handling and Logging Structured Error Reporting # Standardized error reporting across all commands function Write-NoorError { param([string]$Message, [string]$Component) Write-Host \"❌ NOOR-ERROR [$Component]: $Message\" -ForegroundColor Red Write-EventLog -LogName Application -Source \"NOOR Canvas\" -EventId 1001 -EntryType Error -Message \"$Component: $Message\" -ErrorAction SilentlyContinue } # Usage example Write-NoorError -Message \"Build compilation failed\" -Component \"NC-BUILD\" Verbose Output # Conditional verbose output based on -Verbose parameter if ($PSBoundParameters['Verbose']) { Write-Host \"\uD83D\uDD0D NOOR-DEBUG: Checking workspace structure...\" -ForegroundColor Gray Write-Host \" Workspace Root: $workspaceRoot\" -ForegroundColor Gray Write-Host \" Project Path: $projectPath\" -ForegroundColor Gray } Integration Points PowerShell Profile Integration Commands integrate with the PowerShell profile system for global availability: # Automatic loading in Microsoft.PowerShell_profile.ps1 if (Test-Path \"D:\\PROJECTS\\NOOR CANVAS\\Workspaces\\Global\") { $env:PATH += \";D:\\PROJECTS\\NOOR CANVAS\\Workspaces\\Global\" } VS Code Task Integration Commands are integrated into VS Code tasks for IDE usage: { \"label\": \"NOOR Canvas: Start Application\", \"type\": \"shell\", \"command\": \"nc\", \"group\": { \"kind\": \"build\", \"isDefault\": true }, \"presentation\": { \"echo\": true, \"reveal\": \"always\", \"focus\": false, \"panel\": \"shared\" } } Performance Considerations Command Execution Speed Script Caching: PowerShell scripts are compiled and cached for faster execution Path Resolution: Optimized path detection minimizes file system calls Process Management: Efficient process enumeration and termination Database Connections: Connection pooling for NCT command Memory Usage Minimal Footprint: Commands designed to use minimal system resources Clean Termination: Proper cleanup of temporary objects and connections Garbage Collection: Explicit disposal of database connections and file streams Security Model Execution Policy # Commands respect PowerShell execution policy if ((Get-ExecutionPolicy) -eq 'Restricted') { Write-Warning \"PowerShell execution policy is Restricted. Commands may not execute.\" Write-Host \"Consider running: Set-ExecutionPolicy -ExecutionPolicy RemoteSigned -Scope CurrentUser\" } Database Security Development Isolation: Commands only access development databases (KSESSIONS_DEV) Parameterized Queries: All SQL operations use parameterized queries Connection Timeout: 1-hour timeout prevents hung connections Credential Management: Database credentials stored in configuration files only Troubleshooting Common Issues Command Not Found # Reload PowerShell profile . $PROFILE Permission Denied # Check execution policy Get-ExecutionPolicy Set-ExecutionPolicy -ExecutionPolicy RemoteSigned -Scope CurrentUser Port Already in Use # Kill existing processes iiskill # Wait and retry Start-Sleep -Seconds 5 nc Diagnostic Commands # Check command availability Get-Command nc, nct, ncdoc, iiskill -ErrorAction SilentlyContinue # Verify workspace structure Test-Path \"D:\\PROJECTS\\NOOR CANVAS\\Workspaces\\Global\\*.ps1\" # Check running processes Get-Process -Name \"*iisexpress*\", \"*dotnet*\" -ErrorAction SilentlyContinue For user-friendly guides on using these commands, see the Global Commands User Guide."
  },
  "articles/technical/host-token-system.html": {
    "href": "articles/technical/host-token-system.html",
    "title": "NOOR Canvas Host Token Generation and Validation System | NOOR CANVAS Documentation",
    "summary": "NOOR Canvas Host Token Generation and Validation System Overview The NOOR Canvas Host Token System provides secure authentication for session hosts using GUID-based tokens with HMAC-SHA256 validation. The system consists of two main components: Token Generation and Token Authentication, designed for both development flexibility and production security. Table of Contents System Architecture Token Generation Process Token Validation Process Security Model API Reference Implementation Phases Usage Examples Troubleshooting System Architecture Component Overview graph LR A[Host Request] --> B[HostProvisionerController] B --> C[GUID Generation] C --> D[HMAC-SHA256 Hash] D --> E[Token Response] F[Authentication Request] --> G[HostController] G --> H[GUID Validation] H --> I[Session Token] Core Components HostProvisionerController: Generates new host tokens (database-independent) HostController: Validates host tokens and creates session tokens HMAC-SHA256: Cryptographic hash function for token integrity Session Management: Links host tokens to active sessions Token Generation Process Step 1: Token Request The token generation process begins when a host requests a new authentication token. API Endpoint: POST /api/hostprovisioner/generate Request Structure: { \"sessionId\": 100, \"createdBy\": \"Host Name\" } Step 2: GUID Generation A new UUID (Version 4) is generated using .NET's Guid.NewGuid() method: var hostGuid = Guid.NewGuid(); // Example: \"f47ac10b-58cc-4372-a567-0e02b2c3d479\" GUID Format: Length: 36 characters (32 hex digits + 4 hyphens) Standard: RFC 4122 compliant UUID Version 4 Entropy: 122 bits of randomness Collision Probability: ~5.3 x 10^-37 Step 3: Hash Generation Each GUID is cryptographically signed using HMAC-SHA256: private static string ComputeHash(string input) { using var hmac = new HMACSHA256(Encoding.UTF8.GetBytes(AppSecret)); var hashBytes = hmac.ComputeHash(Encoding.UTF8.GetBytes(input)); return Convert.ToBase64String(hashBytes); } Security Properties: Algorithm: HMAC-SHA256 Secret Key: \"NOOR-CANVAS-HOST-SECRET-2025\" Output: Base64-encoded hash (44 characters) Integrity: Tampering detection capability Step 4: Response Generation The system returns a comprehensive token response: { \"hostGuid\": \"f47ac10b-58cc-4372-a567-0e02b2c3d479\", \"sessionId\": 100, \"createdBy\": \"Host Name\", \"createdAt\": \"2025-09-13T15:30:00Z\", \"hash\": \"A1B2C3D4E5F6G7H8...\" } Token Validation Process Phase 2 Implementation (Current) The current validation system is designed for development and testing: [HttpPost(\"authenticate\")] public async Task<IActionResult> AuthenticateHost([FromBody] HostAuthRequest request) { // 1. GUID Format Validation if (!Guid.TryParse(request.HostGuid, out Guid hostGuid)) { return BadRequest(new { error = \"Invalid GUID format\" }); } // 2. Session Token Generation (Phase 2: Accept any valid GUID) var sessionToken = Guid.NewGuid().ToString(); // 3. Authentication Response return Ok(new HostAuthResponse { Success = true, SessionToken = sessionToken, ExpiresAt = DateTime.UtcNow.AddHours(8), HostGuid = hostGuid.ToString() }); } Validation Steps Format Validation: Ensures GUID follows RFC 4122 standard Session Token Creation: Generates new session-specific token Response Generation: Returns authentication credentials Future Enhancement (Phase 3+) Planned database integration for production validation: // Future implementation will include: var storedToken = await _context.HostTokens .FirstOrDefaultAsync(t => t.HostGuid == hostGuid && t.IsActive); if (storedToken == null || !ValidateHash(storedToken)) { return Unauthorized(\"Invalid or expired token\"); } Security Model Cryptographic Security HMAC-SHA256 Properties: Key Size: 256 bits Hash Output: 256 bits (32 bytes) Resistance: Preimage, second preimage, and collision resistant Performance: ~10,000 operations per second typical throughput Security Guarantees: Integrity: Hash verification prevents token tampering Authenticity: HMAC proves token was generated by authorized system Non-repudiation: Cryptographic proof of token origin Token Lifecycle stateDiagram-v2 [*] --> Generated: Host requests token Generated --> Authenticated: Valid GUID provided Generated --> Expired: Timeout (future) Authenticated --> SessionActive: Session token created SessionActive --> SessionExpired: 8 hours timeout SessionExpired --> [*] Expired --> [*] Lifecycle Stages: Generated: Token created and returned to host Authenticated: Token used for successful authentication Session Active: Host has valid session (8-hour lifespan) Session Expired: Session timeout, re-authentication required Phase 2 vs Production Security Aspect Phase 2 (Current) Production (Future) Validation Format only Database + Hash verification Storage None Encrypted database storage Expiration Session-based only Token + Session expiration Revocation Not implemented Administrative revocation Audit Trail Basic logging Comprehensive audit logs API Reference Generate Host Token Endpoint: POST /api/hostprovisioner/generate Request Headers: Content-Type: application/json Request Body: { \"sessionId\": integer, // Required: Session identifier \"createdBy\": \"string\" // Optional: Host identifier } Response (200 OK): { \"hostGuid\": \"f47ac10b-58cc-4372-a567-0e02b2c3d479\", \"sessionId\": 100, \"createdBy\": \"Host Name\", \"createdAt\": \"2025-09-13T15:30:00Z\", \"hash\": \"A1B2C3D4E5F6G7H8I9J0K1L2M3N4...\" } Error Responses: 500 Internal Server Error: Token generation failed Authenticate Host Token Endpoint: POST /api/host/authenticate Request Headers: Content-Type: application/json Request Body: { \"hostGuid\": \"f47ac10b-58cc-4372-a567-0e02b2c3d479\" } Response (200 OK): { \"success\": true, \"sessionToken\": \"a8b9c0d1-e2f3-4567-8901-234567890123\", \"expiresAt\": \"2025-09-13T23:30:00Z\", \"hostGuid\": \"f47ac10b-58cc-4372-a567-0e02b2c3d479\" } Error Responses: 400 Bad Request: Invalid GUID format 401 Unauthorized: Invalid token (future implementation) 500 Internal Server Error: Authentication system error Implementation Phases Phase 1: Foundation ✅ Basic GUID generation HMAC-SHA256 implementation API endpoint structure Phase 2: Development System ✅ (Current) Format validation only Session token generation Basic authentication flow Development-friendly (accepts any valid GUID) Phase 3: Database Integration (Planned) Token storage in database Hash validation Token expiration handling Revocation capabilities Phase 4: Production Security (Planned) Advanced validation Audit logging Performance optimization Security monitoring Usage Examples Generating a Host Token Using PowerShell: $request = @{ sessionId = 100 createdBy = \"Conference Host\" } | ConvertTo-Json $response = Invoke-RestMethod -Uri \"https://localhost:9091/api/hostprovisioner/generate\" ` -Method Post -Body $request -ContentType \"application/json\" ` -SkipCertificateCheck Write-Host \"Host GUID: $($response.hostGuid)\" Using cURL: curl -X POST https://localhost:9091/api/hostprovisioner/generate \\ -H \"Content-Type: application/json\" \\ -d '{\"sessionId\": 100, \"createdBy\": \"Conference Host\"}' \\ -k Authenticating with Host Token Using PowerShell: $authRequest = @{ hostGuid = \"f47ac10b-58cc-4372-a567-0e02b2c3d479\" } | ConvertTo-Json $authResponse = Invoke-RestMethod -Uri \"https://localhost:9091/api/host/authenticate\" ` -Method Post -Body $authRequest -ContentType \"application/json\" ` -SkipCertificateCheck Write-Host \"Session Token: $($authResponse.sessionToken)\" Write-Host \"Expires At: $($authResponse.expiresAt)\" Browser Integration JavaScript Example: // Generate host token async function generateHostToken() { const response = await fetch('/api/hostprovisioner/generate', { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ sessionId: 100, createdBy: 'Web Host' }) }); const data = await response.json(); return data.hostGuid; } // Authenticate host token async function authenticateHost(hostGuid) { const response = await fetch('/api/host/authenticate', { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ hostGuid }) }); const authData = await response.json(); if (authData.success) { localStorage.setItem('sessionToken', authData.sessionToken); window.location.href = '/host/dashboard'; } } Troubleshooting Common Issues 1. Invalid GUID Format Error Problem: 400 Bad Request: Invalid GUID format Causes: Malformed GUID string Missing hyphens in GUID Non-hexadecimal characters Solution: // Correct GUID format \"f47ac10b-58cc-4372-a567-0e02b2c3d479\" // Invalid formats \"f47ac10b58cc43720e02b2c3d479\" // Missing hyphens \"g47ac10b-58cc-4372-a567-0e02b2c3d479\" // Invalid character 'g' 2. JSON Serialization Issues Problem: Authentication fails with valid GUID Root Cause: Property name case mismatch between client and server Solution: Configure camelCase JSON serialization: builder.Services.AddControllers() .AddJsonOptions(options => { options.JsonSerializerOptions.PropertyNamingPolicy = System.Text.Json.JsonNamingPolicy.CamelCase; }); 3. CORS Issues Problem: Browser requests blocked by CORS policy Solution: Verify CORS configuration includes all required origins: builder.Services.AddCors(options => { options.AddDefaultPolicy(builder => { builder.WithOrigins(\"https://localhost:9091\", \"http://localhost:9090\") .AllowAnyHeader() .AllowAnyMethod(); }); }); Debugging Tools Logging Analysis Monitor these log patterns for troubleshooting: [INFO] NOOR-HOSTPROV: Generating host token for session 100 [INFO] NOOR-HOSTPROV: Host token generated successfully for session 100 [INFO] NOOR-INFO: Host authentication attempt for GUID: f47ac10b... [SUCCESS] NOOR-SUCCESS: Host GUID format validated [ERROR] NOOR-ERROR: Host authentication failed Testing Endpoints Status Check: curl -X GET https://localhost:9091/api/hostprovisioner/status -k Expected Response: { \"status\": \"operational\", \"service\": \"HostProvisioner API\", \"timestamp\": \"2025-09-13T15:30:00Z\" } Developer Quick Reference Ready-to-Use Test Tokens For development and testing, use these pre-validated GUIDs: f47ac10b-58cc-4372-a567-0e02b2c3d479 3cbd173a-a146-4049-9f50-e33eb9ee2f2c fa4a5e78-6ebd-4fad-bd9f-95e214e0c3cf Quick Commands Generate Token (cURL) curl -X POST https://localhost:9091/api/hostprovisioner/generate \\ -H \"Content-Type: application/json\" \\ -d '{\"sessionId\": 100, \"createdBy\": \"Your Name\"}' \\ -k Authenticate Token (cURL) curl -X POST https://localhost:9091/api/host/authenticate \\ -H \"Content-Type: application/json\" \\ -d '{\"hostGuid\": \"f47ac10b-58cc-4372-a567-0e02b2c3d479\"}' \\ -k PowerShell Quick Commands Generate New Token: $request = @{ sessionId = 100; createdBy = \"Test User\" } | ConvertTo-Json $response = Invoke-RestMethod -Uri \"https://localhost:9091/api/hostprovisioner/generate\" -Method Post -Body $request -ContentType \"application/json\" -SkipCertificateCheck Write-Host \"New Host GUID: $($response.hostGuid)\" Test Authentication: $auth = @{ hostGuid = \"f47ac10b-58cc-4372-a567-0e02b2c3d479\" } | ConvertTo-Json $result = Invoke-RestMethod -Uri \"https://localhost:9091/api/host/authenticate\" -Method Post -Body $auth -ContentType \"application/json\" -SkipCertificateCheck Write-Host \"Success: $($result.success)\" Write-Host \"Session Token: $($result.sessionToken)\" Direct Dashboard Access Navigate to: https://localhost:9091/host/dashboard?guid=YOUR-GUID Integration Examples JavaScript Client Integration class HostTokenManager { constructor(baseUrl = 'https://localhost:9091') { this.baseUrl = baseUrl; } async generateToken(sessionId, createdBy) { try { const response = await fetch(`${this.baseUrl}/api/hostprovisioner/generate`, { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ sessionId, createdBy }) }); return await response.json(); } catch (error) { console.error('Token generation failed:', error); throw error; } } async authenticate(hostGuid) { try { const response = await fetch(`${this.baseUrl}/api/host/authenticate`, { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ hostGuid }) }); return await response.json(); } catch (error) { console.error('Authentication failed:', error); throw error; } } } // Usage const tokenManager = new HostTokenManager(); const token = await tokenManager.generateToken(100, \"JavaScript Host\"); const auth = await tokenManager.authenticate(token.hostGuid); C# Client Integration public class HostTokenClient { private readonly HttpClient _httpClient; private readonly string _baseUrl; public HostTokenClient(HttpClient httpClient, string baseUrl = \"https://localhost:9091\") { _httpClient = httpClient; _baseUrl = baseUrl; } public async Task<HostTokenResponse> GenerateTokenAsync(int sessionId, string createdBy) { var request = new { sessionId, createdBy }; var json = JsonSerializer.Serialize(request); var content = new StringContent(json, Encoding.UTF8, \"application/json\"); var response = await _httpClient.PostAsync($\"{_baseUrl}/api/hostprovisioner/generate\", content); response.EnsureSuccessStatusCode(); var responseJson = await response.Content.ReadAsStringAsync(); return JsonSerializer.Deserialize<HostTokenResponse>(responseJson); } public async Task<HostAuthResponse> AuthenticateAsync(string hostGuid) { var request = new { hostGuid }; var json = JsonSerializer.Serialize(request); var content = new StringContent(json, Encoding.UTF8, \"application/json\"); var response = await _httpClient.PostAsync($\"{_baseUrl}/api/host/authenticate\", content); response.EnsureSuccessStatusCode(); var responseJson = await response.Content.ReadAsStringAsync(); return JsonSerializer.Deserialize<HostAuthResponse>(responseJson); } } Performance Considerations Token Generation Performance Throughput: ~1,000 tokens/second typical Memory Usage: <1KB per token operation CPU Impact: Minimal (cryptographic operations optimized) Database Considerations (Future) For Phase 3+ database integration: -- Recommended indexes CREATE INDEX IX_HostTokens_HostGuid ON HostTokens(HostGuid); CREATE INDEX IX_HostTokens_CreatedAt ON HostTokens(CreatedAt); CREATE INDEX IX_HostTokens_IsActive ON HostTokens(IsActive) WHERE IsActive = 1; Related Documentation NOOR Canvas Security Model Authentication Integration Guide Database Schema Reference API Reference Guide Version History Version Date Changes 1.0.0 2025-09-13 Initial documentation 1.1.0 2025-09-13 Added Phase 2 implementation details 1.2.0 2025-09-13 Enhanced troubleshooting section This documentation is part of the NOOR Canvas project. For technical support, please refer to the project issue tracker."
  },
  "articles/technical/integration-examples/index.html": {
    "href": "articles/technical/integration-examples/index.html",
    "title": "Integration Examples | NOOR CANVAS Documentation",
    "summary": "Integration Examples Code examples and integration patterns for NOOR Canvas. API Integration C# client examples JavaScript/TypeScript integration REST API consumption patterns SignalR Integration Real-time client connections Event handling examples Connection management Database Integration Entity Framework usage patterns Cross-database query examples Migration procedures Note: Complete integration examples will be provided as features are implemented."
  },
  "articles/technical/security-model.html": {
    "href": "articles/technical/security-model.html",
    "title": "Security Model | NOOR CANVAS Documentation",
    "summary": "Security Model Overview NOOR CANVAS implements a comprehensive security model designed for Islamic educational content sharing with emphasis on data protection, secure communication, and user privacy. Authentication & Authorization GUID-based Session Management NOOR CANVAS uses a novel GUID-based authentication system instead of traditional user accounts: public class SessionSecurity { // Host token generation (cryptographically secure) public Guid GenerateHostToken() { return Guid.NewGuid(); // UUIDv4 - 128-bit random identifier } // Session validation public async Task<bool> ValidateSessionAccess(Guid sessionGuid, Guid hostToken) { var session = await _context.Sessions .FirstOrDefaultAsync(s => s.Guid == sessionGuid && s.HostToken == hostToken); return session != null && session.Status == \"Active\"; } } No Traditional Authentication Required No Passwords: Eliminates password-related security risks Token-based Access: Secure GUID tokens for session access Time-limited Sessions: Automatic expiration for security Host Control: Session creators have full administrative control Data Protection Database Security SQL Injection Prevention // All queries use parameterized statements public async Task<Session> GetSessionAsync(Guid sessionGuid) { return await _context.Sessions .Where(s => s.Guid == sessionGuid) // Parameterized automatically .FirstOrDefaultAsync(); } Schema Isolation Dedicated Canvas Schema: Isolated from other application data Minimal Cross-Schema Access: Read-only access to dbo schema Proper Permissions: Service account with minimal required privileges Sensitive Data Handling public class ParticipantSecurity { // Hash sensitive data before storage public string HashFingerprint(string fingerprint) { using var sha256 = SHA256.Create(); var hashBytes = sha256.ComputeHash(Encoding.UTF8.GetBytes(fingerprint + _salt)); return Convert.ToBase64String(hashBytes); } // IP address hashing for privacy public string HashIpAddress(string ipAddress) { using var sha256 = SHA256.Create(); var hashBytes = sha256.ComputeHash(Encoding.UTF8.GetBytes(ipAddress + _salt)); return Convert.ToBase64String(hashBytes); } } Communication Security HTTPS Enforcement // Startup configuration public void Configure(IApplicationBuilder app, IWebHostEnvironment env) { if (!env.IsDevelopment()) { app.UseHsts(); // HTTP Strict Transport Security app.UseHttpsRedirection(); // Force HTTPS } // Security headers app.Use((context, next) => { context.Response.Headers.Add(\"X-Content-Type-Options\", \"nosniff\"); context.Response.Headers.Add(\"X-Frame-Options\", \"DENY\"); context.Response.Headers.Add(\"X-XSS-Protection\", \"1; mode=block\"); return next(); }); } SignalR Security public class SecureHub : Hub { public override async Task OnConnectedAsync() { var sessionId = Context.GetHttpContext()?.Request.Query[\"sessionId\"]; var hostToken = Context.GetHttpContext()?.Request.Query[\"hostToken\"]; // Validate session access before allowing connection if (!await _securityService.ValidateAccess(sessionId, hostToken)) { _logger.LogWarning(\"Unauthorized SignalR connection attempt from {ConnectionId}\", Context.ConnectionId); Context.Abort(); return; } await base.OnConnectedAsync(); } // Message validation for all hub methods public async Task SendMessage(string sessionId, string message) { if (!await ValidateMessageContent(message)) { await Clients.Caller.SendAsync(\"Error\", \"Invalid message content\"); return; } await Clients.Group(sessionId).SendAsync(\"ReceiveMessage\", message); } } Input Validation & Sanitization Content Security public class ContentValidator { public bool ValidateAnnotationData(AnnotationData annotation) { // Validate coordinate ranges if (annotation.Coordinates?.Any(c => c < 0 || c > 2000) == true) return false; // Validate color format (hex colors only) if (!Regex.IsMatch(annotation.Color ?? \"\", @\"^#[0-9A-Fa-f]{6}$\")) return false; // Validate thickness range if (annotation.Thickness < 1 || annotation.Thickness > 50) return false; return true; } public string SanitizeTextInput(string input) { if (string.IsNullOrWhiteSpace(input)) return string.Empty; // Remove potentially dangerous HTML return HttpUtility.HtmlEncode(input.Trim()); } } Islamic Content Considerations Cultural Sensitivity: Validation of appropriate content Arabic Text Validation: RTL text handling and validation Religious Content Filtering: Ensures appropriate Islamic educational content Privacy Protection Participant Privacy public class PrivacyService { public ParticipantDisplay CreatePublicProfile(Participant participant) { return new ParticipantDisplay { DisplayName = SanitizeName(participant.Name), Country = participant.Country, // Optional, user-provided City = participant.City, // Optional, user-provided JoinTime = participant.JoinTime, // Never expose: IP, fingerprint hashes, internal IDs }; } } Data Minimization Collect Only Necessary Data: Minimal participant information Automatic Data Cleanup: Session data expiration No Persistent Tracking: Session-based interaction only Optional Geographic Data: User choice for location sharing Logging & Monitoring Security Secure Logging public class SecureLogger { public void LogSecurityEvent(string eventType, object data) { var sanitizedData = SanitizeLogData(data); _logger.LogWarning(\"NOOR-SECURITY: {EventType} - {Data}\", eventType, JsonSerializer.Serialize(sanitizedData)); } private object SanitizeLogData(object data) { // Remove sensitive fields from log data var json = JsonSerializer.Serialize(data); var doc = JsonDocument.Parse(json); // Remove sensitive properties var sanitized = RemoveSensitiveFields(doc.RootElement, [\"password\", \"token\", \"hash\", \"fingerprint\", \"ip\"]); return sanitized; } } Security Monitoring Failed Authentication Attempts: Track invalid session access Suspicious Activity: Monitor unusual annotation patterns Rate Limiting: Prevent abuse and spam Connection Monitoring: Track SignalR connection anomalies Compliance & Best Practices Islamic Ethics in Security Trust and Transparency: Clear security practices Privacy Respect: Minimal data collection aligned with Islamic values Community Safety: Protection from harmful content Educational Focus: Security measures support learning objectives Technical Security Standards OWASP Compliance: Following web security best practices Data Encryption: In-transit and at-rest encryption Regular Security Reviews: Ongoing security assessment Vulnerability Management: Prompt security updates Development Security Secure Development Practices // Example: Secure configuration management public class SecurityConfiguration { public void ConfigureServices(IServiceCollection services) { // Secure session configuration services.Configure<SessionSecurityOptions>(options => { options.SessionTimeout = TimeSpan.FromHours(2); options.RequireHttps = true; options.SecureSessionTokens = true; options.EnableRateLimiting = true; }); } } Security Testing Penetration Testing: Regular security assessments Code Security Reviews: Static analysis for vulnerabilities Dependency Scanning: Third-party library security checks Authentication Testing: Session security validation For implementation details, see Database Schema and SignalR Integration"
  },
  "articles/technical/signalr-integration.html": {
    "href": "articles/technical/signalr-integration.html",
    "title": "SignalR Integration Guide | NOOR CANVAS Documentation",
    "summary": "SignalR Integration Guide Overview NOOR CANVAS uses SignalR for real-time communication, enabling live collaboration, annotation synchronization, and instant participant feedback. Hub Architecture Core SignalR Hubs SessionHub - Session Management public class SessionHub : Hub { public async Task JoinSession(string sessionId) { await Groups.AddToGroupAsync(Context.ConnectionId, $\"session_{sessionId}\"); await Clients.Group($\"session_{sessionId}\").SendAsync(\"UserJoined\", Context.ConnectionId); } public async Task LeaveSession(string sessionId) { await Groups.RemoveFromGroupAsync(Context.ConnectionId, $\"session_{sessionId}\"); await Clients.Group($\"session_{sessionId}\").SendAsync(\"UserLeft\", Context.ConnectionId); } } AnnotationHub - Real-time Drawing public class AnnotationHub : Hub { public async Task SendAnnotation(string sessionId, AnnotationData data) { await Clients.Group($\"session_{sessionId}\").SendAsync(\"ReceiveAnnotation\", data); } public async Task ClearCanvas(string sessionId) { await Clients.Group($\"session_{sessionId}\").SendAsync(\"CanvasCleared\"); } } Client-Side Integration Blazor Server Connection Connection Establishment const connection = new signalR.HubConnectionBuilder() .withUrl(\"/hub/session\") .configureLogging(signalR.LogLevel.Information) .build(); // Start connection await connection.start(); Real-time Event Handling // Listen for annotation updates connection.on(\"ReceiveAnnotation\", function (data) { renderAnnotation(data); updateCanvas(data); }); // Handle participant changes connection.on(\"UserJoined\", function (connectionId) { updateParticipantList(); showNotification(\"New participant joined\"); }); Performance Optimizations Connection Management Connection Pooling: Efficient connection reuse Automatic Reconnection: Handles network interruptions Heartbeat Monitoring: Connection health checks Graceful Degradation: Fallback mechanisms Message Optimization // Efficient message structure public class AnnotationData { public string Type { get; set; } // draw, erase, clear public int[] Coordinates { get; set; } // compressed coordinates public string Color { get; set; } // hex color code public int Thickness { get; set; } // line thickness public long Timestamp { get; set; } // client timestamp } Scalability Features Group Management: Session-based message routing Message Compression: Reduced bandwidth usage Client-side Caching: Optimized rendering Selective Updates: Only send necessary changes Security Implementation Connection Authentication public class SessionHub : Hub { public override async Task OnConnectedAsync() { var sessionId = Context.GetHttpContext()?.Request.Query[\"sessionId\"]; var isValidSession = await ValidateSessionAccess(sessionId); if (!isValidSession) { Context.Abort(); return; } await base.OnConnectedAsync(); } } Message Validation Input Sanitization: All messages validated Rate Limiting: Prevents spam and abuse Session Verification: Ensures user belongs to session Data Encryption: Secure message transmission Error Handling Connection Errors connection.onclose(async () => { console.log(\"Connection closed. Attempting to reconnect...\"); await startConnection(); }); connection.onreconnecting(() => { console.log(\"Attempting to reconnect...\"); showConnectionStatus(\"Reconnecting...\"); }); connection.onreconnected(() => { console.log(\"Successfully reconnected.\"); showConnectionStatus(\"Connected\"); }); Server-side Error Handling public class AnnotationHub : Hub { public async Task SendAnnotation(string sessionId, AnnotationData data) { try { await ValidateAnnotationData(data); await SaveAnnotation(sessionId, data); await Clients.Group($\"session_{sessionId}\").SendAsync(\"ReceiveAnnotation\", data); } catch (Exception ex) { _logger.LogError(ex, \"Failed to process annotation for session {SessionId}\", sessionId); await Clients.Caller.SendAsync(\"AnnotationError\", \"Failed to process annotation\"); } } } Configuration Startup Configuration // Program.cs builder.Services.AddSignalR(options => { options.EnableDetailedErrors = builder.Environment.IsDevelopment(); options.HandshakeTimeout = TimeSpan.FromSeconds(15); options.KeepAliveInterval = TimeSpan.FromSeconds(15); options.ClientTimeoutInterval = TimeSpan.FromSeconds(30); }); // Configure endpoints app.MapHub<SessionHub>(\"/hub/session\"); app.MapHub<AnnotationHub>(\"/hub/annotation\"); app.MapHub<ParticipantHub>(\"/hub/participant\"); app.MapHub<QuestionHub>(\"/hub/question\"); Client Configuration const connection = new signalR.HubConnectionBuilder() .withUrl(\"/hub/session\", { transport: signalR.HttpTransportType.WebSockets | signalR.HttpTransportType.LongPolling }) .withAutomaticReconnect([0, 2000, 10000, 30000]) .configureLogging(signalR.LogLevel.Information) .build(); Testing SignalR Integration Unit Testing Hubs [Test] public async Task SessionHub_JoinSession_AddsToGroup() { // Arrange var hub = new SessionHub(); var context = CreateMockHubContext(); hub.Context = context; // Act await hub.JoinSession(\"test-session\"); // Assert VerifyGroupMembership(\"session_test-session\", context.ConnectionId); } Integration Testing [Test] public async Task SignalR_AnnotationFlow_WorksEndToEnd() { // Test full annotation workflow var connection = await CreateTestConnection(); var annotation = CreateTestAnnotation(); await connection.InvokeAsync(\"SendAnnotation\", \"test-session\", annotation); var receivedAnnotation = await WaitForAnnotation(); Assert.AreEqual(annotation.Data, receivedAnnotation.Data); } For more implementation details, see Getting Started Guide"
  },
  "articles/technical/ssl-certificate-configuration.html": {
    "href": "articles/technical/ssl-certificate-configuration.html",
    "title": "SSL Certificate Trust Configuration - Technical Reference | NOOR CANVAS Documentation",
    "summary": "SSL Certificate Trust Configuration - Technical Reference Purpose: Technical documentation for resolving SSL certificate trust issues in NOOR CANVAS development environment Audience: Developers, system administrators, DevOps engineers Last Updated: September 13, 2025 \uD83C\uDFAF Problem Overview Issue Description SSL certificate validation preventing Entity Framework database connections in development environment, causing authentication failures and application startup issues. Error Signature: Microsoft.Data.SqlClient.SqlException: A connection was attempted to a database that is not available. The certificate chain was issued by an authority that is not trusted. SSL Provider: The certificate chain was issued by an authority that is not trusted. Impact Assessment Authentication System: Host authentication completely non-functional Database Operations: All Entity Framework queries failing Application Startup: Successful server start but runtime database failures Development Workflow: Unable to test authentication flows locally \uD83D\uDD27 Technical Solution SSL Certificate Bypass Configuration Implementation Approach: Configure SQL Server connection strings to bypass SSL certificate validation in development environment only. Configuration Files Modified 1. appsettings.Development.json (Primary Fix) { \"ConnectionStrings\": { \"DefaultConnection\": \"Server=AHHOME;Database=KSESSIONS_DEV;User Id=sa;Password=adf4961glo;TrustServerCertificate=true;Encrypt=false;Integrated Security=false;\", \"KSessionsDb\": \"Server=AHHOME;Database=KSESSIONS_DEV;User Id=sa;Password=adf4961glo;TrustServerCertificate=true;Encrypt=false;Integrated Security=false;\", \"KQurDb\": \"Server=AHHOME;Database=KQUR_DEV;User Id=sa;Password=adf4961glo;TrustServerCertificate=true;Encrypt=false;Integrated Security=false;\" } } 2. appsettings.json (Baseline Configuration) { \"ConnectionStrings\": { \"DefaultConnection\": \"Server=AHHOME;Database=KSESSIONS_DEV;User Id=sa;Password=adf4961glo;TrustServerCertificate=true;Encrypt=false;Integrated Security=false;\", \"KSessionsDb\": \"Server=AHHOME;Database=KSESSIONS_DEV;User Id=sa;Password=adf4961glo;TrustServerCertificate=true;Encrypt=false;Integrated Security=false;\", \"KQurDb\": \"Server=AHHOME;Database=KQUR_DEV;User Id=sa;Password=adf4961glo;TrustServerCertificate=true;Encrypt=false;Integrated Security=false;\" } } Key Parameters Explained TrustServerCertificate=true Purpose: Bypasses SSL certificate validation chain Effect: Accepts self-signed or untrusted certificates Security Impact: Acceptable for development environment only Production Usage: ⚠️ NEVER use in production without proper certificates Encrypt=false Purpose: Disables SQL Server connection encryption Effect: Reduces SSL overhead and certificate requirements Performance Impact: Slight improvement in development environment Production Usage: ⚠️ Should be true in production for security Integrated Security=false Purpose: Uses SQL Server authentication instead of Windows authentication Effect: Relies on User Id/Password in connection string Compatibility: Required for cross-platform development Alternative: Can use Integrated Security=true with Windows authentication \uD83D\uDEE0 Implementation Steps Step 1: Update Development Configuration # Navigate to project directory cd \"D:\\PROJECTS\\NOOR CANVAS\\SPA\\NoorCanvas\" # Edit appsettings.Development.json # Add SSL bypass parameters to all connection strings: # - TrustServerCertificate=true # - Encrypt=false # - Integrated Security=false (if using SQL auth) Step 2: Verify Configuration Override // In application startup, verify configuration loading public static void Main(string[] args) { var builder = WebApplication.CreateBuilder(args); // Development configuration should override base settings var connectionString = builder.Configuration.GetConnectionString(\"DefaultConnection\"); Console.WriteLine($\"Connection includes SSL bypass: {connectionString?.Contains(\"TrustServerCertificate=true\")}\"); } Step 3: Test Database Connectivity # Start application in development environment dotnet run --urls \"https://localhost:9091;http://localhost:9090\" --environment Development # Verify no SSL certificate errors in application logs # Look for successful Entity Framework queries Step 4: Validate Authentication Flow # Test host authentication endpoint curl -X POST https://localhost:9091/api/host/authenticate \\ -H \"Content-Type: application/json\" \\ -d '{\"hostGuid\": \"XQmUFUnFdjvsWq4IJhUU9b9mRSn7YHuZql/JMWaxFrM=\"}' \\ -k # -k flag ignores SSL certificate errors for testing \uD83E\uDDEA Testing & Validation Automated Test Suite Location: Tests/NoorCanvas.Core.Tests/Infrastructure/SslConfigurationTestHarness.cs [Fact] public void DefaultConnection_SslBypassConfiguration_ShouldConnectSuccessfully() { // Validates SSL bypass parameters in connection string // Tests actual database connectivity // Verifies no SSL certificate errors } Manual Testing Checklist [ ] Application starts without SSL certificate errors in logs [ ] Host authentication accepts valid GUIDs without database errors [ ] Entity Framework queries execute successfully [ ] SignalR connections establish without certificate warnings [ ] Performance remains acceptable (sub-5-second authentication) Performance Benchmarks Authentication Response Time: < 500ms (target < 1000ms) Database Query Execution: < 100ms for simple queries Application Startup Time: < 30 seconds Memory Usage: Stable with no SSL-related memory leaks \uD83D\uDEA8 Security Considerations Development Environment Only ⚠️ CRITICAL: This SSL bypass configuration is ONLY suitable for development environments. Production Requirements For production deployment: { \"ConnectionStrings\": { \"DefaultConnection\": \"Server=ProductionServer;Database=KSESSIONS;User Id=ProductionUser;Password=SecurePassword;Encrypt=true;TrustServerCertificate=false;\" } } Certificate Management for Production Install Valid SSL Certificates on production SQL Server Use Encrypt=true for data protection in transit Set TrustServerCertificate=false to enforce certificate validation Implement Certificate Rotation procedures Monitor Certificate Expiration dates \uD83D\uDD0D Troubleshooting Guide Common SSL Certificate Errors Error 1: Certificate Chain Not Trusted The certificate chain was issued by an authority that is not trusted Solution: Add TrustServerCertificate=true to connection string Error 2: Certificate Name Mismatch The target principal name is incorrect Solution: Verify server name in connection string matches SQL Server instance Error 3: Encryption Not Supported Encryption is not supported on SQL Server Solution: Add Encrypt=false to disable encryption requirement Diagnostic Commands Test Raw SQL Connection # PowerShell test connection $connectionString = \"Server=AHHOME;Database=KSESSIONS_DEV;User Id=sa;Password=adf4961glo;TrustServerCertificate=true;Encrypt=false;\" $connection = New-Object System.Data.SqlClient.SqlConnection($connectionString) try { $connection.Open() Write-Host \"✅ Connection successful\" $connection.Close() } catch { Write-Host \"❌ Connection failed: $($_.Exception.Message)\" } Check SQL Server SSL Configuration -- Check SQL Server encryption settings SELECT name, value_in_use FROM sys.configurations WHERE name LIKE '%encrypt%' OR name LIKE '%ssl%'; -- Verify certificate information SELECT certificate_id, name, subject, expiry_date FROM sys.certificates; Configuration Validation // Validate connection string parameters public static bool ValidateSslBypassConfig(string connectionString) { return connectionString.Contains(\"TrustServerCertificate=true\", StringComparison.OrdinalIgnoreCase) && connectionString.Contains(\"Encrypt=false\", StringComparison.OrdinalIgnoreCase); } \uD83D\uDCCA Monitoring & Maintenance Application Health Checks // Health check for database connectivity public class DatabaseHealthCheck : IHealthCheck { public async Task<HealthCheckResult> CheckHealthAsync(HealthCheckContext context, CancellationToken cancellationToken = default) { try { // Test database connection without exposing SSL certificate errors await _context.Database.CanConnectAsync(cancellationToken); return HealthCheckResult.Healthy(\"Database connection successful\"); } catch (SqlException ex) when (ex.Message.Contains(\"certificate\")) { return HealthCheckResult.Unhealthy(\"SSL certificate configuration error\", ex); } } } Logging Configuration // Enhanced logging for SSL-related issues builder.Services.AddLogging(config => { config.AddFilter(\"Microsoft.EntityFrameworkCore.Database.Connection\", LogLevel.Information); config.AddFilter(\"Microsoft.Data.SqlClient\", LogLevel.Warning); }); \uD83D\uDD17 Related Documentation Issue-25: Host Authentication Failure with Valid GUID Implementation Tracker: Phase 3 SSL Configuration Test Harnesses: SSL Configuration Tests User Guide: Host Authentication User Guide \uD83D\uDCDD Change Log September 13, 2025 Initial Documentation: Created comprehensive SSL configuration reference Test Suite: Implemented automated SSL configuration validation Issue Resolution: Completed Issue-25 with SSL bypass solution Production Notes: Added security considerations and production requirements Future Updates Production certificate installation procedures Certificate rotation automation Advanced SSL troubleshooting scenarios Performance optimization for encrypted connections"
  },
  "articles/technical/testing-framework-technical-reference.html": {
    "href": "articles/technical/testing-framework-technical-reference.html",
    "title": "Testing Framework Technical Reference | NOOR CANVAS Documentation",
    "summary": "Testing Framework Technical Reference Comprehensive technical documentation for NOOR Canvas automated testing system. Testing Architecture 1. Test Framework Stack ┌─────────────────────────────────────────┐ │ User Interface │ ├─────────────────────────────────────────┤ │ VS Code Tasks & Git Hooks │ ├─────────────────────────────────────────┤ │ PowerShell Test Orchestration │ ├─────────────────────────────────────────┤ │ Smart Caching Layer │ ├─────────────────────────────────────────┤ │ MSTest & xUnit │ ├─────────────────────────────────────────┤ │ .NET Test Host Runtime │ └─────────────────────────────────────────┘ 2. Smart Caching Implementation Hash Calculation Algorithm public class SourceCodeHasher { public static string CalculateHash(string[] sourcePaths) { var files = sourcePaths .SelectMany(path => Directory.GetFiles(path, \"*.cs\", SearchOption.AllDirectories)) .Concat(sourcePaths.SelectMany(path => Directory.GetFiles(path, \"*.cshtml\", SearchOption.AllDirectories))) .Concat(sourcePaths.SelectMany(path => Directory.GetFiles(path, \"*.razor\", SearchOption.AllDirectories))) .OrderBy(f => f) .ToArray(); using var sha256 = SHA256.Create(); var combinedContent = string.Join(\"\", files.Select(File.ReadAllText)); return Convert.ToBase64String(sha256.ComputeHash(Encoding.UTF8.GetBytes(combinedContent))); } } Cache Management Location: .test-cache/ and .build-cache/ directories Persistence: File-based cache storage Invalidation: Automatic on source file modifications Cleanup: Manual cache clearing options 3. Test Execution Modes Post-Build Testing (.hooks/post-build.ps1) # Execution pattern if (Test-BuildArtifactChanged) { Invoke-TestSuite -Configuration $Configuration Update-BuildCache } else { Write-Host \"Build artifacts unchanged - skipping tests\" } Pre-Commit Testing (.hooks/pre-commit-test.ps1) # Validation pattern $sourceHash = Get-SourceCodeHash $lastHash = Get-CachedHash if ($sourceHash -ne $lastHash -or $Force) { $result = Invoke-TestSuite if ($result.Failed) { exit 1 } Set-CachedHash $sourceHash } Test Categories 1. Unit Tests (Tests/NoorCanvas.Core.Tests/) Controllers: API endpoint testing Services: Business logic validation Models: Data model validation Utilities: Helper function testing 2. Integration Tests (Tests/NC-ImplementationTests/) Database: Entity Framework integration SignalR: Real-time communication testing Authentication: Session validation Cross-component: End-to-end workflows 3. Implementation Tests (Tests/APPLICATION-HEALTH-HARNESS-GUIDE.md) Phase validation: Implementation milestone testing System health: Application health checks Performance: Load and stress testing Compatibility: Browser and platform testing Configuration Management Test Configuration Files // Tests/NoorCanvas.Core.Tests/appsettings.Test.json { \"ConnectionStrings\": { \"DefaultConnection\": \"Server=AHHOME;Database=KSESSIONS_DEV;...\", \"KSessionsDb\": \"Server=AHHOME;Database=KSESSIONS_DEV;...\" }, \"Logging\": { \"LogLevel\": { \"Default\": \"Information\", \"Microsoft.AspNetCore\": \"Warning\" } } } PowerShell Configuration # .hooks/test-config.ps1 $TestConfig = @{ CacheDir = \".test-cache\" BuildCacheDir = \".build-cache\" TestTimeout = 300 # 5 minutes RetryAttempts = 3 ParallelExecution = $true } Performance Metrics Execution Times (Average) Unit Tests: 2-5 seconds Integration Tests: 5-15 seconds Full Test Suite: 10-30 seconds Cache Hit: <0.1 seconds Success Rates (Target) Build Success: >95% Test Pass Rate: >98% Cache Hit Rate: >80% CI/CD Success: >90% Integration Points GitHub Actions Integration # .github/workflows/build-and-test.yml name: Build and Test on: [push, pull_request] jobs: test: runs-on: windows-latest steps: - uses: actions/checkout@v3 - name: Setup .NET uses: actions/setup-dotnet@v3 - name: Run Tests run: .hooks/run-comprehensive-tests.ps1 Visual Studio Code Integration // .vscode/tasks.json { \"label\": \"run-tests\", \"type\": \"shell\", \"command\": \"powershell.exe\", \"args\": [\".hooks/post-build.ps1\", \"-Verbose\"], \"group\": \"test\" } Troubleshooting Common Issues Test Failures: Detailed logging and error reporting Cache Corruption: Automatic cache validation and cleanup Environment Issues: Configuration validation and setup Performance Problems: Parallel execution and optimization Debugging Commands # Manual test execution .hooks/pre-commit-test.ps1 -Force -Verbose # Cache management Remove-Item .test-cache -Recurse -Force Remove-Item .build-cache -Recurse -Force # Test suite validation dotnet test --logger \"console;verbosity=detailed\" Extension Points Custom Test Runners API Testing: REST client integration UI Testing: Selenium WebDriver integration Performance Testing: Load testing framework integration Security Testing: Security scan integration Reporting Integration Test Results: XML and JSON output formats Coverage Reports: Code coverage analysis Performance Reports: Execution time tracking Quality Gates: Pass/fail criteria configuration This technical reference is automatically updated as testing framework enhancements are implemented."
  },
  "articles/user-guides/automated-testing-user-guide.html": {
    "href": "articles/user-guides/automated-testing-user-guide.html",
    "title": "Automated Testing System User Guide | NOOR CANVAS Documentation",
    "summary": "Automated Testing System User Guide Overview NOOR Canvas includes a comprehensive automated testing system that runs tests automatically during development without requiring manual intervention. This ensures code quality and catches issues early in the development process. How Automated Testing Works Automatic Test Execution Tests run automatically in two scenarios: After Every Build: When you build the project, tests run automatically if the build output has changed Before Every Commit: When you commit code to Git, tests run to ensure you're not committing broken code Smart Caching System The testing system is intelligent and won't run unnecessary tests: If you build the same code twice, tests only run the first time If you haven't changed any source code since the last test, tests are skipped This saves time while ensuring thorough testing What Tests Are Included Build Verification Tests Project Compilation: Ensures all C# code compiles correctly Dependency Resolution: Verifies all NuGet packages are available Configuration Validation: Checks app settings and connection strings Functional Tests API Endpoints: Tests all REST API endpoints respond correctly Database Connectivity: Verifies database connections work SignalR Hubs: Tests real-time communication components Integration Tests Host Token Generation: Tests the token creation process Session Management: Verifies session creation and management Cross-Database Access: Tests KSESSIONS and KQUR database integration Using the Automated Testing System Normal Development Workflow You don't need to do anything special - testing happens automatically: Write Code: Make your changes as usual Build Project: Run dotnet build or use VS Code build (Ctrl+Shift+B) Tests Run Automatically: If anything changed, tests execute and show results Commit Changes: Use git commit - tests run again to ensure commit safety Manual Testing Commands If you want to run tests manually: # Run tests after build (manual) .hooks\\post-build.ps1 # Run tests with detailed output .hooks\\post-build.ps1 -Verbose # Skip automatic tests during build .hooks\\post-build.ps1 -SkipTests Force Test Execution Sometimes you want to run tests even if nothing changed: # Force tests regardless of cache .hooks\\pre-commit-test.ps1 -Force # Force with detailed output .hooks\\pre-commit-test.ps1 -Force -Verbose Understanding Test Results Successful Tests When all tests pass, you'll see: ✅ All tests passed (X tests, Y assertions) \uD83D\uDE80 Build and tests completed successfully Failed Tests When tests fail, you'll see: ❌ Tests failed (X passed, Y failed) \uD83D\uDD0D See test output above for details Test Skipping When tests are skipped due to no changes: ⚡ Tests skipped - no changes since last run \uD83D\uDCBE Using cached test results: PASSED Test Categories Critical Tests (Must Pass) Database connection and schema validation API endpoint availability and response format Core application startup and configuration Warning Tests (Should Pass) Code style and formatting Performance benchmarks Documentation completeness Information Tests (Nice to Have) Code coverage metrics Dependency security scans Build performance timing Troubleshooting Test Issues Tests Keep Running When Nothing Changed This usually means cached test results aren't working: # Clear test cache Remove-Item .test-cache -Recurse -Force Remove-Item .build-cache -Recurse -Force Tests Fail After Working Previously Check Recent Changes: What code did you modify? Database Issues: Ensure KSESSIONS_DEV database is running Port Conflicts: Run iiskill to stop conflicting processes Clean Build: Try dotnet clean followed by dotnet build Need to Commit Despite Test Failures (Emergency) In rare emergencies, you can bypass tests: # Skip pre-commit tests (use sparingly!) git commit --no-verify -m \"emergency: bypass tests for critical fix\" Tests Take Too Long The smart caching should make tests fast, but if they're still slow: Check for Database Issues: Slow database connections cause delays Review Test Scope: Some tests may be running unnecessarily Consider Parallel Execution: Tests can be configured to run in parallel Best Practices Writing Test-Friendly Code Small Functions: Easier to test individual pieces Clear Dependencies: Use dependency injection for testable code Error Handling: Proper exception handling makes tests more reliable Responding to Test Failures Don't Ignore Failures: Always investigate why tests failed Fix Root Causes: Don't just make tests pass, fix the underlying issue Update Tests: If requirements changed, update tests to match Using Test Results for Quality Green Builds: Aim to keep all tests passing all the time Quick Feedback: Pay attention to test results immediately after changes Team Communication: Share test failures with your team promptly Advanced Features Custom Test Configuration You can customize testing behavior by modifying test configuration files: .hooks/post-build.ps1: Controls after-build testing .hooks/pre-commit-test.ps1: Controls pre-commit testing Tests/: Contains actual test implementations CI/CD Integration The automated testing system integrates with: GitHub Actions: Runs full test suite on every push VS Code: Tests integrated into build tasks Command Line: Works with all standard Git and dotnet workflows Test Reporting Test results are available in multiple formats: Console Output: Real-time feedback during development Test Cache Files: Stored results for caching decisions CI/CD Artifacts: Downloadable reports from automated builds For technical implementation details, see the Automated Testing Technical Reference."
  },
  "articles/user-guides/development-workflow-user-guide.html": {
    "href": "articles/user-guides/development-workflow-user-guide.html",
    "title": "Development Workflow User Guide | NOOR CANVAS Documentation",
    "summary": "Development Workflow User Guide A user-friendly guide for NOOR Canvas development workflows. Getting Started Prerequisites Visual Studio Code with C# DevKit extension .NET 8.0 SDK installed Git for version control PowerShell 5.1 or later Initial Setup Clone the repository git clone https://github.com/asifhussain60/NOOR-CANVAS.git cd NOOR-CANVAS Open in VS Code code . Install dependencies dotnet restore Daily Development Workflow 1. Starting Development Use the global nc command to start the development server: nc This will: Generate a host token (if needed) Build the project Start IIS Express x64 on https://localhost:9091 No browser will open automatically 2. Making Code Changes Edit your code in VS Code Save files (Ctrl+S) The system automatically detects changes 3. Building and Testing The system automatically runs tests after builds: Build: Ctrl+Shift+B in VS Code Tests run automatically if source code changed Skip tests: Tests are skipped if no changes detected 4. Committing Changes git add . git commit -m \"Your commit message\" Tests run automatically before commit: Pass: Commit proceeds normally Fail: Commit is blocked until tests pass Available Commands Global Commands (Available Anywhere) nc - Start the development server nct - Generate host token ncdoc - View documentation iiskill - Stop all IIS Express processes Command Examples # Start development server nc # Start without token generation nc -SkipTokenGeneration # Get help nc -Help # View documentation ncdoc # Stop all servers iiskill Understanding the Development Environment Ports and URLs HTTPS: https://localhost:9091 (primary) HTTP: http://localhost:9090 (fallback) Documentation: Served by ncdoc command Project Structure NOOR CANVAS/ ├── SPA/NoorCanvas/ # Main application ├── Tests/ # Test projects ├── DocFX/ # Documentation ├── Workspaces/Global/ # Global commands └── .hooks/ # Automated scripts Working with Tests Automatic Testing Tests run automatically when: Building the project (if code changed) Committing code (if source changed) Running CI/CD pipelines Manual Testing # Run all tests dotnet test # Run specific test project dotnet test Tests/NoorCanvas.Core.Tests/ # Run with detailed output dotnet test --logger \"console;verbosity=detailed\" Understanding Test Results Green/Passed: All tests successful Red/Failed: Some tests failed, check output Skipped: Tests skipped due to no code changes Common Scenarios First Time Setup Run nc to start development server Navigate to https://localhost:9091 You should see the NOOR Canvas application Adding New Features Create your code changes Build with Ctrl+Shift+B Tests run automatically Commit when tests pass Fixing Issues Use iiskill to stop stuck processes Rebuild with dotnet clean and dotnet build Check logs in the terminal Refer to troubleshooting guides Switching Branches Stop development server with iiskill Switch branch: git checkout branch-name Restore packages: dotnet restore Start server: nc Troubleshooting Common Issues \"Port already in use\" iiskill nc \"Build failed\" Check the terminal output for errors Fix compilation errors Try dotnet clean and rebuild \"Tests failing\" Check test output for specific failures Fix the failing tests Use dotnet test --logger \"console;verbosity=detailed\" for details \"Can't commit\" Tests are probably failing. Fix tests first: # Run tests manually to see failures dotnet test # Fix issues, then try committing again git commit -m \"Your message\" Getting Help Documentation Resources User Guides: ncdoc → User Guides Technical Reference: ncdoc → Technical Issue Tracker: IssueTracker/ folder Implementation Guide: Workspaces/IMPLEMENTATION-TRACKER.MD Commands for Help nc -Help # Get nc command help ncdoc # View full documentation Support Channels Check existing issues in IssueTracker/ Review implementation tracker for current status Consult technical documentation for advanced scenarios This user guide is automatically updated as new features and workflows are added to NOOR Canvas."
  },
  "articles/user-guides/getting-started-guide.html": {
    "href": "articles/user-guides/getting-started-guide.html",
    "title": "Getting Started Guide | NOOR CANVAS Documentation",
    "summary": "Getting Started Guide Welcome to NOOR Canvas! This guide will help you get started with the Islamic content sharing platform. What is NOOR Canvas? NOOR Canvas is a real-time Islamic content sharing platform that enables: Live Sessions: Interactive Islamic learning sessions Real-time Collaboration: Annotations and discussions during sessions Islamic Content Integration: Access to Quranic verses, Hadith, and Islamic literature Global Participation: Connect Muslims worldwide for Islamic learning For New Users Joining Your First Session 1. Get Session Information Your session host will provide: Session GUID: Unique identifier (e.g., 123e4567-e89b-12d3-a456-426614174000) Session URL: Web address to join Session Name: Descriptive name of the Islamic content session 2. Join the Session Navigate to URL: Open the provided session URL in your web browser Enter Session GUID: Paste or type the Session GUID provided Provide Your Information: Name: Your preferred name for the session Country: Your country (optional) City: Your city (optional) Click Join Session 3. Participate in Session View Content: See Islamic content shared by the host Add Annotations: Click and annotate on shared content Ask Questions: Submit questions to the session host Collaborate: Interact with other participants respectfully Understanding the Interface Main Session View Content Area: Islamic content (Quran, Hadith, literature) displayed here Annotation Tools: Drawing, highlighting, and text annotation options Participant Panel: List of active session participants Q&A Section: Ask questions and view host responses Annotation Features Highlight Text: Select text to highlight important passages Draw: Use drawing tools to circle or underline content Add Notes: Click to add text notes and commentary Real-time Sync: See annotations from other participants instantly For Session Hosts Creating Your First Session 1. Setup (Development Environment) # Generate host token nct # Start application nc 2. Navigate to Host Interface Open: https://localhost:9091 (development) Click \"Host Session\" or similar option 3. Create Session Select Islamic Content: Choose Album (content collection) Select Category (topic area) Pick specific Session (individual lesson) Configure Session: Session Name: Descriptive title Duration: Expected length Participant Limit: Maximum attendees Start Session: Click \"Create Session\" Share generated Session GUID with participants 4. Manage Session Monitor Participants: Track who joins your session Guide Discussion: Use annotation tools to highlight key points Answer Questions: Respond to participant inquiries Maintain Respect: Ensure Islamic values and respect throughout Technical Requirements System Requirements Web Browser: Chrome, Firefox, Edge, or Safari (latest versions) Internet Connection: Stable broadband connection recommended Device: Desktop, laptop, tablet, or smartphone Operating System: Windows, macOS, Linux, iOS, or Android Browser Compatibility Chrome 90+: Full feature support including real-time annotations Firefox 88+: Complete functionality with WebSocket support Edge 90+: Optimized for Windows users with full features Safari 14+: macOS and iOS support with real-time capabilities Network Requirements Bandwidth: Minimum 1 Mbps for basic participation, 5 Mbps recommended for hosts WebSocket Support: Required for real-time annotation features HTTPS: Secure connection required for session participation Islamic Content Features Available Content Types Quranic Content Verses: Individual Ayahs with Arabic text and translations Chapters: Complete Surahs with commentary Themes: Topical organization of Quranic content Recitation: Audio integration where available Hadith Collections Authentic Collections: Sahih Bukhari, Sahih Muslim, and others Thematic Organization: Hadith organized by Islamic topics Chain of Narration: Complete Isnad information Scholarly Commentary: Expert annotations and explanations Islamic Literature Classical Texts: Historical Islamic writings and scholarship Modern Commentary: Contemporary Islamic thought and analysis Biographical Content: Stories of Prophets and righteous predecessors Educational Materials: Islamic learning resources and curriculum Content Interaction Respectful Engagement Islamic Etiquette: Maintain proper Adab during sessions Respectful Discussion: Engage with Islamic content reverently Scholarly Approach: Ask questions with sincere learning intent Cultural Sensitivity: Be mindful of diverse Islamic perspectives Annotation Guidelines Relevant Annotations: Keep annotations focused on Islamic learning Respectful Language: Use appropriate language for Islamic content Constructive Questions: Ask questions that enhance understanding Collaborative Spirit: Share insights that benefit all participants Getting Help During Sessions Technical Issues Connection Problems: Refresh page or check internet connection Annotation Issues: Try different browser or disable browser extensions Audio/Video Problems: Check browser permissions and device settings Performance Issues: Close other applications to free system resources Content Questions Islamic Content: Ask session host for clarification Technical Features: Use help buttons or tooltips in interface Participation: Follow guidance from session host or moderators Outside Sessions Documentation Resources User Guides: Comprehensive guides for all features Technical Reference: Detailed technical information Troubleshooting: Solutions for common issues Best Practices: Guidelines for effective session participation Support Channels Session Hosts: Contact your session host for session-specific help Technical Support: Use documentation or contact technical support Community: Connect with other NOOR Canvas users Feedback: Provide suggestions for platform improvements Best Practices For Participants Before Sessions Test Technology: Ensure browser and internet connection work properly Prepare Questions: Think about what you want to learn Review Content: Familiarize yourself with session topic if possible Set Environment: Choose quiet location for focused participation During Sessions Active Participation: Engage respectfully with content and participants Mindful Annotation: Add helpful annotations that benefit everyone Respectful Questions: Ask questions with sincere learning intent Islamic Etiquette: Maintain proper Islamic manners throughout After Sessions Reflection: Contemplate what was learned during the session Follow-up: Research topics that sparked your interest Gratitude: Thank the host and fellow participants Application: Apply Islamic knowledge gained in daily life For Session Hosts Session Planning Content Selection: Choose appropriate Islamic material for your audience Technical Preparation: Test all features before participants join Clear Communication: Provide clear joining instructions Learning Objectives: Define what participants should gain from session Session Leadership Welcoming Environment: Create inclusive atmosphere for all participants Guided Learning: Lead participants through Islamic content systematically Encourage Participation: Invite questions and annotations from everyone Islamic Focus: Keep discussions centered on Islamic learning and values Frequently Asked Questions Q: Do I need to create an account to participate? A: No, NOOR Canvas uses session-based access. You only need the Session GUID to join. Q: Can I participate on my mobile device? A: Yes, NOOR Canvas works on smartphones and tablets through web browsers. Q: Is my participation information kept private? A: Session participation is limited to session duration. No permanent accounts or long-term data storage. Q: What if I have technical problems during a session? A: Try refreshing your browser first. If problems persist, contact the session host for assistance. Q: Can I save annotations or session content? A: This depends on session host settings. Ask your host about content preservation policies. Q: How do I become a session host? A: Contact your Islamic organization or system administrator for host token access and training. Next Steps For Regular Participants Join More Sessions: Participate in various Islamic content sessions Explore Features: Try different annotation and interaction tools Build Community: Connect with other participants for continued learning Deepen Knowledge: Use sessions as starting point for further Islamic study For Potential Hosts Learn Platform: Participate in several sessions to understand user experience Request Access: Contact administrators for host token access Plan Content: Organize Islamic content for sharing with participants Practice Hosting: Start with small groups to develop hosting skills Related Documentation Host Authentication Guide - Detailed hosting instructions SSL Configuration - Technical setup information Troubleshooting Guide - Common issues and solutions Development Workflow - For developers and administrators This getting started guide is updated automatically as new features are added to NOOR Canvas."
  },
  "articles/user-guides/global-commands-user-guide.html": {
    "href": "articles/user-guides/global-commands-user-guide.html",
    "title": "Global Commands User Guide | NOOR CANVAS Documentation",
    "summary": "Global Commands User Guide Overview NOOR Canvas provides a suite of global commands that make development and administration tasks easier. These commands are available from any directory on your system and provide consistent, reliable functionality for common operations. Available Commands NC - Application Runner The primary command for starting the NOOR Canvas application during development. When to use: Starting the development server for testing or development work. What it does: Generates required host tokens Builds the application Starts IIS Express x64 server Makes the application available at https://localhost:9091 Basic Usage: nc This will start the complete development workflow automatically. NCT - Token Generator Creates secure host tokens required for session management. When to use: When you need to generate new host tokens for testing or administration. What it does: Generates cryptographically secure GUIDs Stores tokens in the database Provides tokens for session creation Basic Usage: nct NCDOC - Documentation Site Opens the complete NOOR Canvas documentation in your browser. When to use: When you need to reference documentation, guides, or API information. What it does: Builds the latest documentation Starts a local documentation server Opens your browser to the documentation site Basic Usage: ncdoc IISKILL - Process Manager Safely stops all IIS Express processes when needed. When to use: When the development server becomes unresponsive or you need to force-stop all instances. What it does: Finds all running IIS Express processes Terminates them safely Cleans up any locked files Basic Usage: iiskill Common Workflows Starting Development Work Open PowerShell in any directory Run nc to start the application Wait for \"Application started successfully\" message Open browser to https://localhost:9091 Stopping Development Work Press Ctrl+C in the NC command window, OR Run iiskill from any PowerShell window Accessing Documentation Run ncdoc from any directory Documentation will open in your default browser Browse user guides, technical references, and API docs Troubleshooting Server Issues Run iiskill to stop all processes Wait 5 seconds Run nc to restart clean Tips for Success Always use HTTPS: The application is configured for https://localhost:9091 Port conflicts: If you get port errors, run iiskill first Token issues: Run nct to generate fresh tokens if authentication fails Documentation updates: Run ncdoc to see the latest documentation changes Getting Help Each command provides built-in help: nc -Help nct -Help ncdoc -Help iiskill -Help For more detailed technical information, see the Global Commands Technical Reference."
  },
  "articles/user-guides/host-authentication-guide.html": {
    "href": "articles/user-guides/host-authentication-guide.html",
    "title": "Host Authentication Guide | NOOR CANVAS Documentation",
    "summary": "Host Authentication Guide Complete guide for NOOR Canvas session hosts on authentication and session management. Overview for Hosts As a NOOR Canvas session host, you'll facilitate Islamic content sharing sessions with participants worldwide. This guide covers authentication, session creation, and participant management. Authentication System Host Token System NOOR Canvas uses a simple token-based system designed for Islamic content sessions: Host Token: A special GUID that authorizes you to create and manage sessions Session GUID: Unique identifier for each session you create No Passwords: System designed for ease of use in Islamic learning contexts Getting Your Host Token For Development Environment Open PowerShell or Terminal Generate Token: nct # This generates your host token Start Application: nc # This starts the server with your token For Production Environment Host tokens will be provided by your Islamic content administrator. Creating Sessions Step-by-Step Session Creation 1. Start the Application nc # Automatically includes token generation 2. Navigate to Host Interface Open your browser to: https://localhost:9091 (development) Click \"Host Session\" or navigate to host dashboard 3. Select Content Choose your Islamic content: Album: Select from available Islamic content collections Category: Choose specific category within album Session: Select individual session or lesson 4. Session Configuration Session Name: Descriptive name for participants Duration: Expected session length Participant Limit: Maximum number of participants (default: 50) Privacy Settings: Public or private session 5. Session Creation Click \"Create Session\" System generates unique Session GUID Share this GUID with your participants Session Information for Participants Once created, provide participants with: Session GUID: [Generated GUID like: 123e4567-e89b-12d3-a456-426614174000] Session URL: https://yourserver.com/participate Session Name: [Your session name] Managing Active Sessions Host Dashboard Features Participant List: See who has joined your session Real-time Annotations: View participant annotations and comments Q&A Management: Receive and respond to participant questions Content Control: Navigate through Islamic content during session During Sessions Monitor Participation: Keep track of active participants Moderate Content: Ensure appropriate Islamic discussion Guide Learning: Use annotation tools to highlight key points Answer Questions: Respond to participant inquiries in real-time Ending Sessions Graceful Closure: Announce session ending to participants Save Annotations: Export session annotations if needed Session Summary: Review participation and engagement metrics Troubleshooting Authentication Common Host Issues \"Invalid Host Token\" Problem: Token rejected or expired Solutions: # Generate new token nct # Restart application with new token nc \"Cannot Create Session\" Problem: Session creation fails Solutions: Verify host token is valid Check internet connection Ensure development server is running Try refreshing the page \"Participants Cannot Join\" Problem: Session GUID issues Solutions: Double-check GUID provided to participants Verify session is still active Check participant limit not exceeded Ensure session hasn't expired Getting Support Development Environment # Check application status nc -Help # Verify server is running # Navigate to: https://localhost:9091/healthz # Generate fresh token nct For Technical Issues Check the terminal/console for error messages Verify development server is running on port 9091 Use iiskill to stop stuck processes and retry Consult technical documentation for advanced issues Best Practices for Islamic Content Hosts Session Preparation Content Selection: Choose appropriate Islamic materials for your audience Technical Setup: Test token and session creation before participants join Participant Communication: Clearly communicate session GUID and join instructions Islamic Etiquette: Prepare to maintain respectful Islamic learning environment During Sessions Respectful Moderation: Ensure discussions maintain Islamic values and respect Inclusive Participation: Encourage questions and annotations from all participants Content Focus: Keep discussions focused on Islamic learning objectives Technical Assistance: Help participants with technical difficulties After Sessions Session Closure: Properly end sessions and thank participants Content Preservation: Save valuable annotations and discussions if appropriate Feedback Collection: Gather feedback for improving future sessions Follow-up: Provide additional resources or schedule follow-up sessions Security Considerations Protecting Islamic Content Session Privacy: Use private sessions for sensitive Islamic discussions Participant Verification: Monitor participant list for unauthorized access Content Respect: Ensure Islamic content is treated with appropriate reverence Access Control: End sessions immediately if inappropriate behavior occurs Technical Security Token Protection: Keep host tokens confidential and secure Session Isolation: Each session is isolated from others Secure Communications: All communications use HTTPS encryption Regular Token Rotation: Generate new tokens regularly for enhanced security Advanced Features Multi-Session Management Concurrent Sessions: Host multiple sessions simultaneously (if system allows) Session Scheduling: Plan and schedule future Islamic learning sessions Participant Groups: Manage different groups with separate sessions Content Libraries: Organize Islamic content for easy session creation Integration with Islamic Content Beautiful Islam Integration: Access existing Islamic content libraries Quranic References: Link to specific Quranic verses and commentary Hadith Integration: Include relevant Hadith in session discussions Islamic Calendar: Schedule sessions according to Islamic calendar events Frequently Asked Questions Q: How long do host tokens last? A: Tokens are session-based and remain valid during your development session. Generate new tokens for each development session. Q: Can I host multiple sessions at once? A: Yes, you can create and manage multiple sessions simultaneously with the same host token. Q: What happens if I lose my Session GUID? A: Check your host dashboard for active sessions and their GUIDs. If needed, create a new session. Q: How many participants can join my session? A: Default limit is 50 participants, configurable based on your system capacity and requirements. Q: Can participants join after the session has started? A: Yes, participants can join ongoing sessions using the Session GUID. Q: How do I handle inappropriate participant behavior? A: You can remove participants from the session through the host dashboard and end the session if necessary. Related Documentation Authentication Guide - Technical authentication details Getting Started Guide - Initial setup and configuration SSL Configuration - HTTPS setup for secure sessions Troubleshooting Guide - Common issues and solutions This host authentication guide is updated automatically as authentication features are enhanced."
  },
  "articles/user-guides/ssl-configuration-user-guide.html": {
    "href": "articles/user-guides/ssl-configuration-user-guide.html",
    "title": "SSL Configuration Issues - User Guide | NOOR CANVAS Documentation",
    "summary": "SSL Configuration Issues - User Guide Purpose: User-friendly guide for resolving connection problems in NOOR CANVAS Audience: Session hosts, content administrators, platform users Last Updated: September 13, 2025 \uD83C\uDFAF What This Guide Helps With Common Symptoms You Might See \"Access Dashboard\" button doesn't work when clicked Error messages about \"authentication failed\" Application appears to load but features don't work Messages about \"database connection\" or \"certificate\" errors When This Happens These issues typically occur when: Setting up NOOR CANVAS for the first time on a new computer After Windows updates or security software changes When moving between different network environments After reinstalling or updating the application \uD83D\uDEA8 Quick Problem Check Is This Your Issue? You likely have an SSL configuration problem if: Application Starts Successfully ✅ Browser opens to NOOR CANVAS welcome page You can see \"I am a Host\" and \"Join as Participant\" sections No obvious error messages on the main page But Authentication Fails ❌ Clicking \"I am a Host\" button works You can enter your Host GUID Clicking \"Access Dashboard\" shows error message Error mentions \"authentication failed\" or similar What's Actually Happening The application interface works fine, but it can't connect to the database to verify your identity. This is usually caused by security settings that prevent the application from communicating with its database. \uD83D\uDEE0 How to Fix This Issue For Technical Users If you're comfortable with configuration files: Find the Configuration File Location: D:\\PROJECTS\\NOOR CANVAS\\SPA\\NoorCanvas\\appsettings.Development.json This file controls how the application connects to its database Update Database Connection Settings Look for lines that start with \"DefaultConnection\" Add these parameters to the connection text: TrustServerCertificate=true Encrypt=false Save the file Restart the Application Close NOOR CANVAS completely Restart using your normal method (NC command or Visual Studio) For Non-Technical Users If configuration files seem complicated: Contact Your Technical Support Explain you're getting \"authentication failed\" errors Mention that the main page loads but login doesn't work Ask them to \"check SSL certificate bypass configuration\" Provide This Information What operating system you're using (Windows 10, Windows 11, etc.) Whether this worked before and when it stopped The exact error message you see (take a screenshot if possible) ✅ How to Know It's Fixed Test Your Fix Open NOOR CANVAS in your browser (usually https://localhost:9091) Click \"I am a Host\" Enter a Host GUID (ask your administrator for a test GUID if needed) Click \"Access Dashboard\" Success: You should be taken to the host dashboard, not see an error Signs Everything is Working ✅ No error dialogs appear ✅ \"Access Dashboard\" button responds immediately ✅ You're redirected to a new page (the host dashboard) ✅ You can see session management options \uD83D\uDD0D Understanding the Problem Why This Happens Think of it like a security checkpoint: Your Computer wants to verify the identity of the Database Server Database Server shows an ID card (certificate) Your Computer doesn't recognize who issued the ID card Your Computer refuses to connect for security reasons What the Fix Does The configuration change tells your computer: \"For development purposes, accept this server's ID even if you don't recognize who issued it\" \"Don't require encrypted communication for this local development setup\" Is This Safe? For Development: Yes, this is completely safe for local development For Production: No, production systems should use proper certificates Your Data: This only affects how your local NOOR CANVAS connects to its local database \uD83C\uDD98 Still Having Problems? Double-Check These Things Application is Actually Running Can you access https://localhost:9091 in your browser? Do you see the NOOR CANVAS welcome page? You Have the Right GUID Host GUIDs are provided by administrators They look like: XQmUFUnFdjvsWq4IJhUU9b9mRSn7YHuZql/JMWaxFrM= Or: 6d752e72-93a1-456c-bc2d-d27af095882a Configuration Was Applied Correctly Did you restart the application after making changes? Are you using the Development environment? Get More Help If you're still stuck: Collect This Information Screenshot of the error message What you were trying to do when it happened Whether you made any recent changes to your computer Contact Support With \"I'm getting SSL certificate authentication errors in NOOR CANVAS\" \"The application loads but I can't authenticate as a host\" \"I need help with Issue-25 SSL certificate bypass configuration\" Emergency Workaround If you need to demonstrate or use the system immediately: Ask your administrator for alternative access methods Use a different computer where NOOR CANVAS is already working Request a remote session with technical support \uD83D\uDCDA Additional Resources For Administrators Technical Reference: SSL Certificate Configuration Technical Guide Issue Details: Issue-25 Resolution Documentation Test Procedures: SSL Configuration Test Suite For Users Host User Guide: Complete Host Authentication Guide Troubleshooting: Common NOOR CANVAS Issues Getting Started: First Time Setup Guide \uD83D\uDCDE Quick Reference Key Information for Support Issue Type: SSL Certificate Trust Configuration Symptoms: Authentication fails, \"Access Dashboard\" doesn't work Solution: TrustServerCertificate=true configuration in development environment Files: appsettings.Development.json connection strings Test: Host authentication with valid GUID should work after fix Common Questions Q: Will this affect security? A: No, this only affects local development connections. Production security is maintained separately. Q: Do I need to do this on every computer? A: Only on computers where you're running NOOR CANVAS in development mode. Q: Will this fix automatically update? A: Once configured correctly, this should continue working unless the configuration files are changed. Q: Can I break anything by making these changes? A: No, these changes only affect how the application connects to its development database. You can't damage your system or other applications."
  },
  "articles/user-guides/troubleshooting-common-issues.html": {
    "href": "articles/user-guides/troubleshooting-common-issues.html",
    "title": "Troubleshooting Common Issues | NOOR CANVAS Documentation",
    "summary": "Troubleshooting Common Issues Common problems and solutions for NOOR Canvas users and hosts. Connection and Access Issues Cannot Access Application Problem: \"This site can't be reached\" Symptoms: Browser shows connection error when accessing NOOR Canvas Solutions: Check URL: Ensure you're using the correct address Development: https://localhost:9091 Production: Provided by your administrator Check Server Status: # For development environment nc # Start the development server Verify Network Connection: Test internet connectivity with other websites Clear Browser Cache: Clear browser cache and cookies, then retry Problem: \"SSL Certificate Error\" Symptoms: Browser warns about unsafe certificate Solutions: Development Environment: Click \"Advanced\" → \"Proceed to localhost (unsafe)\" Production Environment: Contact administrator about SSL certificate issues Browser Settings: Ensure browser accepts the certificate Session Access Issues Problem: \"Session Not Found\" Symptoms: Error when entering Session GUID Solutions: Verify GUID: Double-check Session GUID with session host Check Session Status: Confirm session is still active Try Again: Session may have been temporarily unavailable Problem: \"Session Full\" Symptoms: Cannot join because session has reached participant limit Solutions: Contact Host: Ask host to increase participant limit if possible Wait for Slot: Someone may leave, creating space Alternative Session: Ask host about additional sessions Authentication and Host Issues Host Authentication Problems Problem: \"Invalid Host Token\" Symptoms: Cannot create sessions, authentication fails Solutions: Generate New Token: nct # Generate fresh host token nc # Restart with new token Check Token Format: Ensure token is valid GUID format Restart Application: Stop and restart development server Problem: \"Cannot Create Session\" Symptoms: Session creation fails after authentication Solutions: Check Database Connection: Ensure database is accessible Verify Content Selection: Make sure Album/Category/Session are selected Clear Application Data: Clear browser data and retry Participant Registration Issues Problem: \"Registration Failed\" Symptoms: Cannot complete participant registration Solutions: Check Required Fields: Ensure name is provided (minimum requirement) Session Capacity: Verify session isn't full Browser Compatibility: Try different browser if issues persist Performance and Technical Issues Application Running Slowly Problem: Slow Loading or Response Symptoms: Application takes long time to load or respond to actions Solutions: Close Other Applications: Free up system memory and CPU Check Internet Speed: Ensure stable broadband connection Browser Performance: Close unnecessary browser tabs Disable browser extensions Clear browser cache Network Optimization: Use wired connection instead of Wi-Fi if possible Check for network interference or bandwidth limitations Real-time Features Not Working Problem: Annotations Not Syncing Symptoms: Cannot see other participants' annotations in real-time Solutions: WebSocket Connection: Check if browser supports WebSockets Firewall Settings: Ensure firewall allows WebSocket connections Network Configuration: Check if network blocks real-time protocols Browser Refresh: Refresh page to re-establish connection Problem: SignalR Connection Errors Symptoms: Console shows SignalR connection failures Solutions: Check Network: Verify stable internet connection Browser Compatibility: Ensure browser supports WebSockets Proxy Settings: Check if corporate proxy blocks WebSocket connections Retry Connection: Refresh page to attempt reconnection Development Environment Issues Build and Startup Problems Problem: \"Build Failed\" Symptoms: dotnet build command fails with errors Solutions: Check Error Messages: Read compiler errors carefully Clean Solution: dotnet clean dotnet restore dotnet build Dependencies: Ensure all NuGet packages are restored Check .NET Version: Verify .NET 8.0 SDK is installed Problem: \"Port Already in Use\" Symptoms: Cannot start server because port 9091 is busy Solutions: Kill Existing Processes: iiskill # Stop all IIS Express processes nc # Restart server Check Port Usage: netstat -ano | findstr \":9091\" Process Management: taskkill /F /IM \"NoorCanvas.exe\" /T taskkill /F /IM \"dotnet.exe\" /T Database Connection Issues Problem: \"Database Connection Failed\" Symptoms: Application cannot connect to KSESSIONS_DEV database Solutions: Check Connection String: Verify database server and credentials Database Server: Ensure SQL Server is running on AHHOME Network Access: Test network connectivity to database server: sqlcmd -S AHHOME -U sa -P [password] -Q \"SELECT 1\" Credentials: Verify sa account password is correct Problem: \"Canvas Schema Not Found\" Symptoms: Application starts but cannot find canvas tables Solutions: Run Migrations: dotnet ef database update --context CanvasDbContext Check Database: Verify KSESSIONS_DEV database exists Schema Creation: Ensure canvas schema exists in database Browser-Specific Issues Chrome Issues Problem: WebSocket connection failures Solution: Check Chrome's WebSocket settings and disable interfering extensions Firefox Issues Problem: SSL certificate warnings in development Solution: Add security exception for localhost development certificate Edge Issues Problem: Authentication cookies not persisting Solution: Check Edge privacy settings and allow cookies for localhost Safari Issues Problem: Real-time features not working on mobile Safari Solution: Ensure WebSocket support is enabled in Safari settings Mobile Device Issues Touch Interface Problems Problem: Annotation tools difficult to use on mobile Solutions: Use landscape orientation for better screen space Zoom in on content before annotating Use mobile-optimized annotation tools when available Performance on Mobile Problem: Slow performance on smartphones/tablets Solutions: Close other mobile applications Use Wi-Fi instead of cellular data Clear mobile browser cache Restart browser application Error Messages and Codes Common Error Messages \"NOOR-ERROR: Authentication failed\" Cause: Invalid host token or session authentication Solution: Generate new host token with nct command \"NOOR-ERROR: Database timeout\" Cause: Database connection timeout (usually network-related) Solution: Check database server connectivity and network stability \"SignalR connection closed\" Cause: WebSocket connection interrupted Solution: Refresh page to re-establish real-time connection \"Session expired\" Cause: Session exceeded its configured timeout limit Solution: Host needs to create new session, or extend existing session if possible Getting Additional Help Self-Diagnosis Steps Check Browser Console: Press F12 and look for error messages Test Basic Connectivity: Try accessing other websites Clear Browser Data: Clear cache, cookies, and local storage Try Different Browser: Test with Chrome, Firefox, or Edge Restart Computer: Sometimes resolves underlying system issues Information to Collect Before Seeking Help Error Message: Exact text of any error messages Browser and Version: Which browser and version you're using Operating System: Windows, macOS, Linux, etc. Network Environment: Home, work, school network Session GUID: If joining a specific session Steps to Reproduce: What actions led to the problem Documentation Resources Getting Started Guide - Basic usage instructions Host Authentication Guide - Hosting-specific help SSL Configuration Guide - Security setup Technical Reference - Advanced technical information Contact Information Session Host: Contact your session host for session-specific issues Technical Administrator: Contact your organization's technical support Development Team: For bug reports and feature requests Documentation Issues: Report documentation problems for improvement Prevention Tips For Regular Users Keep Browser Updated: Use latest browser versions for best compatibility Stable Connection: Use reliable internet connection for sessions Test Before Sessions: Join test sessions to verify everything works Bookmark URLs: Save session URLs and GUIDs securely For Session Hosts Regular Testing: Test host functionality before important sessions Backup Plans: Have alternative communication methods ready Participant Support: Provide clear joining instructions and technical support Documentation: Keep troubleshooting guides available for participants For Developers Regular Maintenance: Keep development environment updated Automated Testing: Run test suite regularly to catch issues early Log Monitoring: Check application logs for early warning signs Backup Database: Regular backups of development database This troubleshooting guide is updated automatically as new issues are identified and solutions developed."
  },
  "index.html": {
    "href": "index.html",
    "title": "NOOR CANVAS Documentation | NOOR CANVAS Documentation",
    "summary": "NOOR CANVAS Documentation Welcome to the NOOR CANVAS Islamic Content Sharing Platform documentation. Overview NOOR CANVAS is a real-time Islamic content sharing platform built with ASP.NET Core 8.0 and Blazor Server, featuring: Real-time Annotations: Live drawing and annotation capabilities using SignalR Session Management: Host-controlled sessions with participant management Islamic Content Integration: Support for Qur'an, Hadith, Etymology, and Islamic Poetry Multi-language Support: Arabic (RTL), English (LTR), and Urdu (RTL) McBeatch Theme: Beautiful, responsive UI with multiple color variants Documentation Sections API Reference Complete API documentation for all controllers, services, models, and hubs. Technical Architecture Detailed technical architecture including: ASP.NET Core 8.0 structure SignalR real-time communication Entity Framework Core data layer Database schema (canvas + dbo integration) Development Guide Development environment setup and workflow: Project setup and configuration Development server (IIS Express x64) Database configuration Testing framework Deployment Guide Production deployment instructions: IIS production configuration Database migration Security considerations Performance optimization User Guides End-user documentation: Host session management Participant interaction Annotation tools Q&A system Getting Started Review the Technical Architecture Set up your Development Environment Explore the API Reference Follow the Implementation Phases Project Information Version: Phase 4 (Content & Styling) Framework: ASP.NET Core 8.0, Blazor Server Database: SQL Server with canvas schema Real-time: SignalR WebSocket communication Theme: McBeatch responsive design Timeline: 20-week phased implementation Last Updated: September 13, 2025"
  }
}