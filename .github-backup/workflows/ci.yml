name: NOOR Canvas CI Pipeline

on:
  push:
    branches: [ master, main, develop ]
  pull_request:
    branches: [ master, main ]

env:
  DOTNET_VERSION: '9.0.x'
  BUILD_CONFIGURATION: 'Release'

jobs:
  test-runner:
    name: Run Test Pipeline
    runs-on: windows-latest
    timeout-minutes: 30

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Needed for git history analysis

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Display Environment Info
      run: |
        Write-Host "üîß Environment Information" -ForegroundColor Cyan
        Write-Host "OS: $env:OS" -ForegroundColor Gray
        Write-Host "PowerShell Version: $($PSVersionTable.PSVersion)" -ForegroundColor Gray
        Write-Host "Workspace: $env:GITHUB_WORKSPACE" -ForegroundColor Gray
        dotnet --info
      shell: pwsh

    - name: Cache NuGet Packages
      uses: actions/cache@v3
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
        restore-keys: |
          ${{ runner.os }}-nuget-

    - name: Restore Dependencies
      run: |
        Write-Host "üì¶ Restoring NuGet packages..." -ForegroundColor Cyan
        dotnet restore NoorCanvas.sln --verbosity normal
        if ($LASTEXITCODE -ne 0) { 
          Write-Error "Package restore failed"
          exit 1 
        }
        Write-Host "‚úÖ Package restore completed successfully" -ForegroundColor Green
      shell: pwsh

    - name: Run Comprehensive Test Pipeline
      run: |
        Write-Host "üöÄ Starting NOOR Canvas Test Pipeline" -ForegroundColor Cyan
        
        # Navigate to test scripts directory
        cd "Tests/NC-ImplementationTests/scripts"
        
        # Execute the test runner
        .\run-tests.ps1
        
        if ($LASTEXITCODE -ne 0) {
          Write-Error "Test pipeline failed with exit code $LASTEXITCODE"
          exit $LASTEXITCODE
        }
        
        Write-Host "‚úÖ Test pipeline completed successfully" -ForegroundColor Green
      shell: pwsh

    - name: Upload Test Results
      uses: actions/upload-artifact@v4
      if: always()  # Upload even if tests fail
      with:
        name: test-results
        path: |
          **/TestResults/
          **/*.trx
          **/*.xml
        retention-days: 30

    - name: Generate Test Summary
      if: always()
      run: |
        Write-Host "üìä Test Summary" -ForegroundColor Cyan
        
        # Count test result files
        $testFiles = Get-ChildItem -Path . -Recurse -Name "*.trx" -ErrorAction SilentlyContinue
        $testCount = $testFiles.Count
        
        Write-Host "Test result files found: $testCount" -ForegroundColor Gray
        
        if ($testCount -gt 0) {
          Write-Host "Test Results:" -ForegroundColor Green
          $testFiles | ForEach-Object { Write-Host "  - $_" -ForegroundColor Gray }
        } else {
          Write-Host "No test result files found" -ForegroundColor Yellow
        }
        
        # Display final status
        if ($env:GITHUB_RUN_STATUS -eq "success") {
          Write-Host "üéâ All tests passed!" -ForegroundColor Green
        } else {
          Write-Host "‚ùå Some tests failed. Check logs for details." -ForegroundColor Red
        }
      shell: pwsh

  lint-and-format:
    name: Lint and Format Check
    runs-on: windows-latest
    timeout-minutes: 15

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Check Code Formatting
      run: |
        Write-Host "üîç Checking code formatting..." -ForegroundColor Cyan
        
        # Check if dotnet format is available
        dotnet format --version
        
        # Check formatting (dry run)
        dotnet format NoorCanvas.sln --verify-no-changes --verbosity diagnostic
        
        if ($LASTEXITCODE -ne 0) {
          Write-Error "Code formatting issues detected. Run 'dotnet format' locally to fix."
          exit 1
        }
        
        Write-Host "‚úÖ Code formatting is correct" -ForegroundColor Green
      shell: pwsh

    - name: Run HTML Linting
      run: |
        Write-Host "üîç Running HTML documentation linting..." -ForegroundColor Cyan
        
        $htmlFile = "Workspaces/Documentation/IMPLEMENTATIONS/IMPLEMENTATION-TRACKER.html"
        
        if (Test-Path $htmlFile) {
          Write-Host "Linting: $htmlFile" -ForegroundColor Gray
          
          # Run HTML lint script
          & "Tests/NC-ImplementationTests/scripts/lint-html.ps1" -Path $htmlFile
          
          if ($LASTEXITCODE -ne 0) {
            Write-Error "HTML linting failed"
            exit 1
          }
          
          Write-Host "‚úÖ HTML linting passed" -ForegroundColor Green
        } else {
          Write-Host "‚ö†Ô∏è  HTML documentation not found - skipping lint" -ForegroundColor Yellow
        }
      shell: pwsh

  build-verification:
    name: Build Verification
    runs-on: windows-latest
    timeout-minutes: 20

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Restore and Build Solution
      run: |
        Write-Host "üèóÔ∏è  Building NOOR Canvas solution..." -ForegroundColor Cyan
        
        # Clean any existing artifacts
        dotnet clean NoorCanvas.sln --configuration $env:BUILD_CONFIGURATION
        
        # Restore packages
        dotnet restore NoorCanvas.sln --verbosity minimal
        
        # Build solution
        dotnet build NoorCanvas.sln --configuration $env:BUILD_CONFIGURATION --no-restore --verbosity minimal
        
        if ($LASTEXITCODE -ne 0) {
          Write-Error "Build failed"
          exit 1
        }
        
        Write-Host "‚úÖ Build completed successfully" -ForegroundColor Green
      shell: pwsh

    - name: Verify Test Projects Build
      run: |
        Write-Host "üß™ Verifying test projects build..." -ForegroundColor Cyan
        
        # Build test projects specifically
        dotnet build Tests/NoorCanvas.Core.Tests/NoorCanvas.Core.Tests.csproj --configuration $env:BUILD_CONFIGURATION --no-restore
        dotnet build Tests/NC-ImplementationTests/NC-ImplementationTests.csproj --configuration $env:BUILD_CONFIGURATION --no-restore
        
        if ($LASTEXITCODE -ne 0) {
          Write-Error "Test project build failed"
          exit 1
        }
        
        Write-Host "‚úÖ Test projects built successfully" -ForegroundColor Green
      shell: pwsh

  quality-gates:
    name: Quality Gates
    runs-on: windows-latest
    needs: [test-runner, lint-and-format, build-verification]
    if: always()
    
    steps:
    - name: Evaluate Quality Gates
      run: |
        Write-Host "üéØ Evaluating Quality Gates" -ForegroundColor Cyan
        
        $testResult = "${{ needs.test-runner.result }}"
        $lintResult = "${{ needs.lint-and-format.result }}"
        $buildResult = "${{ needs.build-verification.result }}"
        
        Write-Host "Test Pipeline: $testResult" -ForegroundColor $(if ($testResult -eq 'success') { 'Green' } else { 'Red' })
        Write-Host "Lint & Format: $lintResult" -ForegroundColor $(if ($lintResult -eq 'success') { 'Green' } else { 'Red' })
        Write-Host "Build Verification: $buildResult" -ForegroundColor $(if ($buildResult -eq 'success') { 'Green' } else { 'Red' })
        
        $overallSuccess = $testResult -eq 'success' -and $lintResult -eq 'success' -and $buildResult -eq 'success'
        
        if ($overallSuccess) {
          Write-Host "üéâ All quality gates passed!" -ForegroundColor Green
          exit 0
        } else {
          Write-Host "‚ùå Quality gates failed. Check individual job results." -ForegroundColor Red
          exit 1
        }
      shell: pwsh
