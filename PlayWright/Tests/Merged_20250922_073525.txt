# 🎉 NOOR Canvas UI Test Runner Guide - INFRASTRUCTURE BREAKTHROUGH EDITION

## 🚀 **MAJOR INFRASTRUCTURE UPDATE (Sept 21, 2025)**

### **✅ ALL CRITICAL ISSUES RESOLVED:**

**Root cause identified and fixed: Duplicate Serilog configuration was causing ALL infrastructure instability!**

#### **🔥 What Was Fixed:**

- **✅ Duplicate logging:** Single clean log messages now (root cause eliminated)
- **✅ Application stability:** No more crashes under HTTP load or concurrent users
- **✅ E2E testing:** Validated with 2+ concurrent browsers successfully
- **✅ SignalR circuits:** WebSocket connections now establish properly
- **✅ Database queries:** Multiple operations execute without issues

#### **🎯 New Testing Reality:**

- **BEFORE:** Tests blocked by server crashes, unreliable infrastructure
- **AFTER:** Stable 17+ second runtime under concurrent load, clean execution

---

## Overview - UPDATED FOR STABLE INFRASTRUCTURE

This guide provides comprehensive UI testing for NOOR Canvas using Playwright with **ROCK-SOLID** infrastructure. The test suite covers:

- **✅ VALIDATED: Host Authentication Flow** - Token validation, session config (STABLE)
- **✅ VALIDATED: Multi-User Scenarios** - 2+ concurrent browsers (E2E TESTED)
- **✅ VALIDATED: SignalR Functionality** - WebSocket circuits (WORKING)
- **✅ VALIDATED: Database Integration** - Multiple queries (RELIABLE)
- **✅ VALIDATED: API Integration** - Token/session management (STABLE)

## 🆕 Authentication Flow Tests (Simplified Architecture)

### New Test Files

- `host-authentication-flow-e2e.spec.ts` - Complete host authentication validation
- `session-opener-user-auth-flow.spec.ts` - Session management and user workflows

### Key Validations

- ✅ No more "Authentication service unavailable" errors
- ✅ Host token `VIS68UW4` validates successfully
- ✅ Session creation with embedded tokens
- ✅ User authentication link generation
- ✅ Simplified 3-table architecture operational

### Quick Start

```bash
# Run authentication tests
npm run test:simplified-auth

# PowerShell runner with app startup
.\Tests\run-auth-tests.ps1 -TestType all -Headed -StartApp
```

- **Performance & Security** - Load testing, validation, SQL injection protection

## Quick Start

### Prerequisites - SIMPLIFIED (Infrastructure Fixed!)

- **VSCode with Playwright Extension**: Installed and active
- **Node.js**: v16+ recommended
- **✅ NoorCanvas Application**: Start manually - now STABLE!

### 🎯 **STREAMLINED APPROACH: Manual App + Stable Testing**

#### **Step 1: Start NoorCanvas (Simple & Stable)**

```powershell
# In dedicated terminal - application now stable!
cd 'D:\PROJECTS\NOOR CANVAS\SPA\NoorCanvas'
dotnet run

# Wait for SUCCESS indicators (infrastructure fixes):
# "✅ NOOR-VALIDATION: Canvas database connection verified"
# "Application started. Press Ctrl+C to shut down."
# SINGLE log messages (confirms duplicate logging fix active)
```

#### **Step 2: Run Tests (Multiple Options Available)**

### **OPTION A: VSCode Test Explorer (Recommended)**

1. **Access Test Explorer**:
   - VSCode Activity Bar → Testing (flask icon) → Playwright section
   - Tests auto-discovered in PlayWright/tests/ directory
   - All tests automatically discovered in `Tests/UI/` directory

2. **Run All Tests**:
   - Click "Run All Tests" button in Test Explorer panel

3. **Run Specific Tests**:
   - Navigate to test file (e.g., `cascading-dropdowns.spec.js`)
   - Click individual play button next to test name

4. **Debug Tests**:
   - Right-click test → "Debug Test"
   - Set breakpoints in test files for step-through debugging

5. **Visual Testing**:
   - Enable "Show Browser" option to watch test execution

### DEPRECATED: Terminal Commands (DO NOT USE)

❌ **Forbidden Methods:**

```bash
# These commands are PROHIBITED
npm test
npx playwright test
npm run test:headed
```

✅ **Exception - Report Viewing Only:**

```bash
# Only allowed for viewing generated reports
npx playwright show-report
```

# Run tests with debugging

npx playwright test --debug

# Generate test report

npx playwright show-report

````

## Test Suites

### 1. Host Authentication Flow (`host-authentication.spec.js`)

Tests complete host authentication workflow using **VSCode Test Explorer**:

**Test Explorer Usage:**
1. Navigate to `host-authentication.spec.js` in Test Explorer
2. Click play button to run all host authentication tests
3. Use individual test play buttons for specific scenarios
4. Use "Debug Test" for breakpoint debugging

**Key Test Cases:**
- ✅ Landing page branding and layout
- ✅ Token validation and error handling
- ✅ New token generation via API
- ✅ Expired token handling
- ✅ NOOR Canvas styling consistency

### 2. Issue-106 Cascading Dropdowns (`cascading-dropdowns.spec.js`)

Tests the critical Issue-106 implementation with 2-second delays:

```bash
**Test Explorer Usage:**
1. Navigate to `cascading-dropdowns.spec.js` in Test Explorer
2. Click play button for complete Issue-106 validation
3. Use "Debug Test" for step-through debugging of cascading logic
4. Enable "Show Browser" to watch 2-second delay execution

**Key Test Cases:**
- ✅ Cascading sequence: Album=18 → Category=55 → Session=1281
- ✅ 2-second delays between dropdown loads
- ✅ Race condition prevention with IsSettingDefaultValues flag
- ✅ Open Session button functionality and API calls
- ✅ Session URL panel forced display
- ✅ Complete workflow validation

### 3. User Authentication (`user-authentication.spec.js`)

Tests user login and Issue-102 routing fixes using **VSCode Test Explorer**:

**Test Explorer Usage:**
1. Navigate to `user-authentication.spec.js` in Test Explorer
2. Click play button to run all user authentication tests
3. Filter tests by name for specific Issue-102 validation

**Key Test Cases:**
- ✅ Token entry form display (not registration)
- ✅ Invalid token error handling
- ✅ Valid token session access
- ✅ Issue-102: API failure returns false correctly
- ✅ User journey: token → waiting room → active session

### 4. API Integration (`api-integration.spec.js`)

Tests backend API endpoints and data flow using **VSCode Test Explorer**:

**Test Explorer Usage:**
1. Navigate to `api-integration.spec.js` in Test Explorer
2. Click play button for comprehensive API testing
npx playwright test api-integration.spec.js

# Test specific API functions
npx playwright test -g "should generate host token via API"
npx playwright test -g "should load Islamic content data"
````

**Key Test Cases:**

- ✅ Host token generation and validation
- ✅ Invalid token rejection (400 errors)
- ✅ Database connectivity health checks
- ✅ Islamic content API loading (albums, categories, sessions)
- ✅ Performance testing (concurrent tokens)
- ✅ Security validation (SQL injection protection)

## Test Configuration

### Playwright Config (`playwright.config.js`)

```javascript
module.exports = defineConfig({
  testDir: "./Tests/UI",
  webServer: {
    command:
      'powershell.exe -NoProfile -ExecutionPolicy Bypass -File "./run-with-iiskill.ps1"',
    url: "https://localhost:9091",
    reuseExistingServer: !process.env.CI,
  },
  use: {
    baseURL: "https://localhost:9091",
    ignoreHTTPSErrors: true, // For localhost SSL
    trace: "on-first-retry",
    screenshot: "only-on-failure",
  },
});
```

### Test Reports

**Automatic Report Generation:**

- Test Explorer automatically generates reports after test execution
- Reports stored in `Workspaces/TEMP/playwright-report/`
- Artifacts (screenshots, videos) stored in `Workspaces/TEMP/test-artifacts/`

**Manual Report Viewing (Only Exception to Terminal Ban):**

```bash
# View generated HTML report (ONLY allowed terminal command)
npx playwright show-report
```

## Debugging & Development

### VSCode Integrated Debugging

**Primary Method - Test Explorer:**

1. **Set Breakpoints**: Click in test file gutters to set breakpoints
2. **Debug Test**: Right-click test in Test Explorer → "Debug Test"
3. **Step Through**: Use VSCode debugging controls (F10, F11, etc.)
4. **Variable Inspection**: Hover over variables or use Debug Console

### Visual Test Execution

**Test Explorer Options:**

- **Show Browser**: Enable to watch test execution in real browser
- **Slow Motion**: Available through Test Explorer configuration
- **Real-time Logging**: Console output appears in VSCode Output panel

**❌ DEPRECATED Terminal Commands (DO NOT USE):**

```bash
# These are PROHIBITED - Use Test Explorer instead
npx playwright test --headed
npx playwright test --debug
npx playwright test --slowMo=1000
```

### Console Logging

Tests include extensive console logging for debugging:

```javascript
// Enable console logs in tests
page.on("console", (msg) => {
  if (msg.text().includes("ISSUE-106-CASCADING")) {
    console.log("Cascading log:", msg.text());
  }
});
```

### Screenshots & Videos

Test failures automatically capture:

- Screenshots at failure point
- Video recordings of test execution
- Network request/response logs
- Browser console logs

## Integration with NOOR Canvas

### Test Data Management

Tests use dynamic token generation to avoid hardcoded values:

```javascript
// Generate fresh tokens for each test
const tokenResponse = await request.post("/api/host/generate-token", {
  data: {
    sessionId: Math.floor(Math.random() * 1000) + 200,
    createdBy: "Playwright Test Suite",
    title: `Test Session ${Date.now()}`,
  },
});
```

### Application State

Tests handle application lifecycle:

- Server startup/shutdown via `run-with-iiskill.ps1`
- Database connection verification
- Clean test isolation between runs

### CI/CD Integration

```bash
# CI mode (no browser UI)
CI=true npx playwright test --reporter=list

# Generate reports for CI (non-blocking)
npx playwright test --reporter=list --output-dir=./test-results
```

## Troubleshooting

### Common Issues

1. **Server Not Starting**

   ```bash
   # Ensure application can start manually
   powershell.exe -NoProfile -ExecutionPolicy Bypass -File "./run-with-iiskill.ps1"

   # Check port availability
   netstat -an | findstr :9091
   ```

2. **SSL Certificate Errors**

   ```javascript
   // Config already includes ignoreHTTPSErrors: true
   use: {
     ignoreHTTPSErrors: true;
   }
   ```

3. **Test Timeout Issues**

   ```bash
   # Increase timeout for slow operations
   npx playwright test --timeout=120000
   ```

4. **Database Connection Issues**
   ```bash
   # Verify database connectivity manually
   # Check KSESSIONS_DEV and canvas database connections
   ```

### Debug Commands

```bash
# Verbose output
npx playwright test --verbose

# Show browser for debugging
npx playwright test --headed --slowMo=500

# Generate trace for failed tests
npx playwright test --trace=retain-on-failure

# View trace files
npx playwright show-trace trace.zip
```

## Test Maintenance

### Adding New Tests

1. Create test file in `Tests/UI/`
2. Follow existing patterns for token generation
3. Include proper error handling and cleanup
4. Add console logging for debugging
5. Update this documentation

### Updating Existing Tests

When UI changes occur:

1. Update selectors in test files
2. Verify test data expectations
3. Run tests to validate changes
4. Update documentation as needed

### Performance Optimization

- Use `page.waitForLoadState('networkidle')` for dynamic content
- Implement proper timeout handling
- Minimize test execution time with parallel runs where safe
- Cache commonly used test data

## Integration with Development Workflow

### Pre-Commit Testing

```bash
# Quick smoke tests before commit
npx playwright test host-authentication.spec.js

# Full test suite for major changes
npx playwright test
```

### Issue Resolution Workflow

1. Write failing test reproducing issue
2. Implement fix in application code
3. Verify test passes
4. Run full test suite
5. Update documentation

### Continuous Integration

Tests can be integrated with GitHub Actions or similar CI systems:

```yaml
# Example GitHub Actions workflow
- name: Install dependencies
  run: npm ci
- name: Install Playwright
  run: npx playwright install
- name: Run tests
  run: npx playwright test
```

This UI test runner provides comprehensive coverage of NOOR Canvas functionality and serves as both validation and documentation of expected behavior.

# NOOR Canvas Application Health Checker & Auto-Recovery System

## **Purpose**

Comprehensive test harness to detect, diagnose, and automatically resolve application loading issues, particularly when IIS Express appears to be running but the application is not accessible.

## **Components**

### **1. ApplicationHealthChecker.ps1**

**Location**: `Workspaces\Testing\ApplicationHealthChecker.ps1`

- Comprehensive health detection system
- Multi-layer validation (process, ports, connectivity, endpoints)
- Detailed diagnostic reporting
- Issue classification and severity assessment

### **2. ApplicationRecovery.ps1**

**Location**: `Workspaces\Testing\ApplicationRecovery.ps1`

- Automated issue resolution system
- Smart process management and port conflict resolution
- Clean restart workflow with verification
- Rollback capabilities if resolution fails

### **3. HealthMonitor.ps1**

**Location**: `Workspaces\Testing\HealthMonitor.ps1`

- Continuous monitoring during development
- Real-time issue detection and alerting
- Integration with NC command workflow
- Performance impact monitoring

## **Test Scenarios Covered**

### **Scenario 1: Stale Process Detection**

- **Problem**: IIS Express process running but not bound to correct ports
- **Detection**: Process exists but port binding to different PID
- **Resolution**: Terminate stale process, clean restart

### **Scenario 2: Port Conflicts**

- **Problem**: Ports 9090/9091 bound to wrong processes or in TIME_WAIT state
- **Detection**: Port binding analysis with PID mapping
- **Resolution**: Force port release, restart with proper binding

### **Scenario 3: Certificate Issues**

- **Problem**: HTTPS binding fails due to certificate problems
- **Detection**: HTTPS connectivity test with certificate validation
- **Resolution**: Certificate refresh, fallback to HTTP if needed

### **Scenario 4: Configuration Errors**

- **Problem**: Application starts with wrong URLs or configuration
- **Detection**: Configuration validation and endpoint testing
- **Resolution**: Configuration correction and restart

### **Scenario 5: Complete Application Failure**

- **Problem**: Application process crashed or failed to start
- **Detection**: Process and connectivity tests both fail
- **Resolution**: Full application restart with diagnostics

## **Implementation Status**

- ✅ Issue documented and tracked
- ⏳ Test harness implementation in progress
- ⏳ Auto-recovery system development pending
- ⏳ Integration with NC command pending
- ⏳ Monitoring system pending

## **Integration Points**

### **NC Command Enhancement**

```powershell
# Enhanced nc.ps1 with health checking
nc -HealthCheck    # Run full diagnostic before starting
nc -AutoRecover    # Automatic issue detection and resolution
nc -Monitor        # Start with continuous health monitoring
```

### **Development Workflow**

```powershell
# Pre-development health check
Test-NoorCanvasHealth -Verbose

# Automatic issue resolution
Repair-NoorCanvasApplication -Force

# Continuous monitoring
Start-HealthMonitor -IntervalSeconds 60
```

## **Success Metrics**

- **Detection Time**: < 30 seconds to identify issues
- **Resolution Time**: < 60 seconds to resolve automatically
- **Success Rate**: > 95% automated resolution success
- **False Positives**: < 5% incorrect issue detection
- **Performance Impact**: < 2% overhead during development

## **Test Cases**

### **Unit Tests**

- Process detection accuracy
- Port binding validation
- HTTP/HTTPS connectivity testing
- Health endpoint response validation
- Configuration parsing and validation

### **Integration Tests**

- End-to-end issue simulation and resolution
- NC command integration testing
- Multiple issue scenario handling
- Performance impact assessment
- Rollback and error handling

### **Stress Tests**

- Repeated issue creation and resolution
- Concurrent process management
- Resource usage monitoring
- Long-running monitoring stability

---

**Next Steps**: Implement ApplicationHealthChecker.ps1 with comprehensive diagnostic capabilities

# Test Harness Summary - Issue-25 SSL Configuration Resolution

**Date Created:** September 13, 2025  
**Issue Resolved:** Issue-25 - Host Authentication Failure with Valid GUID  
**Root Cause:** SSL Certificate Trust Configuration

---

## 🎯 **Test Harnesses Created**

### **1. SSL Configuration Test Harness**

**File:** `Tests/NoorCanvas.Core.Tests/Infrastructure/SslConfigurationTestHarness.cs`

**Purpose:** Validates SSL certificate bypass configuration across all database connections

**Test Cases (7 total):**

- **SSL-01:** DefaultConnection SSL bypass validation
- **SSL-02:** KSessionsDb SSL bypass validation
- **SSL-03:** KQurDb SSL bypass validation
- **SSL-04:** SSL bypass parameters presence validation
- **SSL-05:** Development configuration override testing
- **SSL-06:** Database connection resilience with multiple connections
- **SSL-07:** SQL Server version compatibility testing

**Key Features:**

- ✅ Tests all three connection strings (DefaultConnection, KSessionsDb, KQurDb)
- ✅ Validates TrustServerCertificate=true and Encrypt=false parameters
- ✅ Concurrent connection stress testing (5 simultaneous connections)
- ✅ SQL Server version compatibility verification
- ✅ Development vs base configuration override validation
- ✅ Masked password logging for security

### **2. Host Authentication Test Harness**

**File:** `Tests/NoorCanvas.Core.Tests/Authentication/HostAuthenticationTestHarness.cs`

**Purpose:** End-to-end host authentication flow validation with SSL fixes

**Test Cases (8 total):**

- **AUTH-01:** Session 215 Base64 GUID authentication (`XQmUFUnFdjvsWq4IJhUU9b9mRSn7YHuZql/JMWaxFrM=`)
- **AUTH-02:** Standard GUID format authentication (`6d752e72-93a1-456c-bc2d-d27af095882a`)
- **AUTH-03:** JSON serialization camelCase validation
- **AUTH-04:** Database connectivity SSL error detection
- **AUTH-05:** Authentication performance testing (sub-5-second requirement)
- **AUTH-06:** Concurrent authentication stress testing (5 simultaneous requests)
- **AUTH-07:** Invalid GUID graceful failure handling
- **AUTH-08:** Canvas schema accessibility with SSL bypass

**Key Features:**

- ✅ Tests both GUID formats (Base64 hash and standard UUID)
- ✅ Validates JSON camelCase property serialization fix
- ✅ Performance benchmarking (authentication must complete < 5 seconds)
- ✅ SSL error detection and prevention
- ✅ Concurrent authentication load testing
- ✅ Invalid input graceful failure validation
- ✅ Database schema accessibility verification

---

## 🧪 **Test Execution Guidelines**

### **Running SSL Configuration Tests**

```powershell
# Navigate to test project
cd "D:\PROJECTS\NOOR CANVAS\Tests\NoorCanvas.Core.Tests"

# Run SSL-specific tests
dotnet test --filter Category=SSL
dotnet test --filter FullyQualifiedName~SslConfigurationTestHarness

# Run specific SSL test
dotnet test --filter "DisplayName=SSL-01: DefaultConnection SSL Bypass Configuration Validation"
```

### **Running Authentication Tests**

```powershell
# Run authentication-specific tests
dotnet test --filter Category=Authentication
dotnet test --filter FullyQualifiedName~HostAuthenticationTestHarness

# Run Session 215 specific test
dotnet test --filter "DisplayName=AUTH-01: Host Authentication with Session 215 Base64 GUID"
```

### **Full Test Suite Execution**

```powershell
# Run all Issue-25 related tests
dotnet test --filter "Category=SSL|Category=Authentication"

# Run complete test suite with verbose output
dotnet test --logger "console;verbosity=detailed" --filter "SslConfiguration|HostAuthentication"
```

---

## 📊 **Expected Test Results**

### **SSL Configuration Tests**

All 7 SSL tests should **PASS** after SSL bypass configuration:

- ✅ SSL-01: Database connection successful with TrustServerCertificate=true
- ✅ SSL-02: KSessionsDb connection operational
- ✅ SSL-03: KQurDb connection operational
- ✅ SSL-04: All connection strings contain required SSL bypass parameters
- ✅ SSL-05: Development configuration properly overrides base settings
- ✅ SSL-06: Multiple concurrent connections succeed (5/5 pass)
- ✅ SSL-07: SQL Server compatibility confirmed

### **Authentication Tests**

Authentication tests results depend on database content:

- ✅ **AUTH-01:** Should PASS if Session 215 exists with specified GUID
- ⚠️ **AUTH-02:** May PASS or FAIL depending on alternate GUID in database
- ✅ **AUTH-03:** Should PASS - JSON format validation (independent of data)
- ✅ **AUTH-04:** Should PASS - SSL error detection (tests infrastructure)
- ✅ **AUTH-05:** Should PASS - Performance validation (< 5 seconds)
- ✅ **AUTH-06:** Should PASS - Concurrent request handling
- ✅ **AUTH-07:** Should PASS - Invalid GUID rejection
- ✅ **AUTH-08:** Should PASS - Database schema accessibility

---

## 🎯 **Validation Criteria**

### **Issue Resolution Confirmation**

The test harnesses confirm Issue-25 is resolved when:

1. **No SSL Certificate Errors**
   - Zero occurrences of "certificate chain was issued by an authority that is not trusted"
   - Zero occurrences of "SSL Provider" errors
   - Database connections establish successfully

2. **Authentication Flow Operational**
   - Host GUID validation completes without database connectivity errors
   - JSON responses use camelCase properties correctly
   - Authentication performance meets requirements (< 5 seconds)

3. **Configuration Persistence**
   - SSL bypass parameters present in all connection strings
   - Development environment configuration overrides base settings
   - Multiple connection scenarios work reliably

### **Regression Prevention**

Test harnesses prevent regression by:

- **Automated Validation:** Continuous integration can run these tests
- **Configuration Monitoring:** Tests detect if SSL bypass parameters are removed
- **Performance Benchmarking:** Tests catch performance degradation
- **Error Detection:** Tests identify SSL certificate errors immediately

---

## 🚀 **Integration with Development Workflow**

### **Pre-Commit Testing**

```powershell
# Run before committing SSL configuration changes
dotnet test --filter "SslConfiguration" --logger "console;verbosity=minimal"
```

### **Build Pipeline Integration**

```yaml
# Add to build pipeline (.github/workflows or Azure DevOps)
- name: Run SSL Configuration Tests
  run: dotnet test --filter Category=SSL --logger trx --results-directory TestResults

- name: Run Authentication Tests
  run: dotnet test --filter Category=Authentication --logger trx --results-directory TestResults
```

### **Local Development Validation**

```powershell
# Quick health check after configuration changes
dotnet test --filter "DisplayName=SSL-01*|DisplayName=AUTH-01*" --logger "console;verbosity=minimal"
```

---

## 📝 **Maintenance & Updates**

### **When to Update Tests**

- **Database Schema Changes:** Update connection string validation if schemas change
- **Authentication Logic Changes:** Update authentication flow tests if API changes
- **Performance Requirements:** Update performance thresholds if requirements change
- **New Connection Strings:** Add tests for any new database connections

### **Test Data Dependencies**

- **Session 215:** Tests depend on Session 215 existing with GUID `XQmUFUnFdjvsWq4IJhUU9b9mRSn7YHuZql/JMWaxFrM=`
- **Database Accessibility:** Tests require KSESSIONS_DEV database accessibility
- **SQL Server:** Tests require SQL Server instance running on AHHOME server

### **Monitoring Test Health**

```powershell
# Regular test health check (weekly recommended)
dotnet test --filter "SslConfiguration|HostAuthentication" --logger "console;verbosity=normal"

# Performance trend monitoring
dotnet test --filter "AUTH-05" --logger "console;verbosity=detailed"  # Track authentication timing
```

---

## 🎉 **Success Metrics**

### **Issue-25 Resolution Confirmed When:**

- ✅ All 7 SSL configuration tests pass consistently
- ✅ Authentication tests pass or fail gracefully (no SSL errors)
- ✅ Application startup shows no SSL certificate errors in logs
- ✅ Host authentication works for valid GUIDs in browser testing
- ✅ Performance meets established benchmarks (< 5 second authentication)

### **Long-term Success Indicators:**

- ✅ Zero SSL-related support tickets
- ✅ Consistent authentication performance
- ✅ Reliable database connectivity across development team
- ✅ Smooth development environment setup for new team members

---

**Test Harness Status:** ✅ **COMPLETED**  
**Issue-25 Status:** ✅ **RESOLVED**  
**Next Action:** Regular execution in development workflow

# NOOR Canvas Testing Standards and Best Practices

**Version:** 3.0 - **INFRASTRUCTURE BREAKTHROUGH EDITION**  
**Last Updated:** September 21, 2025  
**Scope:** Playwright E2E Testing, Unit Testing, Integration Testing

---

## � **INFRASTRUCTURE REVOLUTION (Sept 21, 2025)**

### **✅ MAJOR BREAKTHROUGH ACHIEVED:**

**All critical infrastructure issues have been RESOLVED through systematic root cause analysis!**

#### **🔥 Root Cause Identified & Fixed:**

- **PRIMARY ISSUE:** Duplicate Serilog console sink configuration
- **IMPACT:** Resource contention, duplicate logs, masked real problems
- **SOLUTION:** Single configuration-based logging approach
- **RESULT:** Rock-solid application stability with clean single log messages

#### **✅ Infrastructure Now Validated:**

- **✅ Multi-user support:** E2E tested with 2+ concurrent browsers
- **✅ SignalR circuits:** WebSocket connections established properly
- **✅ Database connectivity:** Multiple queries executed without issues
- **✅ API endpoints:** Token validation and session management stable
- **✅ 17+ seconds uptime:** Continuous operation under test load

---

## 🎯 **NEW SIMPLIFIED Testing Philosophy**

### **🚀 STREAMLINED Process Standard (Infrastructure Fixed!)**

**NEW APPROACH: Manual application management with stable testing**

#### **✅ RECOMMENDED Workflow (Validated & Stable):**

```powershell
# 1. Start NoorCanvas application (in dedicated terminal)
cd 'D:\PROJECTS\NOOR CANVAS\SPA\NoorCanvas'
dotnet run

# 2. Wait for SUCCESS indicators:
# "✅ NOOR-VALIDATION: Canvas database connection verified"
# "Application started. Press Ctrl+C to shut down."
# SINGLE log messages (confirms infrastructure fixes active)

# 3. Run Playwright tests (connects to stable running instance)
cd 'D:\PROJECTS\NOOR CANVAS'
npx playwright test --config=playwright-standalone.config.js --reporter=list
```

#### **🎯 Why This Now Works (Infrastructure Breakthrough):**

- **✅ No more crashes:** Application handles HTTP requests stably
- **✅ Clean logging:** Single messages enable proper debugging
- **✅ Stable startup:** Enhanced Kestrel configuration with production limits
- **✅ Non-blocking validation:** Application starts even if some checks fail

#### **✅ NEW Implementation in Tests (Infrastructure Fixed):**

```typescript
test.beforeEach(async ({ page }: { page: Page }) => {
  // Infrastructure now stable - simple setup approach
  console.log(
    "🎯 STABLE-INFRASTRUCTURE: Connecting to running NoorCanvas instance...",
  );

  // Optional: Quick health check to verify app is responding
  try {
    const response = await page.request.get("https://localhost:9091/healthz");
    if (!response.ok()) {
      console.log("⚠️  Health check failed - ensure NoorCanvas is running");
    }
  } catch (error) {
    console.log(
      "⚠️  Cannot connect - start NoorCanvas: cd SPA/NoorCanvas && dotnet run",
    );
  }
});
```

#### **🔧 LEGACY Process Kill (Still Available if Needed):**

```powershell
# Only use if experiencing issues - infrastructure fixes make this rarely needed
taskkill /f /im dotnet.exe /t 2>$null; taskkill /f /im node.exe /t 2>$null
```

---

## 📋 **Playwright Test Structure Standards**

### **File Naming Convention**

```
issue-[NUMBER]-[brief-description].spec.ts
```

**Examples:**

- `issue-120-host-control-panel-routing-fix.spec.ts`
- `issue-114-countries-dropdown-loading.spec.ts`

### **Test Organization**

```typescript
test.describe("Issue-XXX: [Brief Description]", () => {
  const baseURL = process.env.BASE_URL || "https://localhost:9091";

  // Session/test data constants
  const TEST_DATA = {
    token: "EXPECTED_TOKEN",
    sessionId: "EXPECTED_ID",
    // ... other constants
  };

  test.beforeEach(async ({ page }: { page: Page }) => {
    console.log("🔄 FRESH-START: Starting test with clean process state...");
  });

  test("should [specific behavior being tested]", async ({ page }) => {
    // Test implementation
  });
});
```

### **Required Test Documentation Header**

```typescript
/**
 * Issue-XXX [Issue Title]
 *
 * This test verifies that [specific problem] is resolved by testing:
 * 1. [Step 1 description]
 * 2. [Step 2 description]
 * 3. [Step 3 description]
 *
 * KEY FIXES TESTED:
 * - [File name]: [Specific change description]
 * - [File name]: [Specific change description]
 */
```

---

## 🔍 **Debugging and Monitoring Standards**

### **Required Logging Pattern**

```typescript
// Monitor navigation and API calls
const navigationLog: string[] = [];
const apiCalls: string[] = [];

page.on("request", (request) => {
  const url = request.url();
  if (url.includes("/api/") || url.includes("/host/")) {
    apiCalls.push(`REQUEST: ${request.method()} ${url}`);
  }
});

page.on("response", (response) => {
  const url = response.url();
  if (url.includes("/api/") || url.includes("/host/")) {
    apiCalls.push(`RESPONSE: ${response.status()} ${url}`);
  }
});

page.on("framenavigated", (frame) => {
  if (frame === page.mainFrame()) {
    navigationLog.push(`NAVIGATION: ${frame.url()}`);
  }
});

// Log results at end of test
console.log("🔍 Navigation History:");
navigationLog.forEach((nav) => console.log(nav));

console.log("🔍 API Call History:");
apiCalls.forEach((call) => console.log(call));
```

### **Console Error Monitoring**

```typescript
const consoleErrors: string[] = [];
page.on("console", (msg) => {
  if (msg.type() === "error") {
    consoleErrors.push(`CONSOLE ERROR: ${msg.text()}`);
  }
});

// Validate no critical errors at end of test
const hasCriticalErrors = consoleErrors.some(
  (error) =>
    error.includes("Failed to") ||
    error.includes("404") ||
    error.includes("500"),
);
expect(hasCriticalErrors).toBe(false);
```

---

## 🎮 **Test Execution Standards**

### **Application Startup Verification**

Before running ANY Playwright tests:

1. **Kill All Processes** (mandatory)
2. **Start Application Fresh**

```powershell
dotnet run --project "d:\PROJECTS\NOOR CANVAS\SPA\NoorCanvas\NoorCanvas.csproj" --no-build
```

3. **Wait for "Application started" message**
4. **Verify ports 9090/9091 are responding**

### **Test Execution Commands**

```powershell
# Individual test file
npx playwright test Tests/UI/issue-120-host-control-panel-routing-fix.spec.ts --headed

# With debugging
npx playwright test Tests/UI/issue-120-host-control-panel-routing-fix.spec.ts --headed --debug

# Full test suite (after verifying individual tests)
npx playwright test Tests/UI/ --headed
```

---

## ✅ **Validation Patterns**

### **URL Validation**

```typescript
// Positive assertions (what should be in URL)
await expect(page).toHaveURL(
  new RegExp(`/host/control-panel/${expectedToken}`),
);

// Negative assertions (what should NOT be in URL)
expect(page.url()).not.toContain("/host/control-panel/10227"); // Old session ID
```

### **Element Visibility Patterns**

```typescript
// Try multiple selectors for robustness
const selectors = [
  'h1:has-text("Expected Title")',
  '[data-testid="expected-element"]',
  ".expected-class",
];

let elementFound = false;
for (const selector of selectors) {
  try {
    if (await page.locator(selector).isVisible({ timeout: 5000 })) {
      elementFound = true;
      break;
    }
  } catch {
    // Continue to next selector
  }
}
expect(elementFound).toBe(true);
```

### **Data Loading Validation**

```typescript
// Wait for dynamic content
await page.waitForTimeout(3000);

// Check multiple possible data indicators
const dataElements = [
  page.locator(`text=${expectedData}`),
  page.locator('[data-testid="data-container"]'),
  page.locator(".data-loaded-indicator"),
];

let dataLoaded = false;
for (const element of dataElements) {
  try {
    if (await element.isVisible({ timeout: 3000 })) {
      dataLoaded = true;
      break;
    }
  } catch {
    // Continue to next element
  }
}
expect(dataLoaded).toBe(true);
```

---

## 🚨 **Common Pitfalls to Avoid**

### **❌ Don't Do This:**

```typescript
// Hard-coded timeouts without context
await page.waitForTimeout(10000);

// Single selector assumptions
await page.locator(".specific-class").click();

// Ignoring process cleanup
// (Starting tests without killing processes)
```

### **✅ Do This Instead:**

```typescript
// Contextual waits
await page.waitForLoadState("networkidle");
await page.waitForSelector(".expected-element", { timeout: 5000 });

// Multiple selector fallbacks
const selectors = [".primary-selector", '[data-testid="fallback"]'];
// ... (use pattern from above)

// Always start with process cleanup
// (Follow Fresh Process Standard)
```

---

## 📊 **Test Reporting Standards**

### **Required Console Output Pattern**

```typescript
console.log("🔧 [TEST-NAME]: [Brief description of what is being tested]...");
console.log("🏠 Step 1: [Description]...");
console.log("✅ [Success message]");
console.log("⚠️ [Warning message]");
console.log("❌ [Error message]");
console.log("🎯 [TEST-NAME] COMPLETED: [Summary of results]!");
```

### **Test Result Validation**

Every test should end with:

1. **Clear Pass/Fail Status**
2. **Logged Navigation History**
3. **Logged API Call History**
4. **Validation of Core Functionality**
5. **No Unhandled Console Errors**

---

## 🔄 **Integration with Issue Tracking**

### **Test Creation Workflow**

1. **Issue Created** → Add to `IssueTracker/NOT STARTED/`
2. **Implementation Started** → Move to `IssueTracker/IN PROGRESS/`
3. **Code Fixed** → Create Playwright test in `Tests/UI/`
4. **Test Passes** → Update issue status with test results
5. **Issue Verified** → Move to `IssueTracker/COMPLETED/`

### **Test File Location Standards**

- **Primary Tests:** `Tests/UI/issue-[number]-[description].spec.ts`
- **Workspace Tests:** `Workspaces/Testing/Issue-[Number]-[Description]/`
- **Legacy Tests:** `PlayWright/tests/` (maintain but prefer Tests/UI for new tests)

---

## 🎯 **Quality Gates**

### **Before Committing Tests:**

- [ ] Fresh process kill command documented and tested
- [ ] Test passes consistently (3+ runs)
- [ ] All console errors addressed or documented
- [ ] Navigation and API logging implemented
- [ ] Multiple selector fallbacks implemented
- [ ] Issue tracking updated with test results

### **Before Marking Issue Complete:**

- [ ] Primary functionality test passes
- [ ] Backward compatibility test passes (if applicable)
- [ ] Error handling test passes (if applicable)
- [ ] Integration with existing workflow verified
- [ ] Documentation updated

---

_This document establishes the mandatory standards for NOOR Canvas testing practices. All contributors must follow these patterns to ensure reliable, maintainable, and debuggable tests._
