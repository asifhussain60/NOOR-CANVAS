@page "/"
@page "/landing"
@using Microsoft.AspNetCore.Components
@using System.Net.Http.Json
@using System.Text.Json.Serialization
@inject IJSRuntime JSRuntime
@inject NavigationManager Navigation
@inject ILogger<Landing> Logger
@inject DialogService DialogService
@inject IHttpClientFactory HttpClientFactory

<div class="landing-container noor-fade-in">
    <!-- Logo Only - No Header Container -->
    <img src="images/NoorCanvas.png" 
         alt="NOOR Canvas Logo" 
         class="noor-main-logo" />

    <!-- Phase 3.6: Host-Only Landing Page (User Token Card Removed) -->
    <div class="noor-flex-single noor-max-w-2xl mx-auto p-4">
        
        <!-- Host Panel (Centered, Full Width) -->
        <div id="host-card" class="noor-card-wide noor-card-interactive bg-white rounded-3xl shadow-xl p-12 flex flex-col items-center text-center border-4 border-purple-500">
            <h2 class="text-3xl font-bold text-gray-800 mb-6">Host Control Panel</h2>
            
            @if (currentStep == 1)
            {
                <!-- Step 1: Large Button Design -->
                <div class="noor-large-button-content">
                    <i class="fa-solid fa-chalkboard-teacher noor-large-icon text-blue-600 mb-6" style="font-size: 4rem;"></i>
                    <p class="noor-large-button-text text-gray-800 font-semibold text-xl mb-4">HOST SESSION</p>
                    <p class="text-gray-600 mb-8">Manage Islamic learning sessions with interactive tools</p>
                </div>
                <button class="noor-btn noor-btn-primary w-full mt-8 text-lg py-4" @onclick="() => ShowHostForm()">
                    <i class="fa-solid fa-arrow-right me-2"></i>Access Host Dashboard
                </button>
            }
            else
            {
                <!-- Step 2: Input Form -->
                <p class="text-gray-600 mb-6 text-lg">Enter Your Host Authentication Token</p>
                <div class="w-full mb-6">
                    <label class="noor-label mb-2 text-left text-lg" for="hostGuid">
                        <i class="fa-solid fa-key text-blue-500 me-2"></i>Host GUID
                    </label>
                    <input type="text" 
                           id="hostGuid" 
                           class="noor-input w-full text-lg py-3" 
                           placeholder="Enter your Host GUID Token"
                           @bind="hostGuid" />
                    <small class="text-gray-500 mt-2 d-block">Get your Host GUID from the HostProvisioner tool or system administrator</small>
                </div>
                <button class="noor-btn noor-btn-primary w-full text-lg py-4" @onclick="() => HandleHostAccess()">
                    <i class="fa-solid fa-sign-in-alt me-2"></i>Access Host Dashboard
                </button>
                
                <!-- Phase 3.6: Information about User Access -->
                <div class="mt-8 p-4 bg-blue-50 rounded-lg border-l-4 border-blue-400">
                    <h6 class="text-blue-800 font-semibold mb-2">
                        <i class="fa-solid fa-info-circle me-2"></i>For Session Participants
                    </h6>
                    <p class="text-blue-700 text-sm">
                        Participants join sessions using direct token links provided by the host. 
                        If you have a session token, use the direct URL format: 
                        <code class="bg-blue-100 px-2 py-1 rounded">/user/{token}</code>
                    </p>
                </div>
            }
        </div>
    </div>

    <!-- Authentication Forms (Initially Hidden) -->
    <div class="auth-section" id="auth-section" style="display: none;">
        <div class="container">
            <div class="row justify-content-center">
                <div class="col-lg-6">
                    <!-- Manage Session -->
                    <div id="host-auth" style="display: none;">
                        <div class="auth-card">
                            <h4><i class="fas fa-key"></i> Manage Session</h4>
                            <p>Enter Your Token</p>
                            <form @onsubmit="AuthenticateHost" @onsubmit:preventDefault="true">
                                <div class="mb-3">
                                    <label class="form-label">Host GUID</label>
                                    <input type="text" class="form-control" @bind="hostGuid" 
                                           placeholder="Enter your Host GUID" required />
                                    <div class="form-text">
                                        Copy and Paste For Ease
                                    </div>
                                </div>
                                <button type="submit" class="btn btn-primary w-100" disabled="@isLoading">
                                    @if (isLoading)
                                    {
                                        <span class="spinner-border spinner-border-sm me-2"></span>
                                    }
                                    Access Dashboard
                                </button>
                            </form>
                        </div>
                    </div>

                    <!-- Phase 3.6: Participant Authentication removed for host-only UX -->
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    // Phase 3.6: Host-Only Landing Page State Management
    private int currentStep = 1; // 1 = Feature Display, 2 = Input Form
    private string selectedRole = "host"; // Always host in Phase 3.6
    private string hostGuid = "";
    private string errorMessage = "";
    private bool isLoading = false;
    
    private AlertDialog alertDialog = null!;
    private ConfirmDialog confirmDialog = null!;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // Register dialogs with the service after they are rendered
            DialogService.RegisterAlertDialog(alertDialog);
            DialogService.RegisterConfirmDialog(confirmDialog);
            
            Logger.LogInformation("NOOR-INFO: Landing page rendered for new visitor");
            await JSRuntime.InvokeVoidAsync("NoorLogger.info", "LANDING", "Landing page loaded", new { timestamp = DateTime.UtcNow });

            // Add CSS debug logging for Issue-64
            await JSRuntime.InvokeVoidAsync("console.log", "üé® NOOR-CSS-DEBUG: Landing page rendered - Issue-64 debugging");
            
            // Issue-75 & Issue-76 Debug Logging: Logo and Card Sizing Changes
            await JSRuntime.InvokeVoidAsync("console.log", "üìè NOOR-SIZING-DEBUG Issue-75: Logo increased to 280px height (was 160px) - LARGE and prominent");
            await JSRuntime.InvokeVoidAsync("console.log", "üìè NOOR-SIZING-DEBUG Issue-76: Cards reduced by 30% - min-width: 266px (was 380px), max-width: 336px (was 480px)");
            await JSRuntime.InvokeVoidAsync("console.log", "üìè NOOR-SIZING-DEBUG: Button content height reduced to 196px (was 280px), padding reduced to 2.1rem/1.4rem");
            
            // Log actual element sizes for verification
            await JSRuntime.InvokeVoidAsync("eval", @"
                setTimeout(() => {
                    const logo = document.querySelector('.noor-main-logo');
                    const cards = document.querySelectorAll('.noor-card-wide');
                    if (logo) {
                        console.log('üìê NOOR-ACTUAL-SIZE Logo:', {
                            computedHeight: getComputedStyle(logo).height,
                            actualHeight: logo.offsetHeight + 'px',
                            naturalHeight: logo.naturalHeight + 'px (original image)',
                            width: logo.offsetWidth + 'px'
                        });
                    }
                    if (cards.length > 0) {
                        cards.forEach((card, index) => {
                            console.log(`üìê NOOR-ACTUAL-SIZE Card ${index + 1}:`, {
                                width: card.offsetWidth + 'px',
                                height: card.offsetHeight + 'px',
                                computedMinWidth: getComputedStyle(card).minWidth,
                                computedMaxWidth: getComputedStyle(card).maxWidth
                            });
                        });
                    }
                }, 1000);
            ");
        }
    }

    private async Task SelectRole(string role)
    {
        selectedRole = role;
        Logger.LogInformation("NOOR-INFO: User selected role: {Role}", role);
        await JSRuntime.InvokeVoidAsync("NoorLogger.info", "ROLE-SELECTION", $"User selected role: {role}", new { role });

        // Show authentication section and specific form
        await JSRuntime.InvokeVoidAsync("eval", "document.getElementById('auth-section').style.display = 'block';");
        
        if (role == "host")
        {
            await JSRuntime.InvokeVoidAsync("eval", "document.getElementById('host-auth').style.display = 'block'; document.getElementById('participant-auth').style.display = 'none';");
        }
        else
        {
            await JSRuntime.InvokeVoidAsync("eval", "document.getElementById('participant-auth').style.display = 'block'; document.getElementById('host-auth').style.display = 'none';");
        }

        // Smooth scroll to auth section
        await JSRuntime.InvokeVoidAsync("eval", "document.getElementById('auth-section').scrollIntoView({ behavior: 'smooth' });");
    }

    private async Task AuthenticateHost()
    {
        if (string.IsNullOrWhiteSpace(hostGuid))
            return;

        isLoading = true;
        Logger.LogInformation("NOOR-INFO: Host authentication attempt with GUID: {HostGuid}", hostGuid.Substring(0, 8) + "...");
        
        try
        {
            await JSRuntime.InvokeVoidAsync("NoorLogger.info", "HOST-AUTH", "Host authentication initiated", new { guidPreview = hostGuid.Substring(0, 8) + "..." });

            // ‚úÖ LIVE API: Implement actual GUID validation against backend
            // Accept both standard GUID format and base64 hash format
            bool isValidFormat = Guid.TryParse(hostGuid, out Guid guid) || IsBase64String(hostGuid);
            
            if (isValidFormat)
            {
                using var httpClient = HttpClientFactory.CreateClient("default");
                var request = new { HostGuid = hostGuid };
                var response = await httpClient.PostAsJsonAsync("/api/host/authenticate", request);
                
                if (response.IsSuccessStatusCode)
                {
                    var authResponse = await response.Content.ReadFromJsonAsync<HostAuthResponse>();
                    if (authResponse?.Success == true)
                    {
                        Logger.LogInformation("NOOR-SUCCESS: Host GUID authenticated successfully, redirecting to session manager");
                        await JSRuntime.InvokeVoidAsync("NoorLogger.info", "HOST-AUTH", "Host authentication successful", new { hostGuid = guid });
                        Navigation.NavigateTo($"/host/session-manager?guid={guid}");
                        return;
                    }
                }
                
                Logger.LogWarning("NOOR-WARNING: Host authentication failed - Invalid credentials");
                errorMessage = "Invalid Host GUID. Please check your credentials.";
                await JSRuntime.InvokeVoidAsync("NoorLogger.error", "HOST-AUTH", "Authentication failed", new { reason = "Invalid credentials" });
            }
            else
            {
                Logger.LogWarning("NOOR-WARNING: Invalid Host GUID format: {HostGuid}", hostGuid);
                await JSRuntime.InvokeVoidAsync("NoorLogger.error", "HOST-AUTH", "Invalid GUID format", new { hostGuid });
                await DialogService.ShowErrorAsync("Invalid GUID format. Please check your Host GUID and try again.", "Authentication Error");
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "NOOR-ERROR: Host authentication failed");
            await JSRuntime.InvokeVoidAsync("NoorLogger.error", "HOST-AUTH", "Authentication failed", new { error = ex.Message });
            await DialogService.ShowErrorAsync("Authentication failed. Please try again.", "Authentication Error");
        }
        finally
        {
            isLoading = false;
        }
    }

    // Phase 3.6: Participant methods removed - users access via /user/{token} URLs

    // API Response Models
    public class HostAuthResponse
    {
        [JsonPropertyName("success")]
        public bool Success { get; set; }
        
        [JsonPropertyName("sessionToken")]
        public string SessionToken { get; set; } = string.Empty;
        
        [JsonPropertyName("expiresAt")]
        public DateTime ExpiresAt { get; set; }
        
        [JsonPropertyName("hostGuid")]
        public string HostGuid { get; set; } = string.Empty;
    }

    public class SessionValidationResponse
    {
        public bool IsValid { get; set; }
        public string SessionId { get; set; } = string.Empty;
        public string Status { get; set; } = string.Empty;
        public DateTime? ExpiresAt { get; set; }
    }

    // Phase 3.6: Host-Only Form Transition
    private async Task ShowHostForm()
    {
        selectedRole = "host";
        currentStep = 2;
        
        Logger.LogInformation("NOOR-UX: ShowHostForm called - transitioning to host input form");
        await JSRuntime.InvokeVoidAsync("console.log", "üéØ NOOR-UX: Host form transition - single card mode");
        
        Logger.LogInformation("NOOR-UX: Transitioned to Host input form (Step 2)");
        StateHasChanged(); // Force re-render to show input form
    }

    // Phase 3.6: ShowParticipantForm method removed - replaced by direct /user/{token} routing

    // Enhanced Interactive Card Handlers
    private async Task HandleHostAccess()
    {
        // Call existing authentication method
        await AuthenticateHost();
    }

    // Phase 3.6: HandleSessionJoin method removed - users access via /user/{token} URLs

    private static bool IsBase64String(string s)
    {
        if (string.IsNullOrWhiteSpace(s)) return false;
        
        try
        {
            // Check if it's a valid base64 string
            Convert.FromBase64String(s);
            // Additional check: base64 strings typically end with = or == for padding
            return s.Length % 4 == 0 && System.Text.RegularExpressions.Regex.IsMatch(s, @"^[a-zA-Z0-9+/]*={0,3}$");
        }
        catch
        {
            return false;
        }
    }

    // Enhanced Card Animation Class Management - Issue-67 UX Refinement
    private string GetCardClasses(string cardType)
    {
        if (currentStep == 1)
        {
            return ""; // Default state in step 1
        }
        
        // Step 2: Apply expansion/hiding classes
        if (selectedRole == cardType)
        {
            return "noor-card-expanded"; // Selected card expands and centers
        }
        else
        {
            return "noor-card-hidden"; // Other card hides
        }
    }
}

<style>
.landing-container {
    min-height: 100vh;
    background-color: #f3f4f6; /* bg-gray-100 equivalent */
    padding: 2rem 1rem;
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: flex-start;
    padding-top: 3rem;
}

.hero-section {
    padding: 80px 0 60px;
    color: white;
}

.hero-title {
    font-size: 3.5rem;
    font-weight: 700;
    margin-bottom: 1rem;
    text-shadow: 2px 2px 4px rgba(0,0,0,0.3);
}

.hero-subtitle {
    font-size: 1.4rem;
    margin-bottom: 1.5rem;
    opacity: 0.9;
}

.hero-description {
    font-size: 1.1rem;
    opacity: 0.8;
    line-height: 1.6;
}

.role-selection-section {
    padding: 60px 0;
}

.role-card {
    background: white;
    border-radius: 15px;
    padding: 40px 30px;
    text-align: center;
    box-shadow: 0 10px 30px rgba(0,0,0,0.1);
    transition: transform 0.3s ease, box-shadow 0.3s ease;
    cursor: pointer;
    height: 100%;
}

.role-card:hover {
    transform: translateY(-10px);
    box-shadow: 0 20px 40px rgba(0,0,0,0.15);
}

.role-icon {
    font-size: 4rem;
    margin-bottom: 20px;
}

.host-card .role-icon {
    color: #007bff;
}

.participant-card .role-icon {
    color: #28a745;
}

.role-card h3 {
    font-size: 1.8rem;
    font-weight: 600;
    margin-bottom: 15px;
    color: #333;
}

.role-card p {
    color: #666;
    margin-bottom: 20px;
}



.auth-section {
    padding: 60px 0;
    background: rgba(255,255,255,0.1);
}

.auth-card {
    background: white;
    border-radius: 15px;
    padding: 40px;
    box-shadow: 0 10px 30px rgba(0,0,0,0.1);
}

.auth-card h4 {
    color: #333;
    margin-bottom: 10px;
}

.auth-card p {
    color: #666;
    margin-bottom: 30px;
}

.form-control {
    border-radius: 8px;
    border: 2px solid #e9ecef;
    padding: 12px 15px;
    transition: border-color 0.3s ease;
}

.form-control:focus {
    border-color: #007bff;
    box-shadow: 0 0 0 0.2rem rgba(0,123,255,0.25);
}

.btn {
    border-radius: 8px;
    padding: 12px 20px;
    font-weight: 600;
    transition: all 0.3s ease;
}
</style>

<script>
// NOOR Canvas Card Animation System
window.NoorCardAnimator = {
    expandCard: function(activeCardId, inactiveCardId) {
        console.log('üöÄ NOOR-CARD-DEBUG: ========== EXPAND CARD START ==========');
        console.log('üéØ NOOR-CARD-DEBUG: Target - Active:', activeCardId, 'Inactive:', inactiveCardId);
        
        const activeCard = document.getElementById(activeCardId);
        const inactiveCard = document.getElementById(inactiveCardId);
        
        console.log('üîç NOOR-CARD-DEBUG: Element lookup results:', {
            activeCardFound: !!activeCard,
            inactiveCardFound: !!inactiveCard,
            activeCardElement: activeCard,
            inactiveCardElement: inactiveCard
        });
        
        if (activeCard && inactiveCard) {
            // Log current state before changes
            console.log('üìã NOOR-CARD-DEBUG: BEFORE - Active classes:', activeCard.classList.toString());
            console.log('üìã NOOR-CARD-DEBUG: BEFORE - Inactive classes:', inactiveCard.classList.toString());
            console.log('üìã NOOR-CARD-DEBUG: BEFORE - Inactive computed display:', window.getComputedStyle(inactiveCard).display);
            
            // Add expanded class to active card
            activeCard.classList.add('noor-card-expanded');
            console.log('‚úÖ NOOR-CARD-DEBUG: Added noor-card-expanded to', activeCardId);
            
            // Add hidden class to inactive card (now uses display:none)
            inactiveCard.classList.add('noor-card-hidden');
            console.log('‚úÖ NOOR-CARD-DEBUG: Added noor-card-hidden to', inactiveCardId);
            
            // Force a reflow to ensure styles are applied
            inactiveCard.offsetHeight;
            
            // Log state after changes
            console.log('üìã NOOR-CARD-DEBUG: AFTER - Active classes:', activeCard.classList.toString());
            console.log('üìã NOOR-CARD-DEBUG: AFTER - Inactive classes:', inactiveCard.classList.toString());
            
            // Check computed styles with delay to ensure CSS has processed
            setTimeout(() => {
                const inactiveStyles = window.getComputedStyle(inactiveCard);
                console.log('üîç NOOR-CARD-DEBUG: FINAL - Inactive computed display:', inactiveStyles.display);
                console.log('üîç NOOR-CARD-DEBUG: FINAL - Inactive visibility:', inactiveStyles.visibility);
                console.log('üîç NOOR-CARD-DEBUG: FINAL - Inactive opacity:', inactiveStyles.opacity);
                console.log('üîç NOOR-CARD-DEBUG: FINAL - Inactive offsetWidth:', inactiveCard.offsetWidth);
                console.log('üîç NOOR-CARD-DEBUG: FINAL - Inactive offsetHeight:', inactiveCard.offsetHeight);
                
                // Check if element is actually hidden
                const isHidden = inactiveStyles.display === 'none' || inactiveCard.offsetWidth === 0;
                console.log('üéØ NOOR-CARD-DEBUG: Is inactive card truly hidden?', isHidden);
                
                if (!isHidden) {
                    console.error('‚ùå NOOR-CARD-DEBUG: CRITICAL - Card is not hidden despite display:none class!');
                    console.error('‚ùå NOOR-CARD-DEBUG: CSS Rule investigation needed');
                }
            }, 100);
            
            // Optional: Add focus to the input in active card
            setTimeout(() => {
                const input = activeCard.querySelector('input');
                if (input) {
                    input.focus();
                    console.log('ÔøΩ NOOR-CARD-DEBUG: Input focused in active card');
                }
            }, 200);
            
            console.log('‚úÖ NOOR Canvas: Card animation complete - Expanded:', activeCardId, 'Hidden:', inactiveCardId);
        } else {
            console.error('‚ùå NOOR-CARD-DEBUG: CRITICAL - Cards not found!', { 
                activeCardId, 
                inactiveCardId, 
                activeCard: !!activeCard, 
                inactiveCard: !!inactiveCard 
            });
        }
        console.log('üèÅ NOOR-CARD-DEBUG: ========== EXPAND CARD END ==========');
    },
    
    resetCards: function() {
        const hostCard = document.getElementById('host-card');
        const participantCard = document.getElementById('participant-card');
        
        if (hostCard && participantCard) {
            // Remove all animation classes
            hostCard.classList.remove('noor-card-expanded', 'noor-card-hidden');
            participantCard.classList.remove('noor-card-expanded', 'noor-card-hidden');
            
            console.log('NOOR Canvas: Cards reset to default state');
        }
    }
};

// Initialize on page load
document.addEventListener('DOMContentLoaded', function() {
    console.log('NOOR Canvas: Card animation system initialized');
});
</script>

<!-- Dialog Components -->
<AlertDialog @ref="alertDialog" />
<ConfirmDialog @ref="confirmDialog" />

