@page "/"
@page "/landing"
@using Microsoft.AspNetCore.Components
@using System.Net.Http.Json
@using System.Text.Json.Serialization
@inject IJSRuntime JSRuntime
@inject NavigationManager Navigation
@inject ILogger<Landing> Logger
@inject DialogService DialogService
@inject IHttpClientFactory HttpClientFactory

<div class="landing-container noor-fade-in">
    <!-- Header with NOOR Canvas Branding -->
    <header class="noor-header-container">
        <div class="text-center p-4 bg-white rounded-3xl shadow-xl noor-max-w-4xl mx-auto">
            <img src="~/images/branding/NC-Header.png" alt="NOOR Canvas - Real-time Islamic Content Sharing Platform" class="img-fluid" style="max-width: 100%; height: auto;" />
        </div>
    </header>

    <!-- Role Selection (Following Mock Design) -->
    <div class="noor-flex-panel noor-max-w-4xl mx-auto p-4">
        
        <!-- Host Panel -->
        <div class="flex-1 bg-white rounded-3xl shadow-xl p-8 flex flex-col items-center text-center border-4 border-purple-500">
            <i class="fa-solid fa-house-user text-6xl text-blue-600 mb-4"></i>
            <h2 class="text-2xl font-bold text-gray-800 mb-4">I am a Host</h2>
            <p class="text-gray-600 mb-6">Create and manage Islamic content sessions</p>
            
            <ul class="noor-feature-list text-left w-full mb-8">
                <li>
                    <i class="fa-solid fa-database text-green-500 me-3"></i>
                    <span class="text-gray-700">Create new sessions</span>
                </li>
                <li>
                    <i class="fa-solid fa-share-nodes text-green-500 me-3"></i>
                    <span class="text-gray-700">Share Islamic content</span>
                </li>
                <li>
                    <i class="fa-solid fa-comments text-green-500 me-3"></i>
                    <span class="text-gray-700">Manage Q&A discussions</span>
                </li>
                <li>
                    <i class="fa-solid fa-highlighter text-green-500 me-3"></i>
                    <span class="text-gray-700">Real-time annotations</span>
                </li>
            </ul>
            
            <button class="noor-btn noor-btn-primary w-full" @onclick='() => SelectRole("host")'>
                Continue as Host
            </button>
        </div>

        <!-- Participant Panel -->
        <div class="flex-1 bg-white rounded-3xl shadow-xl p-8 flex flex-col items-center text-center border-4 border-purple-500">
            <i class="fa-solid fa-users text-6xl text-green-600 mb-4"></i>
            <h2 class="text-2xl font-bold text-gray-800 mb-4">I am a Participant</h2>
            <p class="text-gray-600 mb-6">Join existing sessions and engage with content</p>
            
            <ul class="noor-feature-list text-left w-full mb-8">
                <li>
                    <i class="fa-solid fa-right-to-bracket text-blue-500 me-3"></i>
                    <span class="text-gray-700">Join active sessions</span>
                </li>
                <li>
                    <i class="fa-solid fa-eye text-blue-500 me-3"></i>
                    <span class="text-gray-700">View shared content</span>
                </li>
                <li>
                    <i class="fa-solid fa-question-circle text-blue-500 me-3"></i>
                    <span class="text-gray-700">Ask questions</span>
                </li>
                <li>
                    <i class="fa-solid fa-thumbs-up text-blue-500 me-3"></i>
                    <span class="text-gray-700">Vote on discussions</span>
                </li>
            </ul>
            
            <button class="noor-btn noor-btn-success w-full" @onclick='() => SelectRole("participant")'>
                Join Session
            </button>
        </div>
    </div>

    <!-- Authentication Forms (Initially Hidden) -->
    <div class="auth-section" id="auth-section" style="display: none;">
        <div class="container">
            <div class="row justify-content-center">
                <div class="col-lg-6">
                    <!-- Host Authentication -->
                    <div id="host-auth" style="display: none;">
                        <div class="auth-card">
                            <h4><i class="fas fa-key"></i> Host Authentication</h4>
                            <p>Enter your Host GUID to access the dashboard</p>
                            <form @onsubmit="AuthenticateHost" @onsubmit:preventDefault="true">
                                <div class="mb-3">
                                    <label class="form-label">Host GUID</label>
                                    <input type="text" class="form-control" @bind="hostGuid" 
                                           placeholder="Enter your Host GUID" required />
                                    <div class="form-text">
                                        Get your Host GUID from the HostProvisioner tool
                                    </div>
                                </div>
                                <button type="submit" class="btn btn-primary w-100" disabled="@isLoading">
                                    @if (isLoading)
                                    {
                                        <span class="spinner-border spinner-border-sm me-2"></span>
                                    }
                                    Access Dashboard
                                </button>
                            </form>
                        </div>
                    </div>

                    <!-- Participant Authentication -->
                    <div id="participant-auth" style="display: none;">
                        <div class="auth-card">
                            <h4><i class="fas fa-link"></i> Join Session</h4>
                            <p>Enter the session link provided by your host</p>
                            <form @onsubmit="JoinSession" @onsubmit:preventDefault="true">
                                <div class="mb-3">
                                    <label class="form-label">Session Link or ID</label>
                                    <input type="text" class="form-control" @bind="sessionLink" 
                                           placeholder="https://noorcanvas.com/session/... or Session ID" required />
                                </div>
                                <button type="submit" class="btn btn-success w-100" disabled="@isLoading">
                                    @if (isLoading)
                                    {
                                        <span class="spinner-border spinner-border-sm me-2"></span>
                                    }
                                    Join Session
                                </button>
                            </form>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private string selectedRole = "";
    private string hostGuid = "";
    private string sessionLink = "";
    private string errorMessage = "";
    private bool isLoading = false;
    
    private AlertDialog alertDialog = null!;
    private ConfirmDialog confirmDialog = null!;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // Register dialogs with the service after they are rendered
            DialogService.RegisterAlertDialog(alertDialog);
            DialogService.RegisterConfirmDialog(confirmDialog);
            
            Logger.LogInformation("NOOR-INFO: Landing page rendered for new visitor");
            await JSRuntime.InvokeVoidAsync("NoorLogger.info", "LANDING", "Landing page loaded", new { timestamp = DateTime.UtcNow });

            // Add CSS debug logging for Issue-64
            await JSRuntime.InvokeVoidAsync("console.log", "ðŸŽ¨ NOOR-CSS-DEBUG: Landing page rendered - Issue-64 debugging");
        }
    }

    private async Task SelectRole(string role)
    {
        selectedRole = role;
        Logger.LogInformation("NOOR-INFO: User selected role: {Role}", role);
        await JSRuntime.InvokeVoidAsync("NoorLogger.info", "ROLE-SELECTION", $"User selected role: {role}", new { role });

        // Show authentication section and specific form
        await JSRuntime.InvokeVoidAsync("eval", "document.getElementById('auth-section').style.display = 'block';");
        
        if (role == "host")
        {
            await JSRuntime.InvokeVoidAsync("eval", "document.getElementById('host-auth').style.display = 'block'; document.getElementById('participant-auth').style.display = 'none';");
        }
        else
        {
            await JSRuntime.InvokeVoidAsync("eval", "document.getElementById('participant-auth').style.display = 'block'; document.getElementById('host-auth').style.display = 'none';");
        }

        // Smooth scroll to auth section
        await JSRuntime.InvokeVoidAsync("eval", "document.getElementById('auth-section').scrollIntoView({ behavior: 'smooth' });");
    }

    private async Task AuthenticateHost()
    {
        if (string.IsNullOrWhiteSpace(hostGuid))
            return;

        isLoading = true;
        Logger.LogInformation("NOOR-INFO: Host authentication attempt with GUID: {HostGuid}", hostGuid.Substring(0, 8) + "...");
        
        try
        {
            await JSRuntime.InvokeVoidAsync("NoorLogger.info", "HOST-AUTH", "Host authentication initiated", new { guidPreview = hostGuid.Substring(0, 8) + "..." });

            // âœ… LIVE API: Implement actual GUID validation against backend
            // Accept both standard GUID format and base64 hash format
            bool isValidFormat = Guid.TryParse(hostGuid, out Guid guid) || IsBase64String(hostGuid);
            
            if (isValidFormat)
            {
                using var httpClient = HttpClientFactory.CreateClient("default");
                var request = new { HostGuid = hostGuid };
                var response = await httpClient.PostAsJsonAsync("/api/host/authenticate", request);
                
                if (response.IsSuccessStatusCode)
                {
                    var authResponse = await response.Content.ReadFromJsonAsync<HostAuthResponse>();
                    if (authResponse?.Success == true)
                    {
                        Logger.LogInformation("NOOR-SUCCESS: Host GUID authenticated successfully, redirecting to session manager");
                        await JSRuntime.InvokeVoidAsync("NoorLogger.info", "HOST-AUTH", "Host authentication successful", new { hostGuid = guid });
                        Navigation.NavigateTo($"/host/session-manager?guid={guid}");
                        return;
                    }
                }
                
                Logger.LogWarning("NOOR-WARNING: Host authentication failed - Invalid credentials");
                errorMessage = "Invalid Host GUID. Please check your credentials.";
                await JSRuntime.InvokeVoidAsync("NoorLogger.error", "HOST-AUTH", "Authentication failed", new { reason = "Invalid credentials" });
            }
            else
            {
                Logger.LogWarning("NOOR-WARNING: Invalid Host GUID format: {HostGuid}", hostGuid);
                await JSRuntime.InvokeVoidAsync("NoorLogger.error", "HOST-AUTH", "Invalid GUID format", new { hostGuid });
                await DialogService.ShowErrorAsync("Invalid GUID format. Please check your Host GUID and try again.", "Authentication Error");
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "NOOR-ERROR: Host authentication failed");
            await JSRuntime.InvokeVoidAsync("NoorLogger.error", "HOST-AUTH", "Authentication failed", new { error = ex.Message });
            await DialogService.ShowErrorAsync("Authentication failed. Please try again.", "Authentication Error");
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task JoinSession()
    {
        if (string.IsNullOrWhiteSpace(sessionLink))
            return;

        isLoading = true;
        Logger.LogInformation("NOOR-INFO: Participant join attempt with session: {SessionLink}", sessionLink);
        
        try
        {
            await JSRuntime.InvokeVoidAsync("NoorLogger.info", "PARTICIPANT-JOIN", "Session join initiated", new { sessionLink });

            // Extract session ID from link or use direct ID
            string sessionId = ExtractSessionId(sessionLink);
            
            // âœ… LIVE API: Validate session exists and is active
            using var httpClient = HttpClientFactory.CreateClient("default");
            var response = await httpClient.GetAsync($"/api/participant/session/{sessionId}/validate");
            
            if (response.IsSuccessStatusCode)
            {
                var validationResponse = await response.Content.ReadFromJsonAsync<SessionValidationResponse>();
                if (validationResponse?.IsValid == true)
                {
                    Logger.LogInformation("NOOR-SUCCESS: Valid session ID extracted, redirecting to registration");
                    await JSRuntime.InvokeVoidAsync("NoorLogger.info", "PARTICIPANT-JOIN", "Session validation successful", new { sessionId });
                    Navigation.NavigateTo($"/participant/register?session={sessionId}");
                }
                else
                {
                    Logger.LogWarning("NOOR-WARNING: Session validation failed: {SessionLink}", sessionLink);
                    await JSRuntime.InvokeVoidAsync("NoorLogger.error", "PARTICIPANT-JOIN", "Session validation failed", new { sessionLink });
                    await DialogService.ShowErrorAsync("Session is not active or does not exist.", "Invalid Session");
                }
            }
            else
            {
                Logger.LogWarning("NOOR-WARNING: Session validation API error: {SessionLink}", sessionLink);
                await JSRuntime.InvokeVoidAsync("NoorLogger.error", "PARTICIPANT-JOIN", "Session validation API error", new { sessionLink, status = response.StatusCode });
                await DialogService.ShowErrorAsync("Unable to validate session. Please check the link and try again.", "Validation Failed");
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "NOOR-ERROR: Participant session join failed");
            await JSRuntime.InvokeVoidAsync("NoorLogger.error", "PARTICIPANT-JOIN", "Join failed", new { error = ex.Message });
            await DialogService.ShowErrorAsync("Failed to join session. Please try again.", "Session Join Failed");
        }
        finally
        {
            isLoading = false;
        }
    }

    private string ExtractSessionId(string sessionLink)
    {
        // Handle direct GUID
        if (Guid.TryParse(sessionLink, out Guid directGuid))
        {
            return directGuid.ToString();
        }

        // Handle URL format
        if (sessionLink.Contains("/session/"))
        {
            var parts = sessionLink.Split("/session/");
            if (parts.Length > 1)
            {
                var idPart = parts[1].Split('?')[0]; // Remove query parameters
                if (Guid.TryParse(idPart, out Guid urlGuid))
                {
                    return urlGuid.ToString();
                }
            }
        }

        return "";
    }

    // API Response Models
    public class HostAuthResponse
    {
        [JsonPropertyName("success")]
        public bool Success { get; set; }
        
        [JsonPropertyName("sessionToken")]
        public string SessionToken { get; set; } = string.Empty;
        
        [JsonPropertyName("expiresAt")]
        public DateTime ExpiresAt { get; set; }
        
        [JsonPropertyName("hostGuid")]
        public string HostGuid { get; set; } = string.Empty;
    }

    public class SessionValidationResponse
    {
        public bool IsValid { get; set; }
        public string SessionId { get; set; } = string.Empty;
        public string Status { get; set; } = string.Empty;
        public DateTime? ExpiresAt { get; set; }
    }

    private static bool IsBase64String(string s)
    {
        if (string.IsNullOrWhiteSpace(s)) return false;
        
        try
        {
            // Check if it's a valid base64 string
            Convert.FromBase64String(s);
            // Additional check: base64 strings typically end with = or == for padding
            return s.Length % 4 == 0 && System.Text.RegularExpressions.Regex.IsMatch(s, @"^[a-zA-Z0-9+/]*={0,3}$");
        }
        catch
        {
            return false;
        }
    }
}

<style>
.landing-container {
    min-height: 100vh;
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
}

.hero-section {
    padding: 80px 0 60px;
    color: white;
}

.hero-title {
    font-size: 3.5rem;
    font-weight: 700;
    margin-bottom: 1rem;
    text-shadow: 2px 2px 4px rgba(0,0,0,0.3);
}

.hero-subtitle {
    font-size: 1.4rem;
    margin-bottom: 1.5rem;
    opacity: 0.9;
}

.hero-description {
    font-size: 1.1rem;
    opacity: 0.8;
    line-height: 1.6;
}

.role-selection-section {
    padding: 60px 0;
}

.role-card {
    background: white;
    border-radius: 15px;
    padding: 40px 30px;
    text-align: center;
    box-shadow: 0 10px 30px rgba(0,0,0,0.1);
    transition: transform 0.3s ease, box-shadow 0.3s ease;
    cursor: pointer;
    height: 100%;
}

.role-card:hover {
    transform: translateY(-10px);
    box-shadow: 0 20px 40px rgba(0,0,0,0.15);
}

.role-icon {
    font-size: 4rem;
    margin-bottom: 20px;
}

.host-card .role-icon {
    color: #007bff;
}

.participant-card .role-icon {
    color: #28a745;
}

.role-card h3 {
    font-size: 1.8rem;
    font-weight: 600;
    margin-bottom: 15px;
    color: #333;
}

.role-card p {
    color: #666;
    margin-bottom: 20px;
}

.role-features {
    list-style: none;
    padding: 0;
    margin-bottom: 20px;
}

.role-features li {
    padding: 8px 0;
    color: #555;
    position: relative;
    padding-left: 25px;
}

.role-features li:before {
    content: "âœ“";
    position: absolute;
    left: 0;
    color: #28a745;
    font-weight: bold;
}

.auth-section {
    padding: 60px 0;
    background: rgba(255,255,255,0.1);
}

.auth-card {
    background: white;
    border-radius: 15px;
    padding: 40px;
    box-shadow: 0 10px 30px rgba(0,0,0,0.1);
}

.auth-card h4 {
    color: #333;
    margin-bottom: 10px;
}

.auth-card p {
    color: #666;
    margin-bottom: 30px;
}

.form-control {
    border-radius: 8px;
    border: 2px solid #e9ecef;
    padding: 12px 15px;
    transition: border-color 0.3s ease;
}

.form-control:focus {
    border-color: #007bff;
    box-shadow: 0 0 0 0.2rem rgba(0,123,255,0.25);
}

.btn {
    border-radius: 8px;
    padding: 12px 20px;
    font-weight: 600;
    transition: all 0.3s ease;
}
</style>

<!-- Dialog Components -->
<AlertDialog @ref="alertDialog" />
<ConfirmDialog @ref="confirmDialog" />

