@page "/host/{token}"
@using System.Net.Http.Json
@using System.Text.Json.Serialization
@inject IHttpClientFactory HttpClientFactory
@inject IJSRuntime JSRuntime
@inject NavigationManager Navigation
@inject ILogger<HostToken> Logger

<PageTitle>NOOR Canvas - Host Access</PageTitle>

@if (isValidating)
{
    <div class="d-flex justify-content-center align-items-center" style="height: 100vh;">
        <div class="text-center">
            <div class="spinner-border text-primary" role="status" style="width: 3rem; height: 3rem;">
                <span class="visually-hidden">Validating host token...</span>
            </div>
            <h4 class="mt-3 text-primary">Validating Host Access</h4>
            <p class="text-muted">Token: @Token</p>
            @if (!string.IsNullOrEmpty(debugMessage))
            {
                <div class="mt-3 p-3 bg-light rounded">
                    <small class="text-muted">@debugMessage</small>
                </div>
            }
        </div>
    </div>
}
else if (validationResult != null)
{
    @if (validationResult.Valid)
    {
        <div class="container-fluid noor-host-container">
            <div class="alert alert-success">
                <h4><i class="fas fa-check-circle"></i> Host Token Validated Successfully</h4>
                <p><strong>Session ID:</strong> @validationResult.SessionId</p>
                <p><strong>Session Title:</strong> @validationResult.Session?.Title</p>
                <p><strong>Token Type:</strong> @validationResult.TokenType</p>
                <p><strong>Access Count:</strong> @validationResult.AccessCount</p>
                <p><strong>Expires At:</strong> @validationResult.ExpiresAt.ToString("yyyy-MM-dd HH:mm:ss")</p>
                
                <div class="mt-4">
                    <button class="btn btn-primary btn-lg me-3" @onclick="RedirectToHostSessionManager">
                        <i class="fas fa-tachometer-alt me-2"></i>Go to Host Dashboard
                    </button>
                    <button class="btn btn-outline-secondary" @onclick="NavigateToHome">
                        <i class="fas fa-home me-2"></i>Return to Home
                    </button>
                </div>
            </div>
            
            <!-- Debug Information -->
            <div class="mt-4 p-3 bg-light rounded">
                <h6>Debug Information:</h6>
                <pre class="text-small">@debugInfo</pre>
            </div>
        </div>
    }
    else
    {
        <div class="container">
            <div class="row justify-content-center">
                <div class="col-lg-6">
                    <div class="alert alert-danger text-center">
                        <h4><i class="fas fa-exclamation-triangle"></i> Invalid Host Token</h4>
                        <p>The host token "@Token" is not valid or has expired.</p>
                        
                        @if (!string.IsNullOrEmpty(errorMessage))
                        {
                            <div class="mt-3 p-3 bg-light rounded">
                                <strong>Error Details:</strong>
                                <p class="text-muted mt-2">@errorMessage</p>
                            </div>
                        }
                        
                        <div class="mt-4">
                            <button class="btn btn-primary me-3" @onclick="NavigateToHome">
                                <i class="fas fa-home me-2"></i>Return to Home
                            </button>
                            <button class="btn btn-outline-secondary" @onclick="RetryValidation">
                                <i class="fas fa-redo me-2"></i>Retry Validation
                            </button>
                        </div>
                    </div>
                    
                    <!-- Debug Information -->
                    <div class="mt-4 p-3 bg-light rounded">
                        <h6>Debug Information:</h6>
                        <pre class="text-small">@debugInfo</pre>
                    </div>
                </div>
            </div>
        </div>
    }
}

@code {
    [Parameter] public string Token { get; set; } = string.Empty;
    
    private bool isValidating = true;
    private TokenValidationResponse? validationResult;
    private string errorMessage = string.Empty;
    private string debugMessage = string.Empty;
    private string debugInfo = string.Empty;
    
    protected override async Task OnInitializedAsync()
    {
        Logger.LogInformation("NOOR-HOST-TOKEN: Page loaded with token: {Token}", Token);
        debugInfo = $"Token received: {Token}\n";
        debugInfo += $"Page loaded at: {DateTime.UtcNow:yyyy-MM-dd HH:mm:ss} UTC\n";
        
        await ValidateHostToken();
    }
    
    private async Task ValidateHostToken()
    {
        if (string.IsNullOrWhiteSpace(Token))
        {
            Logger.LogWarning("NOOR-HOST-TOKEN: No token provided in URL parameter");
            errorMessage = "No token provided in URL parameter";
            debugInfo += "ERROR: Token is null or empty\n";
            isValidating = false;
            return;
        }
        
        if (Token.Length != 8)
        {
            Logger.LogWarning("NOOR-HOST-TOKEN: Invalid token length: {Length}, expected 8 characters", Token.Length);
            errorMessage = $"Invalid token length: {Token.Length}, expected 8 characters";
            debugInfo += $"ERROR: Invalid token length: {Token.Length}\n";
            isValidating = false;
            return;
        }
        
        debugMessage = "Contacting token validation API...";
        debugInfo += "Calling API: /api/token/validate/{token}?isHost=true\n";
        StateHasChanged();
        
        try
        {
            using var httpClient = HttpClientFactory.CreateClient("default");
            Logger.LogInformation("NOOR-HOST-TOKEN: Validating token {Token} via API", Token);
            
            var response = await httpClient.GetAsync($"/api/token/validate/{Token}?isHost=true");
            debugInfo += $"API Response Status: {response.StatusCode}\n";
            debugInfo += $"API Response Headers: {string.Join(", ", response.Headers.Select(h => $"{h.Key}={string.Join(",", h.Value)}"))}\n";
            
            if (response.IsSuccessStatusCode)
            {
                var responseText = await response.Content.ReadAsStringAsync();
                debugInfo += $"API Response Body: {responseText}\n";
                
                validationResult = await response.Content.ReadFromJsonAsync<TokenValidationResponse>();
                
                if (validationResult != null)
                {
                    Logger.LogInformation("NOOR-HOST-TOKEN: Token validation successful for session {SessionId}", validationResult.SessionId);
                    debugInfo += $"Validation Result: Valid={validationResult.Valid}, SessionId={validationResult.SessionId}\n";
                    debugInfo += $"Session Title: {validationResult.Session?.Title}\n";
                    debugInfo += $"Token Type: {validationResult.TokenType}\n";
                }
                else
                {
                    Logger.LogWarning("NOOR-HOST-TOKEN: Failed to deserialize validation response");
                    errorMessage = "Failed to parse validation response";
                    debugInfo += "ERROR: Failed to deserialize API response\n";
                }
            }
            else
            {
                var errorText = await response.Content.ReadAsStringAsync();
                Logger.LogWarning("NOOR-HOST-TOKEN: API validation failed with status {StatusCode}: {Error}", response.StatusCode, errorText);
                errorMessage = $"API Error {response.StatusCode}: {errorText}";
                debugInfo += $"API Error: {response.StatusCode} - {errorText}\n";
                
                // Create a failed validation result
                validationResult = new TokenValidationResponse { Valid = false };
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "NOOR-HOST-TOKEN: Exception during token validation");
            errorMessage = $"Validation failed: {ex.Message}";
            debugInfo += $"EXCEPTION: {ex.Message}\n";
            debugInfo += $"Stack Trace: {ex.StackTrace}\n";
            
            // Create a failed validation result
            validationResult = new TokenValidationResponse { Valid = false };
        }
        finally
        {
            isValidating = false;
            StateHasChanged();
        }
    }
    
    private async Task RetryValidation()
    {
        isValidating = true;
        validationResult = null;
        errorMessage = string.Empty;
        debugMessage = string.Empty;
        debugInfo = $"Retry attempt at: {DateTime.UtcNow:yyyy-MM-dd HH:mm:ss} UTC\n";
        
        StateHasChanged();
        await ValidateHostToken();
    }
    
    private void RedirectToHostSessionManager()
    {
        if (validationResult?.Valid == true)
        {
            Logger.LogInformation("NOOR-HOST-TOKEN: Redirecting to host session manager for session {SessionId}", validationResult.SessionId);
            
            // Generate a temporary host GUID for this session (in a real implementation, this would come from the token validation)
            var tempHostGuid = "host-" + Guid.NewGuid().ToString();
            Navigation.NavigateTo($"/host/session-manager?guid={tempHostGuid}&sessionId={validationResult.SessionId}");
        }
    }
    
    private void NavigateToHome()
    {
        Navigation.NavigateTo("/");
    }
    
    // Response model matching the API
    public class TokenValidationResponse
    {
        [JsonPropertyName("valid")]
        public bool Valid { get; set; }
        
        [JsonPropertyName("sessionId")]
        public long SessionId { get; set; }
        
        [JsonPropertyName("tokenType")]
        public string TokenType { get; set; } = string.Empty;
        
        [JsonPropertyName("expiresAt")]
        public DateTime ExpiresAt { get; set; }
        
        [JsonPropertyName("accessCount")]
        public int AccessCount { get; set; }
        
        [JsonPropertyName("session")]
        public SessionInfo? Session { get; set; }
    }
    
    public class SessionInfo
    {
        [JsonPropertyName("sessionId")]
        public long SessionId { get; set; }
        
        [JsonPropertyName("title")]
        public string? Title { get; set; }
        
        [JsonPropertyName("description")]
        public string? Description { get; set; }
        
        [JsonPropertyName("status")]
        public string? Status { get; set; }
        
        [JsonPropertyName("createdAt")]
        public DateTime CreatedAt { get; set; }
    }
}
