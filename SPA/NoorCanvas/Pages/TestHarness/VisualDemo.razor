@page "/visual-demo"
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.EntityFrameworkCore
@using NoorCanvas.Models.Simplified
@using SimplifiedSession = NoorCanvas.Models.Simplified.Session
@using NoorCanvas.Data
@using System.Linq
@inject SimplifiedCanvasDbContext DbContext
@inject IJSRuntime JSRuntime
@inject IHttpClientFactory HttpClientFactory
@inject NavigationManager Navigation
@inject ILogger<VisualDemo> Logger

<style>
    body { margin: 0; padding: 20px; background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); min-height: 100vh; font-family: 'Inter', sans-serif; }
    
    .visual-demo-container {
        max-width: 1400px;
        margin: 0 auto;
        background: white;
        border-radius: 20px;
        box-shadow: 0 25px 50px rgba(0,0,0,0.15);
        padding: 30px;
        animation: slideUp 0.6s ease-out;
    }
    
    .header {
        text-align: center;
        margin-bottom: 30px;
        border-bottom: 3px solid #3B82F6;
        padding-bottom: 20px;
    }
    
    .title {
        font-size: 3rem;
        font-weight: 800;
        background: linear-gradient(135deg, #3B82F6, #8B5CF6);
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
        background-clip: text;
        margin-bottom: 10px;
    }
    
    .subtitle {
        font-size: 1.2rem;
        color: #6B7280;
        margin-bottom: 20px;
    }
    
    .controls {
        display: flex;
        gap: 15px;
        justify-content: center;
        align-items: center;
        margin-bottom: 30px;
        flex-wrap: wrap;
    }
    
    .btn {
        padding: 12px 24px;
        border: none;
        border-radius: 8px;
        font-weight: 600;
        cursor: pointer;
        transition: all 0.3s ease;
        font-size: 14px;
        display: inline-flex;
        align-items: center;
        gap: 8px;
    }
    
    .btn-primary {
        background: linear-gradient(135deg, #3B82F6, #1D4ED8);
        color: white;
        box-shadow: 0 4px 15px rgba(59, 130, 246, 0.4);
    }
    
    .btn-primary:hover {
        transform: translateY(-2px);
        box-shadow: 0 6px 20px rgba(59, 130, 246, 0.6);
    }
    
    .status-display {
        text-align: center;
        padding: 20px;
        background: #F3F4F6;
        border-radius: 10px;
        margin-bottom: 20px;
        font-size: 18px;
        font-weight: 500;
        min-height: 60px;
        display: flex;
        align-items: center;
        justify-content: center;
    }
    
    .grid-container {
        display: grid;
        gap: 15px;
        margin-top: 20px;
    }
    
    .grid-2x2 { grid-template-columns: repeat(2, 1fr); }
    .grid-3x3 { grid-template-columns: repeat(3, 1fr); }
    .grid-4x4 { grid-template-columns: repeat(4, 1fr); }
    
    .user-frame {
        background: white;
        border-radius: 12px;
        box-shadow: 0 4px 12px rgba(0,0,0,0.1);
        overflow: hidden;
        transition: transform 0.3s ease, box-shadow 0.3s ease;
        position: relative;
    }
    
    .user-frame:hover {
        transform: translateY(-5px);
        box-shadow: 0 8px 25px rgba(0,0,0,0.15);
    }
    
    .user-header {
        background: linear-gradient(135deg, #3B82F6, #8B5CF6);
        color: white;
        padding: 12px;
        font-weight: 600;
        text-align: center;
        position: relative;
    }
    
    .status-dot {
        position: absolute;
        top: 12px;
        right: 12px;
        width: 12px;
        height: 12px;
        border-radius: 50%;
        border: 2px solid white;
    }
    
    .status-connecting { background: #F59E0B; }
    .status-active { background: #10B981; }
    .status-waiting { background: #3B82F6; }
    .status-error { background: #EF4444; }
    
    iframe {
        width: 100%;
        height: 400px;
        border: none;
        display: block;
    }
    
    @@keyframes slideUp {
        from { opacity: 0; transform: translateY(30px); }
        to { opacity: 1; transform: translateY(0); }
    }
</style>

<div class="visual-demo-container">
    <div class="header">
        <h1 class="title">üé¨ Visual Demo</h1>
        <p class="subtitle">
            <span>üë• Watch Marty, Doc Brown & friends join the waiting room</span>
        </p>
    </div>
    
    <div class="controls">
        <button class="btn btn-primary" @onclick="LoadAndRegisterUsers">
            üöÄ Load & Register Users
        </button>
        <button class="btn btn-primary" @onclick="SimulateHostStartingSession">
            üéØ Host: Start Session
        </button>
        <button class="btn btn-primary" @onclick="RefreshAll">
            üîÑ Refresh All
        </button>
        <button class="btn btn-primary" @onclick="ClearAll">
            üßπ Clear All
        </button>
    </div>
    
    <div class="status-display">
        @statusMessage
    </div>
    
    @if (showIframes)
    {
        <div class="grid-container @GetGridClass()">
            @for (int i = 1; i <= gridSize; i++)
            {
                var userIndex = i;
                <div class="user-frame">
                    <div class="user-header">
                        <span class="status-dot @GetStatusDotClass(userIndex)"></span>
                        <span>@GetStatusDisplayText(userIndex)</span>
                    </div>
                    <div style="padding: 15px; text-align: center;">
                        <button class="btn btn-primary" style="margin: 5px;" @onclick="() => NavigateSingleUser(userIndex)">
                            üß≠ Navigate
                        </button>
                        <button class="btn btn-primary" style="margin: 5px;" @onclick="() => AutoFillRegistration(userIndex)">
                            üìù Auto Fill
                        </button>
                        <button class="btn btn-primary" style="margin: 5px;" @onclick="() => RegisterSingleUser(userIndex)">
                            ‚úÖ Register
                        </button>
                        <button class="btn btn-primary" style="margin: 5px;" @onclick="() => SubmitRegistration(userIndex)">
                            üöÄ Submit
                        </button>
                        <button class="btn btn-primary" style="margin: 5px;" @onclick="() => SimulateWaitingRoom(userIndex)">
                            üí¨ Simulate
                        </button>
                    </div>
                    <iframe id="iframe-user-@userIndex" 
                            src="@GetIframeUrl(userIndex)" 
                            @onload="() => OnUserLoaded(userIndex)">
                    </iframe>
                </div>
            }
        </div>
    }
</div>

@code {
    private string statusMessage = "Ready to load demo users...";
    private bool showIframes = false;
    private int gridSize = 4;
    private string userToken = "";
    private SimplifiedSession? session = null;
    
    private string GetGridClass() => gridSize switch
    {
        4 => "grid-2x2",
        9 => "grid-3x3",
        16 => "grid-4x4",
        _ => "grid-2x2"
    };
    
    private string GetIframeUrl(int userIndex)
    {
        if (string.IsNullOrEmpty(userToken)) return "about:blank";
        
        var baseUrl = Navigation.BaseUri.TrimEnd('/');
        return $"{baseUrl}/user/landing/{userToken}";
    }
    
    private string GetStatusDisplayText(int userIndex)
    {
        var name = GetSuperheroName(userIndex);
        return $"{name} #{userIndex}";
    }
    
    private string GetStatusDotClass(int userIndex) => "status-connecting";
    
    // COPILOT-OPTIMIZATION: Predefined efficient country rotation (United States, India, Australia)
    private readonly string[] targetCountries = { "United States", "India", "Australia" };
    
    private string GetAssignedCountry(int userIndex)
    {
        return targetCountries[(userIndex - 1) % targetCountries.Length];
    }
    
    private string GetSuperheroName(int userIndex)
    {
        var names = new[] { "Marty McFly", "Doc Brown", "Jennifer Parker", "Biff Tannen", 
                           "George McFly", "Lorraine McFly", "Einstein", "Clara Clayton" };
        return names[(userIndex - 1) % names.Length];
    }
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("eval", @"
                // Navigate to registration page if on authentication page
                window.navigateToRegistration = function(userIndex) {
                    const iframe = document.getElementById('iframe-user-' + userIndex);
                    if (!iframe || !iframe.contentWindow) return false;
                    
                    try {
                        const doc = iframe.contentDocument || iframe.contentWindow.document;
                        if (!doc) return false;
                        
                        // Check if we're on User Authentication page
                        const authHeader = doc.querySelector('h1, h2, h3, .title, .header');
                        const pageText = doc.body ? doc.body.innerText : '';
                        
                        if (pageText.includes('User Authentication') || pageText.includes('Authentication')) {
                            console.log('üîÑ User ' + userIndex + ' is on Authentication page, looking for continue button...');
                            
                            // Look for continue/register/start buttons
                            const continueBtn = doc.querySelector('button:contains(""Continue"")') ||
                                              doc.querySelector('button:contains(""Register"")') ||
                                              doc.querySelector('button:contains(""Start"")') ||
                                              doc.querySelector('button:contains(""Join"")') ||
                                              doc.querySelector('a[href*=""register""]') ||
                                              doc.querySelector('.btn-primary') ||
                                              doc.querySelector('button:not([disabled])');
                            
                            if (continueBtn) {
                                console.log('‚úÖ Found continue button for User ' + userIndex);
                                continueBtn.click();
                                return true;
                            }
                        }
                        
                        return false;
                    } catch (e) {
                        console.log('‚ùå Navigation failed for User ' + userIndex + ':', e.message);
                        return false;
                    }
                };

                window.autoFillRegistration = function(userIndex) {
                    const iframe = document.getElementById('iframe-user-' + userIndex);
                    if (!iframe || !iframe.contentWindow) {
                        console.log('‚ùå Iframe not found for User ' + userIndex);
                        return false;
                    }
                    
                    try {
                        const doc = iframe.contentDocument || iframe.contentWindow.document;
                        if (!doc) {
                            console.log('‚ùå Cannot access iframe document for User ' + userIndex);
                            return false;
                        }
                        
                        // First check if we need to navigate from auth page
                        const pageText = doc.body ? doc.body.innerText : '';
                        if (pageText.includes('User Authentication')) {
                            console.log('üîÑ User ' + userIndex + ' needs to navigate from auth page first');
                            if (window.navigateToRegistration(userIndex)) {
                                // Wait for navigation then retry
                                setTimeout(() => window.autoFillRegistration(userIndex), 2000);
                                return true;
                            }
                        }
                        
                        // Enhanced selectors for registration form inputs
                        const nameInput = doc.querySelector('input[placeholder*=""name"" i]') || 
                                         doc.querySelector('input[name*=""name"" i]') ||
                                         doc.querySelector('input[id*=""name"" i]') ||
                                         doc.querySelector('input[type=""text""]:first-of-type');
                        
                        const emailInput = doc.querySelector('input[type=""email""]') || 
                                          doc.querySelector('input[placeholder*=""email"" i]') ||
                                          doc.querySelector('input[name*=""email"" i]');
                        
                        const countrySelect = doc.querySelector('select') ||
                                             doc.querySelector('select[name*=""country"" i]');
                        
                        let filled = false;
                        
                        if (nameInput) {
                            // Get superhero name from the parent window
                            const superheroName = window.parent.getSuperheroName ? window.parent.getSuperheroName(userIndex) : ('Test User ' + userIndex);
                            nameInput.value = superheroName;
                            nameInput.dispatchEvent(new Event('input', { bubbles: true }));
                            nameInput.dispatchEvent(new Event('change', { bubbles: true }));
                            nameInput.dispatchEvent(new Event('blur', { bubbles: true }));
                            filled = true;
                            console.log('‚úÖ Filled name for User ' + userIndex + ': ' + superheroName);
                        }
                        
                        if (emailInput) {
                            emailInput.value = 'testuser' + userIndex + '@noorcanvas.demo';
                            emailInput.dispatchEvent(new Event('input', { bubbles: true }));
                            emailInput.dispatchEvent(new Event('change', { bubbles: true }));
                            emailInput.dispatchEvent(new Event('blur', { bubbles: true }));
                            filled = true;
                            console.log('‚úÖ Filled email for User ' + userIndex);
                        }
                        
                        if (countrySelect && countrySelect.options && countrySelect.options.length > 1) {
                            // COPILOT-FIX: Direct country selection from predefined list (United States, India, Australia)
                            const targetCountries = ['United States', 'India', 'Australia'];
                            const userCountry = targetCountries[(userIndex - 1) % targetCountries.length];
                            
                            // Find the country option by text content
                            let selectedIndex = -1;
                            for (let i = 0; i < countrySelect.options.length; i++) {
                                const optionText = countrySelect.options[i].text.trim();
                                if (optionText.includes(userCountry) || userCountry.includes(optionText)) {
                                    selectedIndex = i;
                                    break;
                                }
                            }
                            
                            // Fallback to cycling through available options if exact match not found
                            if (selectedIndex === -1) {
                                selectedIndex = ((userIndex - 1) % Math.min(countrySelect.options.length - 1, 3)) + 1;
                            }
                            
                            countrySelect.selectedIndex = selectedIndex;
                            countrySelect.dispatchEvent(new Event('change', { bubbles: true }));
                            countrySelect.dispatchEvent(new Event('blur', { bubbles: true }));
                            filled = true;
                            console.log('‚úÖ COPILOT-OPTIMIZED: Selected country for User ' + userIndex + ': ' + userCountry + ' (index: ' + selectedIndex + ')');
                            
                            // COPILOT-ENHANCEMENT: Auto-trigger Join Waiting Room button after country selection
                            setTimeout(() => {
                                window.autoClickJoinWaitingRoom(userIndex);
                            }, 800); // Small delay to ensure country selection is processed
                        }
                        
                        if (filled) {
                            console.log('‚úÖ Auto-filled registration for User ' + userIndex);
                            return true;
                        } else {
                            console.log('‚ùå No fillable fields found for User ' + userIndex);
                            return false;
                        }
                        
                    } catch (e) {
                        console.log('‚ùå Auto-fill failed for User ' + userIndex + ':', e.message);
                        return false;
                    }
                };
                
                window.autoClickJoinWaitingRoom = function(userIndex) {
                    const iframe = document.getElementById('iframe-user-' + userIndex);
                    if (!iframe || !iframe.contentWindow) {
                        console.log('‚ùå Iframe not found for User ' + userIndex + ' join waiting room');
                        return false;
                    }
                    
                    try {
                        const doc = iframe.contentDocument || iframe.contentWindow.document;
                        if (!doc) {
                            console.log('‚ùå Cannot access iframe document for User ' + userIndex + ' join waiting room');
                            return false;
                        }
                        
                        // Look for Join Waiting Room button with multiple strategies
                        let joinBtn = null;
                        
                        // Strategy 1: Look for buttons with 'join' and 'waiting' text
                        const buttons = doc.querySelectorAll('button');
                        for (let btn of buttons) {
                            const text = (btn.textContent || btn.innerText || '').toLowerCase();
                            if (text.includes('join') && text.includes('waiting')) {
                                joinBtn = btn;
                                break;
                            }
                        }
                        
                        // Strategy 2: Look for buttons with just 'join' text
                        if (!joinBtn) {
                            for (let btn of buttons) {
                                const text = (btn.textContent || btn.innerText || '').toLowerCase();
                                if (text.includes('join') || text.includes('enter')) {
                                    joinBtn = btn;
                                    break;
                                }
                            }
                        }
                        
                        // Strategy 3: Look for buttons with specific classes that might be join buttons
                        if (!joinBtn) {
                            joinBtn = doc.querySelector('.btn-join') ||
                                     doc.querySelector('.join-btn') ||
                                     doc.querySelector('.waiting-room-btn') ||
                                     doc.querySelector('.btn-primary:not([disabled])') ||
                                     doc.querySelector('.btn-success:not([disabled])');
                        }
                        
                        // Strategy 4: Look for any prominent enabled button (last resort)
                        if (!joinBtn) {
                            const enabledButtons = doc.querySelectorAll('button:not([disabled])');
                            if (enabledButtons.length > 0) {
                                // Find the most likely join button (usually styled prominently)
                                for (let btn of enabledButtons) {
                                    const classList = Array.from(btn.classList);
                                    if (classList.some(cls => cls.includes('primary') || cls.includes('success') || cls.includes('main'))) {
                                        joinBtn = btn;
                                        break;
                                    }
                                }
                                // Fallback to last button if no styled button found
                                if (!joinBtn && enabledButtons.length > 0) {
                                    joinBtn = enabledButtons[enabledButtons.length - 1];
                                }
                            }
                        }
                        
                        if (joinBtn) {
                            console.log('‚úÖ Found join waiting room button for User ' + userIndex + ':', joinBtn.textContent || joinBtn.value || 'join button');
                            
                            // Trigger click with multiple event types for better compatibility
                            joinBtn.focus();
                            setTimeout(() => {
                                joinBtn.dispatchEvent(new MouseEvent('mousedown', { bubbles: true }));
                                joinBtn.dispatchEvent(new MouseEvent('mouseup', { bubbles: true }));
                                joinBtn.dispatchEvent(new MouseEvent('click', { bubbles: true }));
                                joinBtn.click();
                                console.log('üéâ Auto-clicked join waiting room for User ' + userIndex);
                            }, 100);
                            
                            return true;
                        } else {
                            console.log('‚ùå No join waiting room button found for User ' + userIndex);
                            return false;
                        }
                        
                    } catch (e) {
                        console.log('‚ùå Auto-click join waiting room failed for User ' + userIndex + ':', e.message);
                        return false;
                    }
                };
                
                window.submitRegistration = function(userIndex) {
                    const iframe = document.getElementById('iframe-user-' + userIndex);
                    if (!iframe || !iframe.contentWindow) {
                        console.log('‚ùå Iframe not found for User ' + userIndex);
                        return false;
                    }
                    
                    try {
                        const doc = iframe.contentDocument || iframe.contentWindow.document;
                        if (!doc) {
                            console.log('‚ùå Cannot access iframe document for User ' + userIndex);
                            return false;
                        }
                        
                        // Enhanced button detection with multiple strategies
                        let submitBtn = null;
                        
                        // Strategy 1: Look for specific submit buttons
                        submitBtn = doc.querySelector('button[type=""submit""]') ||
                                   doc.querySelector('input[type=""submit""]');
                        
                        // Strategy 2: Look for buttons with registration-related text
                        if (!submitBtn) {
                            const buttons = doc.querySelectorAll('button');
                            for (let btn of buttons) {
                                const text = (btn.textContent || btn.innerText || '').toLowerCase();
                                if (text.includes('register') || text.includes('submit') || text.includes('join') || text.includes('continue')) {
                                    submitBtn = btn;
                                    break;
                                }
                            }
                        }
                        
                        // Strategy 3: Look for buttons with specific classes
                        if (!submitBtn) {
                            submitBtn = doc.querySelector('.btn-primary') ||
                                       doc.querySelector('.btn-success') ||
                                       doc.querySelector('.register-btn') ||
                                       doc.querySelector('.submit-btn');
                        }
                        
                        // Strategy 4: Look for any enabled button (last resort)
                        if (!submitBtn) {
                            const buttons = doc.querySelectorAll('button:not([disabled])');
                            if (buttons.length > 0) {
                                submitBtn = buttons[buttons.length - 1]; // Usually the main action button is last
                            }
                        }
                        
                        if (submitBtn) {
                            console.log('‚úÖ Found submit button for User ' + userIndex + ':', submitBtn.textContent || submitBtn.value || 'button');
                            
                            // Trigger click with multiple event types for better compatibility
                            submitBtn.focus();
                            submitBtn.dispatchEvent(new MouseEvent('mousedown', { bubbles: true }));
                            submitBtn.dispatchEvent(new MouseEvent('mouseup', { bubbles: true }));
                            submitBtn.dispatchEvent(new MouseEvent('click', { bubbles: true }));
                            submitBtn.click();
                            
                            console.log('‚úÖ Submitted registration for User ' + userIndex);
                            return true;
                        } else {
                            console.log('‚ùå No submit button found for User ' + userIndex);
                            return false;
                        }
                        
                    } catch (e) {
                        console.log('‚ùå Submit failed for User ' + userIndex + ':', e.message);
                        return false;
                    }
                };

                window.registerUser = function(userIndex) {
                    console.log('üöÄ Starting complete registration for User ' + userIndex);
                    
                    const iframe = document.getElementById('iframe-user-' + userIndex);
                    if (!iframe || !iframe.contentWindow) {
                        console.log('‚ùå Iframe not found for User ' + userIndex);
                        return false;
                    }
                    
                    try {
                        const doc = iframe.contentDocument || iframe.contentWindow.document;
                        const pageText = doc.body ? doc.body.innerText : '';
                        
                        // If on authentication page, navigate first
                        if (pageText.includes('User Authentication')) {
                            console.log('üîÑ User ' + userIndex + ' navigating from authentication...');
                            if (window.navigateToRegistration(userIndex)) {
                                // Wait for navigation then restart registration process
                                setTimeout(() => window.registerUser(userIndex), 3000);
                                return true;
                            }
                        }
                        
                        // Try to auto-fill the form
                        const filled = window.autoFillRegistration(userIndex);
                        if (!filled) {
                            console.log('‚ùå Registration failed at auto-fill step for User ' + userIndex);
                            return false;
                        }
                        
                        // COPILOT-ENHANCEMENT: Optimized timing for auto-join waiting room flow
                        // Auto-fill triggers join waiting room after 800ms, so we wait longer before final submit
                        setTimeout(() => {
                            const submitted = window.submitRegistration(userIndex);
                            if (submitted) {
                                console.log('üéâ Complete registration successful for User ' + userIndex);
                                // Additional check for successful waiting room entry after a moment
                                setTimeout(() => {
                                    window.verifyWaitingRoomEntry(userIndex);
                                }, 2000);
                            } else {
                                console.log('‚ùå Registration failed at submit step for User ' + userIndex);
                            }
                        }, 1800); // Extended delay to allow join waiting room to complete first
                        
                        return true;
                        
                    } catch (e) {
                        console.log('‚ùå Registration failed for User ' + userIndex + ':', e.message);
                        return false;
                    }
                };
                
                window.verifyWaitingRoomEntry = function(userIndex) {
                    const iframe = document.getElementById('iframe-user-' + userIndex);
                    if (!iframe || !iframe.contentWindow) {
                        console.log('‚ùå Cannot verify waiting room entry for User ' + userIndex + ' - iframe not found');
                        return false;
                    }
                    
                    try {
                        const doc = iframe.contentDocument || iframe.contentWindow.document;
                        if (!doc) {
                            console.log('‚ùå Cannot access iframe document for User ' + userIndex + ' verification');
                            return false;
                        }
                        
                        const pageText = doc.body ? doc.body.innerText.toLowerCase() : '';
                        const title = doc.title ? doc.title.toLowerCase() : '';
                        
                        // Check for waiting room indicators
                        const waitingRoomIndicators = [
                            'waiting room',
                            'waiting for session',
                            'session lobby',
                            'participants',
                            'waiting to start',
                            'session will begin',
                            'waiting area'
                        ];
                        
                        const isInWaitingRoom = waitingRoomIndicators.some(indicator => 
                            pageText.includes(indicator) || title.includes(indicator)
                        );
                        
                        if (isInWaitingRoom) {
                            console.log('‚úÖ User ' + userIndex + ' successfully entered waiting room');
                            // Start simulating waiting room activity
                            setTimeout(() => {
                                window.simulateWaitingRoomActivity(userIndex);
                            }, 1000);
                            return true;
                        } else {
                            console.log('‚ö†Ô∏è User ' + userIndex + ' may not be in waiting room yet. Page content: ' + 
                                      pageText.substring(0, 100) + '...');
                            return false;
                        }
                        
                    } catch (e) {
                        console.log('‚ùå Waiting room verification failed for User ' + userIndex + ':', e.message);
                        return false;
                    }
                };
                
                window.simulateWaitingRoomActivity = function(userIndex) {
                    const iframe = document.getElementById('iframe-user-' + userIndex);
                    if (!iframe || !iframe.contentWindow) return false;
                    
                    try {
                        const doc = iframe.contentDocument || iframe.contentWindow.document;
                        
                        // Look for chat input
                        const chatInput = doc.querySelector('input[placeholder*=""message"" i]') ||
                                         doc.querySelector('textarea[placeholder*=""message"" i]') ||
                                         doc.querySelector('input[type=""text""]');
                        
                        if (chatInput) {
                            const messages = [
                                'Hello everyone! üëã',
                                'Ready for the session! üöÄ',
                                'This is exciting! üìö',
                                'Looking forward to learning üéì',
                                'Greetings from User ' + userIndex + '!'
                            ];
                            
                            const randomMessage = messages[Math.floor(Math.random() * messages.length)];
                            chatInput.value = randomMessage;
                            chatInput.dispatchEvent(new Event('input', { bubbles: true }));
                            
                            // Find send button
                            const sendBtn = doc.querySelector('button:contains(""Send"")') ||
                                           doc.querySelector('button[title*=""send"" i]') ||
                                           doc.querySelector('.chat-send') ||
                                           doc.querySelector('button[type=""submit""]');
                            
                            if (sendBtn) {
                                setTimeout(() => sendBtn.click(), 200);
                            }
                        }
                        
                        return true;
                    } catch (e) {
                        console.log('‚ùå Waiting room activity failed for User ' + userIndex + ':', e.message);
                        return false;
                    }
                };
                
                window.getSuperheroName = function(userIndex) {
                    const names = ['Marty McFly', 'Doc Brown', 'Jennifer Parker', 'Biff Tannen', 
                                   'George McFly', 'Lorraine McFly', 'Einstein', 'Clara Clayton'];
                    return names[(userIndex - 1) % names.length] || ('User ' + userIndex);
                };
            ");
        }
    }

    private async Task LoadAndRegisterUsers()
    {
        statusMessage = "üèóÔ∏è Setting up Visual Demo...";
        StateHasChanged();
        
        try
        {
            // Step 1: Check for existing session or create new one
            var existingSession = await DbContext.Sessions
                .Where(s => s.Status == "Active" || s.Status == "Configured")
                .OrderByDescending(s => s.CreatedAt)
                .FirstOrDefaultAsync();
            
            if (existingSession != null)
            {
                session = existingSession;
                userToken = session.UserToken;
                showIframes = true;
                statusMessage = $"‚úÖ Found existing session {session.SessionId} with token {userToken}";
                StateHasChanged();
                await Task.Delay(1000);
                
                statusMessage = $"üîÑ Loading {gridSize} user sessions with enhanced auto-join...";
            }
            else
            {
                statusMessage = "üèóÔ∏è No active session found. Creating test session automatically...";
                StateHasChanged();
                await Task.Delay(1000);
                
                // Create a new test session automatically
                session = await CreateTestSession();
                await Task.Delay(1000);
                
                if (session != null)
                {
                    userToken = session.UserToken;
                    showIframes = true;
                    statusMessage = $"‚úÖ Created session {session.SessionId} - Loading {gridSize} users with auto-join waiting room...";
                    StateHasChanged();
                    
                    await Task.Delay(1000);
                }
            }
            
            statusMessage = "üé¨ Users loaded! They will auto-fill forms and join the waiting room automatically.";
            StateHasChanged();
        }
        catch (Exception ex)
        {
            statusMessage = $"‚ùå Error: {ex.Message}";
            Console.WriteLine($"COPILOT-DEBUG: LoadAndRegisterUsers error: {ex.Message}");
        }
    }

    private async Task<SimplifiedSession> CreateTestSession()
    {
        try
        {
            statusMessage = "üöÄ Creating test session for Visual Demo...";
            StateHasChanged();
            
            // Generate unique friendly tokens
            var userToken = GenerateFriendlyToken();
            var hostToken = GenerateFriendlyToken();
            
            var session = new SimplifiedSession
            {
                // Title removed - fetch from KSESSIONS_DEV.dbo.Sessions.SessionName via SessionId
                // Description removed - fetch from KSESSIONS_DEV.dbo.Sessions.Description via SessionId
                Status = "Active",
                UserToken = userToken,
                HostToken = hostToken,
                CreatedAt = DateTime.UtcNow,
                ExpiresAt = DateTime.UtcNow.AddHours(2), // 2-hour expiration
                ParticipantCount = 0,
                MaxParticipants = 50
            };

            DbContext.Sessions.Add(session);
            await DbContext.SaveChangesAsync();
            
            Console.WriteLine($"COPILOT-DEBUG: Created test session {session.SessionId} with UserToken: {userToken}, HostToken: {hostToken}");
            statusMessage = $"‚úÖ Created test session {session.SessionId} with auto-join enhancement";
            StateHasChanged();
            
            return session;
        }
        catch (Exception ex)
        {
            statusMessage = $"‚ùå Error creating test session: {ex.Message}";
            Console.WriteLine($"COPILOT-DEBUG: CreateTestSession error: {ex.Message}");
            StateHasChanged();
            throw;
        }
    }

    private string GenerateFriendlyToken()
    {
        const string chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";
        var random = new Random();
        return new string(Enumerable.Repeat(chars, 8)
            .Select(s => s[random.Next(s.Length)]).ToArray());
    }

    // Working implementation methods
    private async Task SimulateHostStartingSession() 
    { 
        statusMessage = "üéØ Host starting session...";
        StateHasChanged();
        // Implementation for host starting session
        await Task.Delay(1000);
        statusMessage = "‚úÖ Host session simulation complete";
        StateHasChanged();
    }
    
    private async Task RefreshAll() 
    { 
        statusMessage = "üîÑ Refreshing all user sessions...";
        StateHasChanged();
        
        // Reload all iframes
        await JSRuntime.InvokeVoidAsync("eval", @"
            for (let i = 1; i <= " + gridSize + @"; i++) {
                const iframe = document.getElementById('iframe-user-' + i);
                if (iframe) {
                    iframe.src = iframe.src; // Force reload
                }
            }
        ");
        
        await Task.Delay(2000);
        statusMessage = "‚úÖ All sessions refreshed";
        StateHasChanged();
    }
    
    private async Task ClearAll() 
    { 
        statusMessage = "üßπ Clearing all user sessions...";
        showIframes = false;
        StateHasChanged();
        await Task.Delay(500);
        statusMessage = "‚úÖ All sessions cleared";
        StateHasChanged();
    }
    
    private async Task NavigateSingleUser(int userIndex) 
    { 
        statusMessage = $"üß≠ Navigating User {userIndex}...";
        StateHasChanged();
        
        await JSRuntime.InvokeVoidAsync("eval", $@"
            if (window.navigateToRegistration) {{
                const success = window.navigateToRegistration({userIndex});
                console.log('Navigation result for User {userIndex}:', success);
            }}
        ");
        
        statusMessage = $"‚úÖ User {userIndex} navigation triggered";
        StateHasChanged();
    }
    
    private async Task AutoFillRegistration(int userIndex) 
    { 
        statusMessage = $"üìù Auto-filling registration for User {userIndex}...";
        StateHasChanged();
        
        await JSRuntime.InvokeVoidAsync("eval", $@"
            if (window.autoFillRegistration) {{
                const success = window.autoFillRegistration({userIndex});
                console.log('Auto-fill result for User {userIndex}:', success);
            }}
        ");
        
        statusMessage = $"‚úÖ User {userIndex} auto-fill triggered";
        StateHasChanged();
    }
    
    private async Task RegisterSingleUser(int userIndex)
    {
        statusMessage = $"üë§ Registering User {userIndex}...";
        StateHasChanged();
        
        // First auto-fill, then submit
        await JSRuntime.InvokeVoidAsync("eval", $@"
            if (window.autoFillRegistration) {{
                window.autoFillRegistration({userIndex});
                setTimeout(() => {{
                    if (window.submitRegistration) {{
                        window.submitRegistration({userIndex});
                    }}
                }}, 1500);
            }}
        ");
        
        statusMessage = $"‚úÖ User {userIndex} registration process triggered";
        StateHasChanged();
    }
    
    private async Task SubmitRegistration(int userIndex)
    {
        statusMessage = $"üöÄ Submitting registration for User {userIndex}...";
        StateHasChanged();
        
        await JSRuntime.InvokeVoidAsync("eval", $@"
            if (window.submitRegistration) {{
                const success = window.submitRegistration({userIndex});
                console.log('Submit result for User {userIndex}:', success);
            }}
        ");
        
        statusMessage = $"‚úÖ User {userIndex} registration submitted";
        StateHasChanged();
    }
    
    private async Task SimulateWaitingRoom(int userIndex)
    {
        statusMessage = $"üí¨ Simulating waiting room activity for User {userIndex}...";
        StateHasChanged();
        
        await JSRuntime.InvokeVoidAsync("eval", $@"
            if (window.simulateWaitingRoomActivity) {{
                const success = window.simulateWaitingRoomActivity({userIndex});
                console.log('Waiting room simulation result for User {userIndex}:', success);
            }}
        ");
        
        statusMessage = $"‚úÖ User {userIndex} waiting room simulation triggered";
        StateHasChanged();
    }
    
    private async Task OnUserLoaded(int userIndex)
    {
        // Called when iframe loads - could add initialization logic here
        Console.WriteLine($"User {userIndex} iframe loaded");
    }

}