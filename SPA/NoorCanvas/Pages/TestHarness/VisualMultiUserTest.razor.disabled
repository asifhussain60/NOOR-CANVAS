@page "/visual-test"
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.EntityFrameworkCore
@using NoorCanvas.Models.Simplified
@using NoorCanvas.Data
@using NoorCanvas.Services
@using System.Text.Json
@inject SimplifiedCanvasDbContext DbContext
@inject SimplifiedTokenService TokenService
@inject IJSRuntime JSRuntime
@inject ILogger<VisualMultiUserTest> Logger

<!-- Custom CSS for Visual Test -->
<style>
    .visual-test-container {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        min-height: 100vh;
        padding: 20px;
        font-family: 'Inter', sans-serif;
    }

    .test-header {
        background: rgba(255, 255, 255, 0.95);
        backdrop-filter: blur(10px);
        border-radius: 16px;
        padding: 24px;
        margin-bottom: 24px;
        box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
        border: 1px solid rgba(255, 255, 255, 0.2);
    }

    .grid-container {
        display: grid;
        gap: 16px;
        margin-bottom: 24px;
    }

    .grid-2x2 { grid-template-columns: repeat(2, 1fr); }
    .grid-3x3 { grid-template-columns: repeat(3, 1fr); }
    .grid-4x4 { grid-template-columns: repeat(4, 1fr); }
    .grid-5x5 { grid-template-columns: repeat(5, 1fr); }

    .user-iframe-container {
        position: relative;
        background: white;
        border-radius: 12px;
        overflow: hidden;
        box-shadow: 0 4px 16px rgba(0, 0, 0, 0.1);
        border: 2px solid transparent;
        transition: all 0.3s ease;
    }

    .user-iframe-container.active {
        border-color: #3B82F6;
        transform: scale(1.02);
        box-shadow: 0 8px 25px rgba(59, 130, 246, 0.3);
    }

    .iframe-header {
        background: linear-gradient(90deg, #3B82F6, #8B5CF6);
        color: white;
        padding: 8px 12px;
        font-size: 12px;
        font-weight: 600;
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    .iframe-status {
        display: flex;
        align-items: center;
        gap: 6px;
    }

    .status-dot {
        width: 8px;
        height: 8px;
        border-radius: 50%;
        background: #10B981;
        animation: pulse 2s infinite;
    }

    .status-dot.loading { background: #F59E0B; }
    .status-dot.error { background: #EF4444; }

    @keyframes pulse {
        0%, 100% { opacity: 1; }
        50% { opacity: 0.5; }
    }

    .user-iframe {
        width: 100%;
        height: 400px;
        border: none;
        display: block;
    }

    .controls-panel {
        background: rgba(255, 255, 255, 0.95);
        backdrop-filter: blur(10px);
        border-radius: 16px;
        padding: 24px;
        box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
        border: 1px solid rgba(255, 255, 255, 0.2);
    }

    .control-group {
        display: flex;
        gap: 12px;
        margin-bottom: 16px;
        align-items: center;
        flex-wrap: wrap;
    }

    .btn {
        padding: 10px 20px;
        border: none;
        border-radius: 8px;
        font-weight: 600;
        cursor: pointer;
        transition: all 0.2s ease;
        display: flex;
        align-items: center;
        gap: 8px;
        font-size: 14px;
    }

    .btn-primary {
        background: linear-gradient(45deg, #3B82F6, #8B5CF6);
        color: white;
    }

    .btn-primary:hover {
        transform: translateY(-2px);
        box-shadow: 0 4px 12px rgba(59, 130, 246, 0.4);
    }

    .btn-secondary {
        background: linear-gradient(45deg, #6B7280, #9CA3AF);
        color: white;
    }

    .btn-success {
        background: linear-gradient(45deg, #10B981, #059669);
        color: white;
    }

    .btn-danger {
        background: linear-gradient(45deg, #EF4444, #DC2626);
        color: white;
    }

    .metrics-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
        gap: 16px;
        margin-top: 20px;
    }

    .metric-card {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
        padding: 16px;
        border-radius: 12px;
        text-align: center;
    }

    .metric-value {
        font-size: 24px;
        font-weight: bold;
        margin-bottom: 4px;
    }

    .metric-label {
        font-size: 12px;
        opacity: 0.9;
    }

    .log-container {
        background: #1a1a1a;
        color: #00ff00;
        padding: 16px;
        border-radius: 12px;
        font-family: 'Courier New', monospace;
        font-size: 12px;
        height: 200px;
        overflow-y: auto;
        margin-top: 16px;
    }

    .grid-selector {
        display: flex;
        gap: 8px;
        margin-right: 16px;
    }

    .grid-btn {
        padding: 8px 12px;
        border: 2px solid #3B82F6;
        background: transparent;
        color: #3B82F6;
        border-radius: 6px;
        font-weight: 600;
        cursor: pointer;
        transition: all 0.2s ease;
    }

    .grid-btn.active {
        background: #3B82F6;
        color: white;
    }

    .loading-overlay {
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: rgba(255, 255, 255, 0.9);
        display: flex;
        align-items: center;
        justify-content: center;
        z-index: 10;
    }

    .spinner {
        width: 32px;
        height: 32px;
        border: 3px solid #f3f4f6;
        border-top: 3px solid #3B82F6;
        border-radius: 50%;
        animation: spin 1s linear infinite;
    }

    @keyframes spin {
        0% { transform: rotate(0deg); }
        100% { transform: rotate(360deg); }
    }
</style>

<div class="visual-test-container">
    <!-- Header -->
    <div class="test-header">
        <div style="display: flex; align-items: center; gap: 16px; margin-bottom: 16px;">
            <img src="/images/branding/NC-Header.png" alt="NOOR Canvas" style="height: 48px;" />
            <div>
                <h1 style="margin: 0; color: #1f2937; font-size: 28px; font-weight: bold;">
                    <i class="fas fa-users"></i> Visual Multi-User Test Harness
                </h1>
                <p style="margin: 4px 0 0 0; color: #6b7280;">
                    Real-time visual testing with multiple user sessions • Session @(currentSession?.SessionId ?? 0)
                </p>
            </div>
        </div>

        <!-- Controls -->
        <div class="control-group">
            <div class="grid-selector">
                <button class="grid-btn @(gridSize == 4 ? "active" : "")" @onclick="() => SetGridSize(4)">2×2</button>
                <button class="grid-btn @(gridSize == 9 ? "active" : "")" @onclick="() => SetGridSize(9)">3×3</button>
                <button class="grid-btn @(gridSize == 16 ? "active" : "")" @onclick="() => SetGridSize(16)">4×4</button>
                <button class="grid-btn @(gridSize == 25 ? "active" : "")" @onclick="() => SetGridSize(25)">5×5</button>
            </div>

            <button class="btn btn-primary" @onclick="InitializeSession" disabled="@isLoading">
                <i class="fas fa-rocket"></i> Initialize Session
            </button>

            <button class="btn btn-success" @onclick="LoadAllUsers" disabled="@(isLoading || currentSession == null)">
                <i class="fas fa-play"></i> Load All Users (@gridSize)
            </button>

            <button class="btn btn-secondary" @onclick="SimulateUserActivity" disabled="@(isLoading || !usersLoaded)">
                <i class="fas fa-mouse-pointer"></i> Simulate Activity
            </button>

            <button class="btn btn-danger" @onclick="ClearAllUsers">
                <i class="fas fa-stop"></i> Clear All
            </button>
        </div>

        <!-- Metrics -->
        <div class="metrics-grid">
            <div class="metric-card">
                <div class="metric-value">@loadedUsers</div>
                <div class="metric-label">Active Users</div>
            </div>
            <div class="metric-card">
                <div class="metric-value">@totalConnections</div>
                <div class="metric-label">Total Connections</div>
            </div>
            <div class="metric-card">
                <div class="metric-value">@averageLoadTime ms</div>
                <div class="metric-label">Avg Load Time</div>
            </div>
            <div class="metric-card">
                <div class="metric-value">@(currentSession?.ParticipantCount ?? 0)</div>
                <div class="metric-label">Registered Participants</div>
            </div>
        </div>
    </div>

    <!-- User Grid -->
    <div class="grid-container @GetGridClass()">
        @for (int i = 0; i < gridSize; i++)
        {
            var userIndex = i;
            <div class="user-iframe-container @(userStates.ContainsKey(userIndex) && userStates[userIndex].IsActive ? "active" : "")" 
                 id="user-container-@userIndex">
                
                <div class="iframe-header">
                    <span>
                        <i class="fas fa-user"></i> 
                        User @(userIndex + 1)
                        @if (userStates.ContainsKey(userIndex))
                        {
                            <text> - @userStates[userIndex].ParticipantName</text>
                        }
                    </span>
                    <div class="iframe-status">
                        <div class="status-dot @GetUserStatusClass(userIndex)"></div>
                        <span>@GetUserStatus(userIndex)</span>
                    </div>
                </div>

                @if (userStates.ContainsKey(userIndex) && userStates[userIndex].IsLoading)
                {
                    <div class="loading-overlay">
                        <div class="spinner"></div>
                    </div>
                }

                @if (userStates.ContainsKey(userIndex) && !string.IsNullOrEmpty(userStates[userIndex].IframeUrl))
                {
                    <iframe class="user-iframe" 
                            src="@userStates[userIndex].IframeUrl" 
                            id="iframe-@userIndex"
                            @onload="() => OnIframeLoaded(userIndex)">
                    </iframe>
                }
                else
                {
                    <div style="height: 400px; display: flex; align-items: center; justify-content: center; color: #9ca3af;">
                        <div style="text-align: center;">
                            <i class="fas fa-user-plus" style="font-size: 48px; margin-bottom: 16px;"></i>
                            <div>Click "Load All Users" to start</div>
                        </div>
                    </div>
                }
            </div>
        }
    </div>

    <!-- Controls Panel -->
    <div class="controls-panel">
        <h3 style="margin: 0 0 16px 0; color: #1f2937;">
            <i class="fas fa-cogs"></i> Advanced Controls & Monitoring
        </h3>

        <div class="control-group">
            <button class="btn btn-primary" @onclick="RefreshMetrics">
                <i class="fas fa-sync-alt"></i> Refresh Metrics
            </button>

            <button class="btn btn-secondary" @onclick="ExportLogs">
                <i class="fas fa-download"></i> Export Logs
            </button>

            <label style="color: #4b5563; font-weight: 600;">
                Activity Interval:
                <select @bind="activityInterval" style="margin-left: 8px; padding: 4px 8px; border-radius: 4px; border: 1px solid #d1d5db;">
                    <option value="1000">1 second</option>
                    <option value="2000">2 seconds</option>
                    <option value="5000">5 seconds</option>
                    <option value="10000">10 seconds</option>
                </select>
            </label>

            <label style="color: #4b5563; font-weight: 600;">
                <input type="checkbox" @bind="autoRefresh" style="margin-right: 8px;" />
                Auto-refresh metrics
            </label>
        </div>

        <!-- Real-time Log -->
        <div class="log-container" id="log-container">
            @foreach (var log in logMessages.TakeLast(50).Reverse())
            {
                <div>[@log.Timestamp.ToString("HH:mm:ss.fff")] @log.Message</div>
            }
        </div>
    </div>
</div>

@code {
    // State Management
    private Session? currentSession;
    private Dictionary<int, UserState> userStates = new();
    private List<LogMessage> logMessages = new();
    private bool isLoading = false;
    private bool usersLoaded = false;
    private bool autoRefresh = true;
    private int activityInterval = 2000;
    
    // Grid Configuration
    private int gridSize = 9; // Default 3x3
    
    // Metrics
    private int loadedUsers = 0;
    private int totalConnections = 0;
    private long averageLoadTime = 0;
    private List<long> loadTimes = new();
    
    // Timers
    private Timer? metricsTimer;
    private Timer? activityTimer;
    private bool hasRendered = false;

    public class UserState
    {
        public string ParticipantName { get; set; } = "";
        public string IframeUrl { get; set; } = "";
        public bool IsLoading { get; set; }
        public bool IsActive { get; set; }
        public DateTime LoadStartTime { get; set; }
        public string Status { get; set; } = "Ready";
    }

    public class LogMessage
    {
        public DateTime Timestamp { get; set; } = DateTime.Now;
        public string Message { get; set; } = "";
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            hasRendered = true;
            
            if (autoRefresh)
            {
                metricsTimer = new Timer(async _ => await InvokeAsync(RefreshMetrics), null, 0, 5000);
            }
            
            await LogMessage("Visual Multi-User Test Harness initialized");
            StateHasChanged();
        }
    }

    private async Task InitializeSession()
    {
        if (!hasRendered) return;
        
        isLoading = true;
        await LogMessage("🚀 Initializing new test session...");
        
        try
        {
            // Create or find an existing session
            var existingSession = await DbContext.Sessions
                .Where(s => s.Status == "Configured" || s.Status == "Active")
                .OrderByDescending(s => s.CreatedAt)
                .FirstOrDefaultAsync();

            if (existingSession != null)
            {
                currentSession = existingSession;
                await LogMessage($"📋 Using existing session {currentSession.SessionId}");
            }
            else
            {
                // Generate tokens for new session
                var hostToken = Guid.NewGuid().ToString("N")[..8].ToUpperInvariant();
                var userToken = Guid.NewGuid().ToString("N")[..8].ToUpperInvariant();
                
                currentSession = new Session
                {
                    Title = $"Visual Test Session - {DateTime.Now:HH:mm:ss}",
                    Description = "Multi-user visual testing session with iframe simulation",
                    HostToken = hostToken,
                    UserToken = userToken,
                    MaxParticipants = gridSize,
                    Status = "Configured",
                    CreatedAt = DateTime.UtcNow,
                    ExpiresAt = DateTime.UtcNow.AddHours(2)
                };

                DbContext.Sessions.Add(currentSession);
                await DbContext.SaveChangesAsync();
                await LogMessage($"✅ Created new session {currentSession.SessionId}");
            }

            // Generate participants for the session
            await GenerateTestParticipants();
            
            await LogMessage($"🎯 Session ready with {gridSize} participant slots");
        }
        catch (Exception ex)
        {
            await LogMessage($"❌ Error initializing session: {ex.Message}");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task GenerateTestParticipants()
    {
        if (currentSession == null) return;

        // Clear existing participants for this session
        var existingParticipants = await DbContext.Participants
            .Where(p => p.UserToken == currentSession.UserToken)
            .ToListAsync();
        
        if (existingParticipants.Any())
        {
            DbContext.Participants.RemoveRange(existingParticipants);
            await LogMessage($"🗑️ Removed {existingParticipants.Count} existing participants");
        }

        // Generate new participants
        var participants = new List<Participant>();
        for (int i = 0; i < gridSize; i++)
        {
            var participant = new Participant
            {
                Name = $"TestUser{i + 1:D2}",
                Email = $"testuser{i + 1}@noorcanvas.test",
                City = GetRandomCity(),
                Country = "Test Country",
                SessionId = currentSession.SessionId,
                UserToken = currentSession.UserToken,
                UserGuid = Guid.NewGuid().ToString(),
                JoinedAt = DateTime.UtcNow,
                LastSeenAt = DateTime.UtcNow
            };
            participants.Add(participant);
        }

        await DbContext.Participants.AddRangeAsync(participants);
        await DbContext.SaveChangesAsync();
        
        await LogMessage($"👥 Generated {participants.Count} test participants");
    }

    private async Task LoadAllUsers()
    {
        if (currentSession == null || !hasRendered) return;

        isLoading = true;
        usersLoaded = false;
        loadedUsers = 0;
        loadTimes.Clear();
        
        await LogMessage($"🔄 Loading {gridSize} user sessions...");

        try
        {
            var participants = await DbContext.Participants
                .Where(p => p.UserToken == currentSession.UserToken)
                .ToListAsync();

            for (int i = 0; i < gridSize && i < participants.Count; i++)
            {
                var participant = participants[i];
                var userState = new UserState
                {
                    ParticipantName = participant.Name,
                    IsLoading = true,
                    LoadStartTime = DateTime.Now,
                    Status = "Loading",
                    IframeUrl = $"https://localhost:9091/user/landing/{currentSession.UserToken}?userId={participant.UserGuid}"
                };

                userStates[i] = userState;
                await LogMessage($"🔗 Loading {participant.Name} in iframe {i + 1}");
                
                // Small delay to prevent overwhelming the server
                await Task.Delay(200);
                StateHasChanged();
            }

            usersLoaded = true;
            totalConnections = gridSize;
            
            // Start activity simulation timer
            if (activityTimer != null)
            {
                activityTimer.Dispose();
            }
            activityTimer = new Timer(async _ => await InvokeAsync(SimulateUserActivity), null, 5000, activityInterval);
            
            await LogMessage($"✅ All {gridSize} users loaded successfully");
        }
        catch (Exception ex)
        {
            await LogMessage($"❌ Error loading users: {ex.Message}");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task OnIframeLoaded(int userIndex)
    {
        if (!hasRendered || !userStates.ContainsKey(userIndex)) return;

        var userState = userStates[userIndex];
        var loadTime = (DateTime.Now - userState.LoadStartTime).TotalMilliseconds;
        
        userState.IsLoading = false;
        userState.IsActive = true;
        userState.Status = "Connected";
        
        loadTimes.Add((long)loadTime);
        loadedUsers++;
        
        if (loadTimes.Any())
        {
            averageLoadTime = (long)loadTimes.Average();
        }

        await LogMessage($"✅ {userState.ParticipantName} connected in {loadTime:F0}ms");
        StateHasChanged();
    }

    private async Task SimulateUserActivity()
    {
        if (!hasRendered || !usersLoaded) return;

        try
        {
            var activeUsers = userStates.Where(kvp => kvp.Value.IsActive).ToList();
            if (!activeUsers.Any()) return;

            var randomUser = activeUsers[Random.Shared.Next(activeUsers.Count)];
            var activities = new[] { "cursor movement", "annotation", "scroll", "zoom", "selection" };
            var activity = activities[Random.Shared.Next(activities.Length)];

            randomUser.Value.Status = $"Simulating {activity}";
            
            // Simulate interaction via JavaScript
            if (hasRendered)
            {
                try
                {
                    await JSRuntime.InvokeVoidAsync("simulateUserInteraction", randomUser.Key, activity);
                }
                catch
                {
                    // Ignore JS interop errors during simulation
                }
            }

            await LogMessage($"🎯 {randomUser.Value.ParticipantName}: {activity}");
            
            // Reset status after activity
            await Task.Delay(1000);
            if (userStates.ContainsKey(randomUser.Key))
            {
                userStates[randomUser.Key].Status = "Active";
            }
            
            StateHasChanged();
        }
        catch (Exception ex)
        {
            await LogMessage($"⚠️ Activity simulation error: {ex.Message}");
        }
    }

    private async Task ClearAllUsers()
    {
        userStates.Clear();
        loadedUsers = 0;
        usersLoaded = false;
        totalConnections = 0;
        loadTimes.Clear();
        averageLoadTime = 0;
        
        activityTimer?.Dispose();
        
        await LogMessage("🧹 All users cleared");
        StateHasChanged();
    }

    private void SetGridSize(int size)
    {
        gridSize = size;
        ClearAllUsers();
    }

    private string GetGridClass()
    {
        return gridSize switch
        {
            4 => "grid-2x2",
            9 => "grid-3x3",
            16 => "grid-4x4",
            25 => "grid-5x5",
            _ => "grid-3x3"
        };
    }

    private string GetUserStatus(int userIndex)
    {
        return userStates.ContainsKey(userIndex) ? userStates[userIndex].Status : "Ready";
    }

    private string GetUserStatusClass(int userIndex)
    {
        if (!userStates.ContainsKey(userIndex)) return "";
        
        return userStates[userIndex].Status switch
        {
            "Loading" => "loading",
            "Connected" or "Active" => "",
            _ => "error"
        };
    }

    private async Task RefreshMetrics()
    {
        if (currentSession == null) return;

        try
        {
            var participantCount = await DbContext.Participants
                .CountAsync(p => p.UserToken == currentSession.UserToken);
            
            currentSession.ParticipantCount = participantCount;
            StateHasChanged();
        }
        catch (Exception ex)
        {
            await LogMessage($"⚠️ Metrics refresh error: {ex.Message}");
        }
    }

    private async Task ExportLogs()
    {
        if (!hasRendered) return;

        try
        {
            var logsJson = JsonSerializer.Serialize(logMessages, new JsonSerializerOptions { WriteIndented = true });
            await JSRuntime.InvokeVoidAsync("downloadFile", "visual-test-logs.json", logsJson);
            await LogMessage("📁 Logs exported successfully");
        }
        catch (Exception ex)
        {
            await LogMessage($"❌ Export error: {ex.Message}");
        }
    }

    private async Task LogMessage(string message)
    {
        logMessages.Add(new LogMessage { Message = message });
        Logger.LogInformation("VisualMultiUserTest: {Message}", message);
        
        if (hasRendered)
        {
            StateHasChanged();
            try
            {
                await JSRuntime.InvokeVoidAsync("scrollLogToBottom");
            }
            catch
            {
                // Ignore JS interop errors
            }
        }
    }

    private static string GetRandomCity()
    {
        var cities = new[] { "New York", "London", "Tokyo", "Paris", "Berlin", "Sydney", "Toronto", "Dubai" };
        return cities[Random.Shared.Next(cities.Length)];
    }

    public void Dispose()
    {
        metricsTimer?.Dispose();
        activityTimer?.Dispose();
    }
}