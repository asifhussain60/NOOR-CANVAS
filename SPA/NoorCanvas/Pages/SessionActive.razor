@page "/session/{sessionId}/active"
@using Microsoft.AspNetCore.SignalR.Client
@using Microsoft.JSInterop
@inject IJSRuntime JSRuntime
@inject NavigationManager Navigation
@inject ILogger<SessionActive> Logger
@inject DialogService DialogService
@inject HttpClient Http
@implements IAsyncDisposable

<div class="session-container">
    <div class="session-header">
        <div class="container-fluid">
            <div class="row align-items-center">
                <div class="col-md-8">
                    <h4 class="session-title">
                        <i class="fas fa-broadcast-tower text-success me-2"></i>
                        @(sessionState?.SessionData?.Title ?? "Live Session")
                    </h4>
                    <small class="text-muted">
                        Session ID: @SessionId | Participants: @(sessionState?.Participants?.Count ?? 0)
                    </small>
                </div>
                <div class="col-md-4 text-end">
                    <div class="session-controls">
                        <span class="badge bg-success me-2">
                            <i class="fas fa-circle me-1"></i>Live
                        </span>
                        <button class="btn btn-outline-danger btn-sm" @onclick="LeaveSession">
                            <i class="fas fa-sign-out-alt"></i> Leave
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="session-content">
        @if (isLoading)
        {
            <div class="text-center py-5">
                <div class="spinner-border text-primary" role="status">
                    <span class="visually-hidden">Loading session...</span>
                </div>
                <p class="mt-3">Loading session content...</p>
            </div>
        }
        else if (sessionState != null)
        {
            <div class="row h-100">
                <!-- Main Content Area -->
                <div class="col-md-9">
                    <div class="content-area">
                        <div class="canvas-container">
                            <canvas id="annotationCanvas" width="800" height="600"></canvas>
                            <div class="canvas-overlay">
                                @if (currentSharedAsset != null)
                                {
                                    <div class="shared-asset">
                                        <h6>Currently Viewing:</h6>
                                        <p>@currentSharedAsset.Title</p>
                                    </div>
                                }
                                else
                                {
                                    <div class="no-content">
                                        <i class="fas fa-eye fa-3x text-muted mb-3"></i>
                                        <h5>Waiting for Host</h5>
                                        <p class="text-muted">The host will share content shortly...</p>
                                    </div>
                                }
                            </div>
                        </div>

                        <!-- Annotation Tools -->
                        <div class="annotation-tools">
                            <div class="tool-group">
                                <button class="tool-btn @(selectedTool == "pen" ? "active" : "")" @onclick="@(() => SelectTool("pen"))">
                                    <i class="fas fa-pen"></i>
                                </button>
                                <button class="tool-btn @(selectedTool == "highlighter" ? "active" : "")" @onclick="@(() => SelectTool("highlighter"))">
                                    <i class="fas fa-highlighter"></i>
                                </button>
                                <button class="tool-btn @(selectedTool == "eraser" ? "active" : "")" @onclick="@(() => SelectTool("eraser"))">
                                    <i class="fas fa-eraser"></i>
                                </button>
                            </div>
                            <div class="tool-group">
                                <button class="tool-btn" @onclick="ClearAnnotations">
                                    <i class="fas fa-trash"></i>
                                </button>
                                <button class="tool-btn" @onclick="UndoAnnotation">
                                    <i class="fas fa-undo"></i>
                                </button>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Sidebar -->
                <div class="col-md-3">
                    <div class="sidebar">
                        <!-- Connection Status -->
                        <div class="status-panel mb-3">
                            <h6><i class="fas fa-wifi me-2"></i>Connection</h6>
                            <div class="d-flex align-items-center">
                                <div class="status-indicator @GetConnectionStatusClass()"></div>
                                <span class="ms-2">@connectionStatus</span>
                            </div>
                        </div>

                        <!-- Participants List -->
                        <div class="participants-panel mb-3">
                            <h6><i class="fas fa-users me-2"></i>Participants (@(sessionState.Participants?.Count ?? 0))</h6>
                            <div class="participants-list">
                                @if (sessionState.Participants?.Any() == true)
                                {
                                    @foreach (var participant in sessionState.Participants)
                                    {
                                        <div class="participant-item">
                                            <div class="d-flex align-items-center">
                                                <div class="participant-avatar">
                                                    <i class="fas fa-user"></i>
                                                </div>
                                                <div class="participant-info">
                                                    <strong>@participant.DisplayName</strong>
                                                    @if (participant.UserId == CurrentUserId)
                                                    {
                                                        <span class="badge bg-primary ms-1">You</span>
                                                    }
                                                </div>
                                            </div>
                                        </div>
                                    }
                                }
                                else
                                {
                                    <div class="text-muted">
                                        <small>No participants yet</small>
                                    </div>
                                }
                            </div>
                        </div>

                        <!-- Session Info -->
                        <div class="session-info-panel">
                            <h6><i class="fas fa-info-circle me-2"></i>Session Info</h6>
                            <div class="info-items">
                                <div class="info-item">
                                    <small class="text-muted">Started</small>
                                    <div>@(sessionState.StartedAt?.ToString("HH:mm") ?? "Unknown")</div>
                                </div>
                                <div class="info-item">
                                    <small class="text-muted">Duration</small>
                                    <div>@GetSessionDuration()</div>
                                </div>
                                <div class="info-item">
                                    <small class="text-muted">Annotations</small>
                                    <div>@(sessionState.Annotations?.Count ?? 0)</div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        }
        else
        {
            <div class="error-state text-center py-5">
                <i class="fas fa-exclamation-triangle fa-3x text-warning mb-3"></i>
                <h4>Session Unavailable</h4>
                <p class="text-muted">This session is no longer available or has ended.</p>
                <button class="btn btn-primary" @onclick="GoHome">
                    <i class="fas fa-home"></i> Return to Home
                </button>
            </div>
        }
    </div>
</div>

@code {
    [Parameter] public string SessionId { get; set; } = string.Empty;
    [SupplyParameterFromQuery] public string? UserId { get; set; }

    private HubConnection? hubConnection;
    private SessionStateData? sessionState;
    private SharedAsset? currentSharedAsset;
    private bool isLoading = true;
    private string connectionStatus = "Connecting...";
    private string selectedTool = "pen";
    private string CurrentUserId => UserId ?? "";

    protected override async Task OnInitializedAsync()
    {
        Logger.LogInformation("NOOR-INFO: Active session loading for session: {SessionId}", SessionId);

        try
        {
            // Load session state
            await LoadSessionState();

            // Initialize SignalR connection
            await InitializeSignalRConnection();

            // Initialize annotation canvas
            await InitializeAnnotationCanvas();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "NOOR-ERROR: Failed to initialize active session");
            await DialogService.ShowErrorAsync("Failed to load session. Please try again.", "Session Error");
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task LoadSessionState()
    {
        try
        {
            var response = await Http.GetAsync($"/api/sessions/{SessionId}/state");
            if (response.IsSuccessStatusCode)
            {
                sessionState = await response.Content.ReadFromJsonAsync<SessionStateData>();
                
                // Check if session has ended
                if (sessionState?.Status == "Completed")
                {
                    await DialogService.ShowSuccessAsync("This session has ended.", "Session Ended");
                    Navigation.NavigateTo("/");
                    return;
                }

                // Check if session hasn't started yet
                if (sessionState?.Status != "Active")
                {
                    Logger.LogInformation("NOOR-INFO: Session not active, redirecting to waiting room");
                    Navigation.NavigateTo($"/session/{SessionId}/waiting?userId={CurrentUserId}");
                    return;
                }
            }
            else
            {
                Logger.LogWarning("NOOR-WARNING: Failed to load session state");
                sessionState = null;
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "NOOR-ERROR: Failed to load session state");
        }
    }

    private async Task InitializeSignalRConnection()
    {
        try
        {
            hubConnection = new HubConnectionBuilder()
                .WithUrl(Navigation.ToAbsoluteUri("/hub/session"))
                .WithAutomaticReconnect()
                .Build();

            // Listen for SessionEnded event
            hubConnection.On<object>("SessionEnded", async (sessionEnded) =>
            {
                Logger.LogInformation("NOOR-INFO: SessionEnded event received");
                await InvokeAsync(async () =>
                {
                    await DialogService.ShowSuccessAsync("The session has ended.", "Session Ended");
                    Navigation.NavigateTo("/");
                });
            });

            // Listen for asset sharing events
            hubConnection.On<object>("AssetShared", async (assetData) =>
            {
                Logger.LogInformation("NOOR-INFO: Asset shared event received");
                await InvokeAsync(() =>
                {
                    // Handle shared asset display
                    StateHasChanged();
                });
            });

            // Connect to annotation hub for real-time drawing
            var annotationHubConnection = new HubConnectionBuilder()
                .WithUrl(Navigation.ToAbsoluteUri("/hub/annotation"))
                .WithAutomaticReconnect()
                .Build();

            // Listen for annotation events
            annotationHubConnection.On<object>("AnnotationCreated", async (annotation) =>
            {
                Logger.LogDebug("NOOR-DEBUG: Annotation created event received");
                await InvokeAsync(async () =>
                {
                    await RenderAnnotation(annotation);
                });
            });

            await hubConnection.StartAsync();
            
            // Join the session group
            if (long.TryParse(SessionId, out long sessionIdLong))
            {
                await hubConnection.InvokeAsync("JoinSession", sessionIdLong, "participant");
            }

            connectionStatus = "Connected";
            Logger.LogInformation("NOOR-SUCCESS: SignalR connections established");
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "NOOR-ERROR: Failed to connect to SignalR hub");
            connectionStatus = "Connection Failed";
        }
    }

    private async Task InitializeAnnotationCanvas()
    {
        try
        {
            await JSRuntime.InvokeVoidAsync("initializeAnnotationCanvas", "annotationCanvas");
            Logger.LogInformation("NOOR-SUCCESS: Annotation canvas initialized");
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "NOOR-ERROR: Failed to initialize annotation canvas");
        }
    }

    private async Task RenderAnnotation(object annotation)
    {
        try
        {
            await JSRuntime.InvokeVoidAsync("renderAnnotation", annotation);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "NOOR-ERROR: Failed to render annotation");
        }
    }

    private void SelectTool(string tool)
    {
        selectedTool = tool;
        // Update canvas tool via JavaScript
        Task.Run(async () =>
        {
            try
            {
                await JSRuntime.InvokeVoidAsync("setCanvasTool", tool);
            }
            catch (Exception ex)
            {
                Logger.LogError(ex, "NOOR-ERROR: Failed to set canvas tool");
            }
        });
    }

    private async Task ClearAnnotations()
    {
        if (hubConnection != null && long.TryParse(SessionId, out long sessionIdLong))
        {
            try
            {
                await hubConnection.InvokeAsync("BroadcastClearAnnotations", sessionIdLong, CurrentUserId);
            }
            catch (Exception ex)
            {
                Logger.LogError(ex, "NOOR-ERROR: Failed to clear annotations");
            }
        }
    }

    private async Task UndoAnnotation()
    {
        try
        {
            await JSRuntime.InvokeVoidAsync("undoLastAnnotation");
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "NOOR-ERROR: Failed to undo annotation");
        }
    }

    private async Task LeaveSession()
    {
        var confirmed = await DialogService.ShowConfirmAsync("Are you sure you want to leave this session?", "Leave Session");
        if (confirmed)
        {
            if (hubConnection != null && long.TryParse(SessionId, out long sessionIdLong))
            {
                try
                {
                    await hubConnection.InvokeAsync("LeaveSession", sessionIdLong);
                }
                catch (Exception ex)
                {
                    Logger.LogError(ex, "NOOR-ERROR: Failed to leave session via SignalR");
                }
            }
            Navigation.NavigateTo("/");
        }
    }

    private void GoHome()
    {
        Navigation.NavigateTo("/");
    }

    private string GetConnectionStatusClass()
    {
        return connectionStatus switch
        {
            "Connected" => "bg-success",
            "Connection Failed" => "bg-danger",
            _ => "bg-warning"
        };
    }

    private string GetSessionDuration()
    {
        if (sessionState?.StartedAt != null)
        {
            var duration = DateTime.UtcNow - sessionState.StartedAt.Value;
            return $"{duration.Hours:D2}:{duration.Minutes:D2}:{duration.Seconds:D2}";
        }
        return "00:00:00";
    }

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }

    // Models
    public class SessionStateData
    {
        public long SessionId { get; set; }
        public string Status { get; set; } = string.Empty;
        public DateTime? StartedAt { get; set; }
        public List<ParticipantInfo>? Participants { get; set; }
        public List<AnnotationInfo>? Annotations { get; set; }
        public SessionDataInfo? SessionData { get; set; }
    }

    public class ParticipantInfo
    {
        public string UserId { get; set; } = string.Empty;
        public string DisplayName { get; set; } = string.Empty;
        public DateTime? JoinedAt { get; set; }
    }

    public class AnnotationInfo
    {
        public long AnnotationId { get; set; }
        public string CreatedBy { get; set; } = string.Empty;
        public DateTime CreatedAt { get; set; }
        public object? AnnotationData { get; set; }
    }

    public class SessionDataInfo
    {
        public string Title { get; set; } = string.Empty;
        public string Description { get; set; } = string.Empty;
    }

    public class SharedAsset
    {
        public string Title { get; set; } = string.Empty;
        public string Type { get; set; } = string.Empty;
        public object? Data { get; set; }
    }
}

<style>
.session-container {
    height: 100vh;
    display: flex;
    flex-direction: column;
}

.session-header {
    background: #fff;
    border-bottom: 1px solid #dee2e6;
    padding: 15px 0;
    flex-shrink: 0;
}

.session-title {
    margin: 0;
    color: #2c3e50;
}

.session-content {
    flex: 1;
    overflow: hidden;
    background: #f8f9fa;
}

.content-area {
    height: 100%;
    padding: 20px;
    display: flex;
    flex-direction: column;
}

.canvas-container {
    flex: 1;
    position: relative;
    background: #fff;
    border-radius: 8px;
    box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    overflow: hidden;
}

.canvas-overlay {
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    display: flex;
    align-items: center;
    justify-content: center;
    pointer-events: none;
}

.no-content {
    text-align: center;
}

.annotation-tools {
    margin-top: 15px;
    display: flex;
    gap: 15px;
    align-items: center;
}

.tool-group {
    display: flex;
    gap: 5px;
}

.tool-btn {
    width: 40px;
    height: 40px;
    border: 1px solid #dee2e6;
    background: #fff;
    border-radius: 4px;
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    transition: all 0.2s;
}

.tool-btn:hover {
    background: #f8f9fa;
    border-color: #007bff;
}

.tool-btn.active {
    background: #007bff;
    color: #fff;
    border-color: #007bff;
}

.sidebar {
    height: 100%;
    padding: 20px;
    background: #fff;
    border-left: 1px solid #dee2e6;
}

.status-indicator {
    width: 12px;
    height: 12px;
    border-radius: 50%;
}

.participants-panel, .session-info-panel, .status-panel {
    background: #f8f9fa;
    border-radius: 8px;
    padding: 15px;
}

.participant-item {
    padding: 10px;
    border-radius: 6px;
    margin-bottom: 8px;
    background: #fff;
}

.participant-avatar {
    width: 32px;
    height: 32px;
    background: #007bff;
    color: white;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    margin-right: 10px;
}

.info-item {
    margin-bottom: 10px;
}

.error-state {
    height: 50vh;
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
}

#annotationCanvas {
    width: 100%;
    height: 100%;
    cursor: crosshair;
}
</style>

<script>
window.initializeAnnotationCanvas = (canvasId) => {
    const canvas = document.getElementById(canvasId);
    if (!canvas) return;

    const ctx = canvas.getContext('2d');
    let isDrawing = false;
    let currentTool = 'pen';
    
    // Set up canvas drawing
    canvas.addEventListener('mousedown', startDrawing);
    canvas.addEventListener('mousemove', draw);
    canvas.addEventListener('mouseup', stopDrawing);
    canvas.addEventListener('mouseout', stopDrawing);

    function startDrawing(e) {
        isDrawing = true;
        draw(e);
    }

    function draw(e) {
        if (!isDrawing) return;

        const rect = canvas.getBoundingClientRect();
        const x = e.clientX - rect.left;
        const y = e.clientY - rect.top;

        ctx.lineWidth = currentTool === 'pen' ? 2 : 8;
        ctx.lineCap = 'round';
        
        if (currentTool === 'eraser') {
            ctx.globalCompositeOperation = 'destination-out';
        } else {
            ctx.globalCompositeOperation = 'source-over';
            ctx.strokeStyle = currentTool === 'highlighter' ? 'rgba(255, 255, 0, 0.4)' : '#000';
        }

        ctx.lineTo(x, y);
        ctx.stroke();
        ctx.beginPath();
        ctx.moveTo(x, y);
    }

    function stopDrawing() {
        if (!isDrawing) return;
        isDrawing = false;
        ctx.beginPath();
    }

    window.canvasContext = ctx;
};

window.setCanvasTool = (tool) => {
    window.currentTool = tool;
};

window.renderAnnotation = (annotation) => {
    // Render annotation received from other participants
    console.log('Rendering annotation:', annotation);
};

window.undoLastAnnotation = () => {
    // Implement undo functionality
    console.log('Undo last annotation');
};
</script>
