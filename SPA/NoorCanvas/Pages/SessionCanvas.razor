@page "/session/canvas/{sessionToken?}"
@layout EmptyLayout
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.AspNetCore.SignalR.Client
@using System.ComponentModel.DataAnnotations
@using System.Net.Http.Json
@using System.Text.Json.Serialization
@using System.Text.Json
@using NoorCanvas.Services

@inject IHttpClientFactory HttpClientFactory
@inject IJSRuntime JSRuntime
@inject NavigationManager Navigation
@inject LoadingService LoadingService
@inject ILogger<SessionCanvas> Logger
@inject NoorCanvas.Services.SimplifiedTokenService TokenService
@inject NoorCanvas.Services.SessionStateService SessionStateService
@inject NoorCanvas.Services.HtmlParsingService HtmlParsingService

<PageTitle>Noor Canvas</PageTitle>

<HeadContent>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Playfair+Display:wght@400;700;900&family=Cinzel+Decorative:wght@400;700&family=Inter:wght@400;500;600&family=Poppins:wght@400;600;700&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <link rel="stylesheet" href="~/css/session-transcript.css">
    <script src="~/js/html-renderer.js"></script>
</HeadContent>

<style>
    .poppins { font-family: 'Poppins', sans-serif; }
    .inter { font-family: 'Inter', sans-serif; }
    .shadow-golden { box-shadow: 0 4px 14px 0 rgba(212, 175, 55, 0.4); }
    .canvas-tab-button.active { border-bottom-color: #D4AF37; color: #006400; }
    .canvas-custom-scrollbar::-webkit-scrollbar { width: 6px; }
    .canvas-custom-scrollbar::-webkit-scrollbar-track { background: #f1f1f1; border-radius: 10px; }
    .canvas-custom-scrollbar::-webkit-scrollbar-thumb { background: #D4AF37; border-radius: 10px; }
    .canvas-custom-scrollbar::-webkit-scrollbar-thumb:hover { background: #C5B358; }
    .canvas-animate-pulse-subtle { animation: pulse 2s cubic-bezier(0.4, 0, 0.6, 1) infinite; }
    @@keyframes pulse {
        0%, 100% { opacity: 1; }
        50% { opacity: .8; }
    }
    .canvas-main-grid { display: grid; grid-template-columns: 2fr 1fr; gap: 1.5rem; }
    @@media (max-width: 1024px) {
        .canvas-main-grid { grid-template-columns: 1fr; }
    }
    
    .session-canvas-root {
        background-color: #F8F5F1;
        display: flex;
        align-items: center;
        justify-content: center;
        min-height: 100vh;
        padding: 1.5rem;
        font-family: 'Inter', sans-serif;
    }

    .session-canvas-container {
        width: 95%;
        max-width: 85rem;
        background-color: #FFFFFF;
        border-radius: 1.5rem;
        padding: 2rem;
        box-shadow: 0 25px 50px -12px rgba(0,0,0,0.25);
        border: 1px solid #E5E7EB;
    }

    /* Error State Styles */
    .canvas-error-container {
        width: 100%;
        max-width: 56rem;
        margin: 0 auto;
        background-color: white;
        border-radius: 1.5rem;
        padding: 2rem;
        text-align: center;
        box-shadow: 0 25px 50px -12px rgba(0,0,0,0.25);
        border: 1px solid #fecaca;
    }

    .canvas-error-logo {
        display: flex;
        justify-content: center;
        margin-bottom: 1.5rem;
    }

    .canvas-error-logo-img {
        width: 200px;
        height: 200px;
        object-fit: contain;
    }

    .canvas-error-icon-container {
        display: flex;
        align-items: center;
        justify-content: center;
        gap: 1rem;
        margin-bottom: 1.5rem;
    }

    .canvas-error-icon {
        font-size: 2rem;
        color: #DC2626;
    }

    .canvas-error-message {
        font-family: 'Inter', sans-serif;
        font-size: 1.125rem;
        color: #706357;
        margin: 0 0 1.5rem 0;
    }

    .canvas-error-buttons {
        display: flex;
        flex-direction: column;
        gap: 0.75rem;
    }

    .canvas-home-button {
        font-family: 'Inter', sans-serif;
        font-size: 1rem;
        font-weight: 600;
        color: white;
        background-color: #3B82F6;
        padding: 0.75rem 1.5rem;
        border-radius: 0.5rem;
        border: none;
        cursor: pointer;
        transition: background-color 0.2s;
    }

    .canvas-home-button:hover {
        background-color: #2563EB;
    }

    .canvas-home-button-icon {
        margin-right: 0.5rem;
    }

    /* Session Content Styles */
    .canvas-content-wrapper {
        width: 100%;
        max-width: 80rem;
        margin: 0 auto;
    }

    .canvas-header {
        background-color: white;
        border-radius: 1rem;
        padding: 10px;
        margin-bottom: 0.75rem;
        box-shadow: 0 10px 15px -3px rgba(0,0,0,0.1);
        border: 2px solid #D4AF37;
    }

    .canvas-header-content {
        display: flex;
        align-items: center;
        justify-content: space-between;
        gap: 1rem;
    }

    .canvas-header-logo {
        flex-shrink: 0;
    }

    .canvas-header-logo-img {
        width: 120px;
        height: 50px;
        object-fit: contain;
    }

    .canvas-header-session-info {
        flex: 1;
        text-align: center;
    }

    .canvas-session-title {
        font-family: 'Poppins', sans-serif;
        font-weight: 700;
        font-size: 2.5rem;
        color: #816611;
        margin: 0;
    }

    .canvas-session-description {
        font-family: 'Inter', sans-serif;
        font-size: 1rem;
        color: #6B7280;
        margin: 0.25rem 0 0 0;
    }

    .canvas-signalr-status {
        flex-shrink: 0;
        display: flex;
        flex-direction: column;
        align-items: flex-end;
        gap: 0.5rem;
    }

    .canvas-signalr-indicator {
        display: flex;
        align-items: center;
        justify-content: center;
        width: 48px;
        height: 48px;
        border: 2px solid;
        border-radius: 50%;
        box-shadow: 0 4px 6px rgba(0,0,0,0.1);
    }

    .canvas-signalr-icon {
        font-size: 1.25rem;
    }

    .canvas-retry-button {
        font-family: 'Inter', sans-serif;
        font-size: 0.75rem;
        font-weight: 600;
        color: white;
        background-color: #EF4444;
        padding: 0.375rem 0.75rem;
        border-radius: 0.375rem;
        border: none;
        cursor: pointer;
        transition: background-color 0.2s;
    }

    .canvas-retry-button:hover {
        background-color: #DC2626;
    }

    /* Welcome Panel Styles */
    .canvas-welcome-panel {
        background-color: #ffffff;
        border-radius: 1.5rem;
        padding: 1.5rem 2rem;
        margin: 1rem auto;
        max-width: 50rem;
        text-align: center;
    }

    .canvas-welcome-content {
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .canvas-welcome-text {
        font-family: 'Poppins', sans-serif;
        font-size: 1.25rem;
        font-weight: 600;
        color: #006400;
    }

    /* Main Grid Layout */
    .canvas-main-grid {
        display: grid;
        grid-template-columns: 1fr 300px;
        gap: 1.5rem;
        height: calc(75vh - 150px);
    }

    /* Canvas Area Styles */
    .canvas-area-container {
        background-color: white;
        border-radius: 1rem;
        padding: 1rem;
        box-shadow: 0 10px 15px -3px rgba(0,0,0,0.1);
        border: 2px solid #D4AF37;
        display: flex;
        flex-direction: column;
        height: 100%;
    }

    .canvas-content-area {
        flex: 1;
        border: 1px solid #D4AF37;
        padding: 1rem;
        border-radius: 1rem;
        background-color: #F9FAFB;
        box-shadow: inset 0 2px 4px rgba(0,0,0,0.1);
        transition: all 0.2s;
        display: flex;
        align-items: center;
        justify-content: center;
        text-align: center;
        margin: 10px;
        height: calc(100% - 20px);
    }

    .canvas-asset-content {
        width: 100%;
        height: 100%;
        overflow-y: auto;
    }

    .canvas-empty-message {
        font-family: 'Inter', sans-serif;
        color: #9CA3AF;
        font-size: 1.125rem;
    }

    /* Question Panel Styles */
    .canvas-question-panel {
        background-color: #FDFBEB;
        border-radius: 0.75rem;
        transition: all 0.3s;
        overflow: hidden;
        border: 1px solid #D4AF37;
        margin-top: auto;
        margin: 10px;
    }

    .canvas-question-header {
        display: flex;
        align-items: center;
        justify-content: center;
        gap: 0.5rem;
        padding: 0.5rem;
    }

    .canvas-question-icon {
        color: #D4AF37;
        font-size: 1rem;
    }

    .canvas-question-title {
        font-family: 'Poppins', sans-serif;
        font-weight: 600;
        font-size: 0.875rem;
        color: #4B3C2B;
        margin: 0;
    }

    .canvas-question-form {
        display: flex;
        align-items: stretch;
        gap: 0.75rem;
        padding: 0 0.75rem 0.75rem 0.75rem;
    }

    /* Sidebar Styles */
    .canvas-sidebar {
        background-color: white;
        border-radius: 0.75rem;
        padding: 1rem;
        box-shadow: 0 10px 15px -3px rgba(0,0,0,0.1);
        border: 2px solid #D4AF37;
        display: flex;
        flex-direction: column;
        height: 100%;
    }

    .canvas-tabs {
        display: flex;
        margin-bottom: 1rem;
        border-bottom: 2px solid #E5E7EB;
        background-color: #F8F5F1;
        border-radius: 0.75rem 0.75rem 0 0;
    }

    .canvas-tab-button {
        flex: 1;
        padding: 0.75rem 1rem;
        text-align: center;
        color: #4B3C2B;
        font-family: 'Poppins', sans-serif;
        font-weight: 600;
        border-bottom: 3px solid transparent;
        transition: all 0.2s;
        cursor: pointer;
        background: transparent;
        border: none;
    }

    .canvas-tab-button-left {
        border-radius: 0.75rem 0 0 0;
    }

    .canvas-tab-button-right {
        border-radius: 0 0.75rem 0 0;
    }

    .canvas-tab-button.active {
        background: #FFFFFF;
        border-bottom-color: #D4AF37;
        color: #006400;
        box-shadow: 0 -2px 8px rgba(0,0,0,0.1);
    }

    .canvas-tab-icon {
        margin-right: 0.5rem;
        font-size: 1rem;
    }

    .canvas-tab-content {
        flex: 1;
        overflow-y: auto;
    }

    .canvas-tab-content.hidden {
        display: none;
    }

    .canvas-tab-padding {
        padding-right: 0.75rem;
    }

    .canvas-section-title {
        font-family: 'Inter', sans-serif;
        font-weight: 600;
        font-size: 0.875rem;
        color: #4B3C2B;
        margin: 0 0 1rem 0;
    }

    .canvas-questions-container {
        display: flex;
        flex-direction: column;
        gap: 0.75rem;
    }

    .canvas-participants-container {
        display: flex;
        flex-direction: column;
        gap: 0.5rem;
    }

    .canvas-empty-state {
        font-family: 'Inter', sans-serif;
        font-size: 0.875rem;
        color: #9CA3AF;
        text-align: center;
        padding: 1rem 0;
        font-style: italic;
    }

    /* Modal Styles */
    .canvas-modal-overlay {
        position: fixed;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background-color: rgba(0,0,0,0.5);
        display: flex;
        align-items: center;
        justify-content: center;
        z-index: 50;
    }

    .canvas-modal-content {
        background-color: white;
        padding: 2rem;
        border-radius: 1rem;
        box-shadow: 0 25px 50px -12px rgba(0,0,0,0.25);
        max-width: 24rem;
        width: 100%;
        text-align: center;
        transform: scale(0.95);
        transition: all 0.2s;
    }

    .canvas-modal-title {
        font-family: 'Poppins', sans-serif;
        font-size: 1.25rem;
        font-weight: 700;
        color: #4B3C2B;
        margin: 0 0 1rem 0;
    }

    .canvas-modal-message {
        font-family: 'Inter', sans-serif;
        font-size: 0.875rem;
        color: #6B7280;
        margin: 0 0 1.5rem 0;
    }

    .canvas-modal-buttons {
        display: flex;
        justify-content: space-around;
        gap: 1rem;
    }

    .canvas-modal-button {
        flex: 1;
        padding: 0.5rem 1rem;
        border-radius: 0.75rem;
        font-weight: 600;
        border: none;
        cursor: pointer;
        transition: background-color 0.2s;
        font-family: 'Inter', sans-serif;
    }

    .canvas-modal-button-delete {
        color: white;
        background-color: #8B0000;
    }

    .canvas-modal-button-cancel {
        color: #4B3C2B;
        background-color: #E5E7EB;
    }

    /* Form Elements */
    .canvas-form-textarea {
        flex: 5;
        padding: 0.75rem;
        border-radius: 0.5rem;
        border: 1px solid #D4AF37;
        outline: none;
        font-family: 'Inter', sans-serif;
        color: #4B3C2B;
        background-color: white;
        resize: none;
    }

    .canvas-form-submit-button {
        flex: 1;
        min-width: 80px;
        padding: 0.5rem;
        border-radius: 0.5rem;
        color: white;
        font-weight: 600;
        transition: all 0.2s;
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        gap: 0.25rem;
        border: 1px solid #D4AF37;
        cursor: pointer;
    }

    .canvas-form-submit-icon {
        font-size: 1.25rem;
        color: white;
    }

    .canvas-form-submit-text {
        font-size: 1rem;
        color: white;
    }

    /* Question Items */
    .canvas-question-item {
        display: flex;
        align-items: flex-start;
        padding: 0.75rem;
        border-radius: 0.75rem;
        border: 1px solid;
        color: #4B3C2B;
        transition: all 0.2s;
    }

    .canvas-question-vote-section {
        display: flex;
        flex-direction: column;
        align-items: center;
        gap: 0.25rem;
        margin-right: 0.75rem;
    }

    .canvas-question-vote-button {
        font-size: 1.125rem;
        transition: color 0.2s;
        cursor: pointer;
        background: none;
        border: none;
        padding: 0;
    }

    .canvas-question-vote-count {
        background-color: #C5B358;
        color: #4B3C2B;
        border-radius: 9999px;
        padding: 0.125rem 0.5rem;
        font-size: 0.75rem;
        font-weight: 700;
    }

    .canvas-question-content {
        flex: 1;
        display: flex;
        flex-direction: column;
        justify-content: center;
    }

    .canvas-question-header {
        display: flex;
        align-items: center;
        justify-content: space-between;
    }

    .canvas-question-text {
        font-family: 'Inter', sans-serif;
        font-size: 0.875rem;
        width: 100%;
        line-height: 1.3;
    }

    .canvas-question-actions {
        display: flex;
        align-items: center;
        gap: 0.5rem;
    }

    .canvas-question-edit-button {
        font-size: 0.75rem;
        color: #6B7280;
        cursor: pointer;
        transition: color 0.2s;
    }

    .canvas-question-delete-button {
        font-size: 0.75rem;
        color: #DC2626;
        cursor: pointer;
        transition: color 0.2s;
    }

    .canvas-question-owner-label {
        font-family: 'Inter', sans-serif;
        font-size: 0.75rem;
        font-weight: 600;
        color: #006400;
        margin-top: 0.25rem;
    }

    /* Participant Items */
    .canvas-participant-item {
        display: flex;
        align-items: center;
        gap: 0.75rem;
        padding: 0.75rem;
        border-radius: 0.75rem;
        background-color: white;
        transition: background-color 0.2s;
        border: 1px solid #E5E7EB;
    }

    .canvas-participant-flag {
        height: 16px;
        width: auto;
        border-radius: 0.125rem;
        border: 1px solid #D1D5DB;
    }

    .canvas-participant-flag-fallback {
        width: 24px;
        height: 16px;
        background-color: #4B3C2B;
        border-radius: 0.125rem;
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .canvas-participant-flag-text {
        color: #FBF9F6;
        font-size: 0.625rem;
        font-weight: 600;
    }

    .canvas-participant-name {
        font-family: 'Inter', sans-serif;
        font-size: 0.875rem;
        font-weight: 500;
        color: #4B3C2B;
    }

    /* Utility Classes */
    .canvas-content-timestamp {
        margin-bottom: 10px;
        font-size: 12px;
        color: #666;
        border-bottom: 1px solid #ddd;
        padding-bottom: 5px;
    }

    .canvas-retry-icon {
        margin-right: 0.5rem;
    }

    /* Empty State Styles */
    .canvas-empty-state-container {
        text-align: center;
        color: #9CA3AF;
        font-family: 'Inter', sans-serif;
        font-size: 0.875rem;
        padding: 2rem 0;
    }

    .canvas-empty-state-icon {
        font-size: 2rem;
        margin-bottom: 0.5rem;
        display: block;
    }
</style>

<!-- Root container matching SessionWaiting.razor structure -->
<div class="session-canvas-root">
    
    <!-- Main content container -->
    <div class="session-canvas-container">

        @* Loading state is now handled by the global LoadingService via EnhancedSpinner *@
        @if (Model?.CurrentState == SessionCanvasState.SessionNotFound)
    {
        <!-- Error State -->
        <div class="canvas-error-container">
            
            <!-- Logo -->
            <div class="canvas-error-logo">
                <img src="/images/branding/NC-Header.png?v=@DateTime.Now.Ticks" 
                     alt="@(Model?.LogoText ?? "NOOR Canvas")" 
                     class="canvas-error-logo-img" />
            </div>
            
            <div class="canvas-error-icon-container">
                <i class="fa-solid fa-triangle-exclamation canvas-error-icon"></i>
            </div>
            <p data-testid="error-message" class="canvas-error-message">@(Model?.ErrorMessage ?? "Session could not be loaded. Please check your session token.")</p>
            <div class="canvas-error-buttons">
                <button @onclick="NavigateHome" class="canvas-home-button">
                    <i class="fa-solid fa-home canvas-home-button-icon"></i>
                    Return Home
                </button>
            </div>
        </div>
    }
    else if (Model?.CurrentState == SessionCanvasState.Loaded)
    {
        <!-- Session Canvas Content -->
        <div class="canvas-content-wrapper">
            
            <!-- Header -->
            <div class="canvas-header">
                <div class="canvas-header-content">
                    
                    <!-- Logo -->
                    <div class="canvas-header-logo">
                        <img src="/images/branding/NC-Header.png?v=@DateTime.Now.Ticks" 
                             alt="@(Model?.LogoText ?? "NOOR Canvas")" 
                             class="canvas-header-logo-img" />
                    </div>
                    
                    <!-- Session Info -->
                    <div class="canvas-header-session-info">
                        <h1 class="canvas-session-title">@(Model?.SessionName ?? "Session Canvas")</h1>
                        @if (!string.IsNullOrEmpty(Model?.SessionDescription))
                        {
                            <p class="canvas-session-description">@Model.SessionDescription</p>
                        }
                    </div>
                    
                    <!-- SignalR Connection Status -->
                    <div class="canvas-signalr-status">
                        <div class="canvas-signalr-indicator" style="background-color:@GetSignalRStatusBackgroundColor();border-color:@GetSignalRStatusBorderColor();">
                            <i class="@GetSignalRStatusIcon() canvas-signalr-icon" style="color:@GetSignalRStatusColor();"></i>
                        </div>
                        
                        @if (hubConnection?.State == HubConnectionState.Disconnected)
                        {
                            <button @onclick="RetrySignalRConnection" class="canvas-retry-button">
                                <i class="fa-solid fa-arrow-rotate-right canvas-retry-icon"></i>
                                Retry Connection
                            </button>
                        }
                    </div>

                </div>
            </div>
            
            <!-- Welcome Message Panel -->
            <div class="canvas-welcome-panel">
                <div class="canvas-welcome-content">
                    <span class="canvas-welcome-text">
                        @if (!string.IsNullOrEmpty(Model?.CurrentParticipantName))
                        {
                            @($"{Model.CurrentParticipantName}, Welcome To The Session")
                        }
                        else
                        {
                            @("Welcome To The Session")
                        }
                    </span>
                </div>
            </div>
            
            <!-- Main Canvas Area -->
            <div class="canvas-main-grid">
                
                <!-- Canvas Content Area -->
                <div class="canvas-area-container">
                    
                    <!-- Canvas Content Area -->
                    <div class="canvas-content-area">
                        @if (!string.IsNullOrEmpty(Model?.SharedAssetContent))
                        {
                            <div class="canvas-asset-content" data-islamic-content>
                                <div class="canvas-content-timestamp">
                                    Content received via SignalR at @DateTime.Now.ToString("HH:mm:ss")
                                </div>
                                @((MarkupString)GetSafeHtmlContent(Model.SharedAssetContent))
                            </div>
                        }
                        else
                        {
                            <p class="canvas-empty-message canvas-animate-pulse-subtle">Content from the session will appear here.</p>
                        }
                    </div>

                    <!-- Ask a Question Panel -->
                    <div class="canvas-question-panel">
                        <div class="canvas-question-header">
                            <i class="fa-solid fa-hand-raised canvas-question-icon"></i>
                            <h4 class="canvas-question-title">Ask a question</h4>
                        </div>
                        <div class="canvas-question-form">
                            <textarea @bind="QuestionInput" 
                                      class="canvas-form-textarea" 
                                      placeholder="Ask a question..." rows="2"></textarea>
                            <button @onclick="SubmitQuestion" 
                                    type="button"
                                    class="canvas-form-submit-button shadow-golden"
                                    style="@(EditingQuestionIndex != null ? "background-color:#006400;" : "background-color:#D4AF37;")">
                                <i class="fa-solid fa-paper-plane canvas-form-submit-icon"></i>
                                <span class="canvas-form-submit-text">@(EditingQuestionIndex != null ? "Update" : "Submit")</span>
                            </button>
        </div>
                    </div>
                </div>
                
                <!-- Q&A and Participants Sidebar -->
                <div class="canvas-sidebar">
                    
                    <!-- Tabs -->
                    <div class="canvas-tabs">
                        <button @onclick="() => ActiveTab = Tab.QA" 
                                class="canvas-tab-button canvas-tab-button-left @(ActiveTab == Tab.QA ? "active" : "")"
                                style="background:@(ActiveTab == Tab.QA ? "#FFFFFF" : "transparent");@(ActiveTab == Tab.QA ? "border-bottom-color:#D4AF37;color:#006400;box-shadow:0 -2px 8px rgba(0,0,0,0.1);" : "")">
                            <i class="fa-solid fa-question-circle canvas-tab-icon"></i>
                            Q&A
                        </button>
                        <button @onclick="() => ActiveTab = Tab.Participants" 
                                class="canvas-tab-button canvas-tab-button-right @(ActiveTab == Tab.Participants ? "active" : "")"
                                style="background:@(ActiveTab == Tab.Participants ? "#FFFFFF" : "transparent");@(ActiveTab == Tab.Participants ? "border-bottom-color:#D4AF37;color:#006400;box-shadow:0 -2px 8px rgba(0,0,0,0.1);" : "")">
                            <i class="fa-solid fa-users canvas-tab-icon"></i>
                            Participants
                        </button>
                    </div>

                    <!-- Q&A Content -->
                    <div class="canvas-tab-content canvas-custom-scrollbar @(ActiveTab == Tab.QA ? "" : "hidden")">
                        <div class="canvas-tab-padding">
                            <h3 class="canvas-section-title">Recent Questions</h3>
                            <div class="canvas-questions-container">
                                @if (Model?.Questions?.Any() == true)
                                {
                                    @foreach (var question in Model.Questions)
                                    {
                                        var index = Model.Questions.IndexOf(question);
                                        var bgColor = question.IsMyQuestion ? "#E6F3EA" : "#FBF9F6";
                                        var upvoteColor = question.IsMyQuestion ? "#006400" : "#D4AF37";
                                        var borderColor = question.IsMyQuestion ? "#006400" : "#D4AF37";

                                        <div class="canvas-question-item" style="border-color:@borderColor;background-color:@bgColor;">
                                            <div class="canvas-question-vote-section">
                                                <button @onclick="() => VoteQuestion(question.QuestionId)" 
                                                        class="canvas-question-vote-button"
                                                        style="color:@upvoteColor;">
                                                    <i class="fa-solid fa-arrow-up"></i>
                                                </button>
                                                <span class="canvas-question-vote-count">@question.Votes</span>
                                            </div>
                                            <div class="canvas-question-content">
                                                <div class="canvas-question-header">
                                                    <span class="canvas-question-text">@question.Text</span>
                                                    @if (question.IsMyQuestion)
                                                    {
                                                        <div class="canvas-question-actions">
                                                            <i @onclick="() => EditQuestion(index)" class="fa-solid fa-pen canvas-question-edit-button"></i>
                                                            <i @onclick="() => ShowDeleteModal(index)" class="fa-solid fa-trash-can canvas-question-delete-button"></i>
                                                        </div>
                                                    }
                                                </div>
                                                @if (question.IsMyQuestion)
                                                {
                                                    <span class="canvas-question-owner-label">Your Question</span>
                                                }
                                            </div>
                                        </div>
                                    }
                                }
                                else
                                {
                                    <div class="canvas-empty-state-container">
                                        <i class="fa-solid fa-question-circle canvas-empty-state-icon"></i>
                                        No questions yet. Be the first to ask!
                                    </div>
                                }
                            </div>
                        </div>
                    </div>

                    <!-- Participants Content -->
                    <div class="canvas-tab-content canvas-custom-scrollbar @(ActiveTab == Tab.Participants ? "" : "hidden")">
                        <h3 class="canvas-section-title">All Participants</h3>
                        <div class="canvas-participants-container">
                            @if (Model?.Participants?.Any() == true)
                            {
                                @foreach (var participant in Model.Participants)
                                {
                                    <div class="canvas-participant-item">
                                        @if (!string.IsNullOrEmpty(participant.Flag))
                                        {
                                            <img src="@($"https://flagcdn.com/w20/{participant.Flag}.png")" alt="@($"{participant.Country} Flag")" class="canvas-participant-flag">
                                        }
                                        else
                                        {
                                            <div class="canvas-participant-flag-fallback">
                                                <span class="canvas-participant-flag-text">@(participant.Country?.ToUpper() ?? "US")</span>
                                            </div>
                                        }
                                        <span class="canvas-participant-name">@participant.Name</span>
                                    </div>
                                }
                            }
                            else
                            {
                                <div class="canvas-empty-state-container">
                                    <i class="fa-solid fa-users canvas-empty-state-icon"></i>
                                    No participants yet
                                </div>
                            }
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }
    </div>
</div>



<!-- Confirmation Modal -->
@if (IsModalVisible)
{
    <div class="canvas-modal-overlay">
        <div class="canvas-modal-content">
            <h4 class="canvas-modal-title">Confirm Deletion</h4>
            <p class="canvas-modal-message">Are you sure you want to delete this question? This action cannot be undone.</p>
            <div class="canvas-modal-buttons">
                <button @onclick="DeleteConfirmed" class="canvas-modal-button canvas-modal-button-delete">
                    Delete
                </button>
                <button @onclick="CancelDelete" class="canvas-modal-button canvas-modal-button-cancel">
                    Cancel
                </button>
            </div>
        </div>
    </div>
}

@implements IAsyncDisposable

@code {
    [Parameter] public string? SessionToken { get; set; }
    
    private SessionCanvasViewModel? Model { get; set; }
    private long? _sessionId;
    private HubConnection? hubConnection;
    private HttpClient? Http;
    private string CurrentUserGuid { get; set; } = string.Empty;



    // UI State
    private string QuestionInput { get; set; } = string.Empty;
    private int? EditingQuestionIndex { get; set; }
    private int? QuestionToDeleteIndex { get; set; }
    private bool IsModalVisible { get; set; } = false;

    private enum Tab { QA, Participants }
    private Tab ActiveTab { get; set; } = Tab.QA;

    protected override async Task OnInitializedAsync()
    {
        var requestId = Guid.NewGuid().ToString("N")[..8];
        Logger.LogInformation("COPILOT-DEBUG: [{RequestId}] SessionCanvas OnInitialized - SessionToken: '{SessionToken}' (Length: {Length})", 
            requestId, SessionToken ?? "null", SessionToken?.Length ?? 0);
        Logger.LogInformation("[DEBUG-WORKITEM:canvas:UI] [{RequestId}] SessionCanvas component initializing with proper NOOR Canvas branding", requestId);

        // Initialize HttpClient with proper base address
        Http = HttpClientFactory.CreateClient("default");

        // Show elegant loading spinner during initialization
        LoadingService.Show("Loading Session Canvas", "Preparing your interactive session");

        Model = new SessionCanvasViewModel
        {
            LogoText = "NOOR Canvas",
            CurrentState = SessionCanvasState.Loaded, // Skip Loading state - use service-based loading
            SessionName = "NOOR Canvas Session",
            SessionDate = "Today",
            StartTime = DateTime.Now.ToString("HH:mm"),
            Topic = "Session Content",
            ParticipantCount = 0,
            Participants = new List<ParticipantData>(),
            Questions = new List<QuestionData>(),
            Duration = TimeSpan.Zero,
            SharedAssetContent = null
        };

        Logger.LogInformation("[DEBUG-WORKITEM:canvas:UI] [{RequestId}] SessionCanvas ViewModel initialized, starting session data load", requestId);
        Logger.LogInformation("[DEBUG-WORKITEM:canvas:UI] [{RequestId}] CSS fixes applied - justify-content:space-between for proper DOM parsing", requestId);
        Logger.LogInformation("[DEBUG-WORKITEM:hostcanvas:CANVAS] [{RequestId}] Loading session data first, then initializing SignalR", requestId);
        
        // API-BASED APPROACH: UserGuid will be retrieved from API during participant loading
        // This eliminates storage dependency and ensures proper multi-browser isolation
        
        // Check for persisted session state first (for page refresh/navigation scenarios)
        await LoadPersistedSessionStateAsync(requestId);
        
        // Initialize session data FIRST so SessionId is available
        await InitializeSessionAsync(requestId);
        
        // Then initialize SignalR connection with SessionId available
        await InitializeSignalRAsync();
    }

    private async Task InitializeSessionAsync(string requestId)
    {
        try
        {
            if (string.IsNullOrEmpty(SessionToken))
            {
                Logger.LogWarning("COPILOT-DEBUG: [{RequestId}] No session token provided, redirecting to home", requestId);
                Navigation.NavigateTo("/");
                return;
            }

            Logger.LogInformation("COPILOT-DEBUG: [{RequestId}] Loading session canvas data for token: {Token}", 
                requestId, SessionToken);

            await LoadSessionDataAsync(SessionToken, requestId);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "COPILOT-DEBUG: [{RequestId}] Fatal error during session canvas initialization", requestId);
            Model!.CurrentState = SessionCanvasState.SessionNotFound;
            Model.ErrorMessage = "A critical error occurred while loading the session canvas.";
            StateHasChanged();
        }
    }

    private async Task LoadSessionDataAsync(string token, string requestId)
    {
        const int maxRetries = 3;
        const int baseDelayMs = 500;
        
        for (int attempt = 1; attempt <= maxRetries; attempt++)
        {
            try
            {
                // Validate session token and get session data using participant API
                using var httpClient = HttpClientFactory.CreateClient("NoorCanvasApi");
                var apiUrl = $"api/participant/session/{token}/validate";
                
                Logger.LogInformation("[DEBUG-WORKITEM:canvas:API] [{RequestId}] Attempt {Attempt}/{MaxRetries} - Validating UserToken via participant API: {ApiUrl}", 
                    requestId, attempt, maxRetries, apiUrl);
                Logger.LogInformation("COPILOT-DEBUG: [{RequestId}] Fixed API endpoint - using participant validation instead of host validation", requestId);

                var response = await httpClient.GetAsync(apiUrl);
                
                if (response.IsSuccessStatusCode)
                {
                    await ProcessSuccessfulValidation(response, requestId);
                    return; // Success - exit retry loop
                }
                else if (response.StatusCode == System.Net.HttpStatusCode.NotFound && attempt < maxRetries)
                {
                    // Retry on 404 - might be a timing issue with session start
                    var delay = baseDelayMs * (int)Math.Pow(2, attempt - 1);
                    Logger.LogWarning("COPILOT-DEBUG: [{RequestId}] Session validation failed with 404 (attempt {Attempt}/{MaxRetries}) - retrying in {Delay}ms", 
                        requestId, attempt, maxRetries, delay);
                    await Task.Delay(delay);
                    continue;
                }
                else
                {
                    // Non-retryable error or final attempt
                    Logger.LogWarning("COPILOT-DEBUG: [{RequestId}] Session validation failed: {StatusCode}", requestId, response.StatusCode);
                    Model!.CurrentState = SessionCanvasState.SessionNotFound;
                    Model.ErrorMessage = "Session not found. Please check your session token.";
                    return;
                }
            }
            catch (HttpRequestException ex) when (attempt < maxRetries)
            {
                // Retry on network errors
                var delay = baseDelayMs * (int)Math.Pow(2, attempt - 1);
                Logger.LogWarning(ex, "COPILOT-DEBUG: [{RequestId}] Network error during session canvas validation (attempt {Attempt}/{MaxRetries}) - retrying in {Delay}ms", 
                    requestId, attempt, maxRetries, delay);
                await Task.Delay(delay);
                continue;
            }
            catch (HttpRequestException ex)
            {
                Logger.LogError(ex, "COPILOT-DEBUG: [{RequestId}] Network error during session canvas validation (final attempt)", requestId);
                Model!.CurrentState = SessionCanvasState.SessionNotFound;
                Model.ErrorMessage = "Unable to connect to the server. Please check your internet connection.";
                return;
            }
        }
    }

    private async Task ProcessSuccessfulValidation(HttpResponseMessage response, string requestId)
    {
        try
        {
            var content = await response.Content.ReadAsStringAsync();
            Logger.LogInformation("[DEBUG-WORKITEM:canvas:API] [{RequestId}] Raw API response: {Content}", requestId, content);

            var sessionResponse = System.Text.Json.JsonSerializer.Deserialize<SessionValidationResponse>(content, 
                new JsonSerializerOptions { PropertyNameCaseInsensitive = true });

            Logger.LogInformation("[DEBUG-WORKITEM:canvas:API] [{RequestId}] Deserialized response - Valid: {Valid}, SessionId: {SessionId}, Session: {Session}", 
                requestId, sessionResponse?.Valid, sessionResponse?.SessionId, sessionResponse?.Session?.ToString() ?? "null");

            if (sessionResponse?.Valid == true && sessionResponse.Session != null)
            {
                Logger.LogInformation("[DEBUG-WORKITEM:canvas:API] [{RequestId}] Validation successful - updating session data", requestId);
                await UpdateSessionData(sessionResponse.Session);
                _sessionId = sessionResponse.Session.SessionId;
                
                // Load participants
                await LoadParticipantsAsync(requestId);
                
                Model!.CurrentState = SessionCanvasState.Loaded;
                
                // Hide loading spinner after successful load
                LoadingService.Hide();
                
                Logger.LogInformation("[DEBUG-WORKITEM:canvas:UI] [{RequestId}] SessionCanvas rendering with NOOR Canvas branding - NC-Header.png logo", requestId);
                Logger.LogInformation("COPILOT-DEBUG: [{RequestId}] Session canvas loaded successfully with SignalR Q&A integration", requestId);
            }
            else
            {
                Logger.LogWarning("[DEBUG-WORKITEM:canvas:API] [{RequestId}] Validation failed - Valid: {Valid}, Session null: {SessionNull}", 
                    requestId, sessionResponse?.Valid, sessionResponse?.Session == null);
                
                // Hide loading spinner on error
                LoadingService.Hide();
                Model!.CurrentState = SessionCanvasState.SessionNotFound;
                Model.ErrorMessage = "Session not found or invalid token.";
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "COPILOT-DEBUG: [{RequestId}] Error processing validation response", requestId);
            Model!.CurrentState = SessionCanvasState.SessionNotFound;
            Model.ErrorMessage = "Error processing session data. Please try again.";
        }
    }

    private async Task UpdateSessionData(SessionCanvasData session)
    {
        if (Model == null) return;

        Model.SessionId = session.SessionId;
        Model.SessionName = session.Title ?? "Session Canvas";
        Model.SessionDescription = session.Description;
        Model.SessionDate = FormatDate(session.StartTime);
        Model.StartTime = FormatTime(session.StartTime);
        Model.Topic = session.Title ?? "Session Content";
        
        if (session.StartTime.HasValue)
        {
            Model.SessionStartTime = session.StartTime.Value;
        }
        
        // Save session state to localStorage for persistence
        await SaveSessionStateAsync();
    }

    private async Task LoadParticipantsAsync(string requestId)
    {
        try
        {
            // [DEBUG-WORKITEM:canvas:API] First get UserToken for the session using SimplifiedTokenService
            string? userToken = null;
            
            if (_sessionId.HasValue)
            {
                Logger.LogInformation("[DEBUG-WORKITEM:canvas:API] [{RequestId}] Getting UserToken via SimplifiedTokenService for SessionId: {SessionId}", requestId, _sessionId.Value);
                
                var tokens = await TokenService.GetTokensBySessionIdAsync(_sessionId.Value);
                
                if (tokens.HasValue)
                {
                    userToken = tokens.Value.userToken;
                    Logger.LogInformation("[DEBUG-WORKITEM:canvas:API] [{RequestId}] Retrieved UserToken: {UserToken}", 
                        requestId, userToken ?? "NULL");
                }
                else
                {
                    Logger.LogWarning("[DEBUG-WORKITEM:canvas:API] [{RequestId}] No tokens found for SessionId: {SessionId}", 
                        requestId, _sessionId.Value);
                }
            }
            
            // [DEBUG-WORKITEM:canvas:API] Use UserToken (8 chars) for participants API instead of HostAuthToken (36 chars)
            if (!string.IsNullOrEmpty(userToken))
            {
                using var httpClient = HttpClientFactory.CreateClient("NoorCanvasApi");
                var apiUrl = $"api/participant/session/{userToken}/participants";
                
                Logger.LogInformation("[DEBUG-WORKITEM:canvas:API] [{RequestId}] Loading participants with UserToken: {ApiUrl}", requestId, apiUrl);
                
                var response = await httpClient.GetAsync(apiUrl);
                
                if (response.IsSuccessStatusCode)
                {
                    var content = await response.Content.ReadAsStringAsync();
                    Logger.LogInformation("[DEBUG-WORKITEM:canvas:API] [{RequestId}] Participants API response: {Content}", 
                        requestId, content.Length > 500 ? content[..500] + "..." : content);

                    var participantsResponse = System.Text.Json.JsonSerializer.Deserialize<ParticipantsResponse>(content, 
                        new JsonSerializerOptions { PropertyNameCaseInsensitive = true });

                    if (participantsResponse?.Participants != null)
                    {
                        // Convert API participants to display participants
                        Model!.Participants = participantsResponse.Participants.Select(p => new ParticipantData
                        {
                            UserId = p.UserId,
                            Name = p.DisplayName,
                            Country = p.Country ?? "Unknown",
                            Flag = p.CountryFlag?.ToLower() ?? ""
                        }).ToList();
                        
                        // API-BASED APPROACH: Get current participant directly from API using token
                        // This eliminates the hash-based selection that caused "same name on multiple browsers" issue
                        await LoadCurrentParticipantFromApiAsync(requestId);
                        Model.ParticipantCount = Model.Participants.Count;
                        Logger.LogInformation("[DEBUG-WORKITEM:canvas:API] [{RequestId}] Loaded {Count} participants for session canvas", 
                            requestId, Model.Participants.Count);
                    }
                }
                else
                {
                    Logger.LogWarning("[DEBUG-WORKITEM:canvas:API] [{RequestId}] Participants API failed - Status: {StatusCode}", 
                        requestId, response.StatusCode);
                }
            }
            else
            {
                Logger.LogError("[DEBUG-WORKITEM:canvas:API] [{RequestId}] Cannot load participants - UserToken is null or empty", requestId);
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "[DEBUG-WORKITEM:canvas:API] [{RequestId}] Error loading participants for session canvas", requestId);
        }
        
        await InvokeAsync(() => StateHasChanged());
    }

    /// <summary>
    /// API-BASED APPROACH: Loads current participant info directly from API using token and UserGuid.
    /// This replaces both storage-based UserGuid initialization and hash-based participant selection.
    /// Sets both CurrentParticipantName for display and CurrentUserGuid for authentication.
    /// </summary>
    private async Task LoadCurrentParticipantFromApiAsync(string requestId)
    {
        try
        {
            // USERGUID-BASED IDENTIFICATION: Retrieve stored UserGuid for this session
            string? storedUserGuid = null;
            try
            {
                if (JSRuntime != null)
                {
                    // Try session-specific UserGuid first (multi-browser isolation)
                    var sessionStorageKey = $"noor_user_guid_{SessionToken}";
                    storedUserGuid = await JSRuntime.InvokeAsync<string?>("sessionStorage.getItem", sessionStorageKey);
                    
                    if (string.IsNullOrEmpty(storedUserGuid))
                    {
                        // Fallback to localStorage (cross-tab persistence)
                        storedUserGuid = await JSRuntime.InvokeAsync<string?>("localStorage.getItem", sessionStorageKey);
                    }
                    
                    if (string.IsNullOrEmpty(storedUserGuid))
                    {
                        // Legacy fallback
                        storedUserGuid = await JSRuntime.InvokeAsync<string?>("localStorage.getItem", "noor-userId");
                    }
                }
            }
            catch (Exception ex)
            {
                Logger.LogWarning("[API-PARTICIPANT-ME] [{RequestId}] Failed to retrieve UserGuid from browser storage: {Error}", 
                    requestId, ex.Message);
            }

            Logger.LogInformation("[API-PARTICIPANT-ME] [{RequestId}] Loading current participant from API - Token: {Token}, UserGuid: {UserGuid}", 
                requestId, SessionToken, storedUserGuid ?? "NULL");

            if (Http != null && !string.IsNullOrEmpty(SessionToken))
            {
                // Build API URL with optional UserGuid parameter for multi-browser isolation
                var apiUrl = $"/api/participant/session/{SessionToken}/me";
                if (!string.IsNullOrEmpty(storedUserGuid))
                {
                    apiUrl += $"?userGuid={Uri.EscapeDataString(storedUserGuid)}";
                }
                
                Logger.LogInformation("[API-PARTICIPANT-ME] [{RequestId}] Calling participant API: {ApiUrl}", 
                    requestId, apiUrl);
                    
                var response = await Http.GetAsync(apiUrl);
                
                if (response.IsSuccessStatusCode)
                {
                    var jsonResponse = await response.Content.ReadAsStringAsync();
                    var participantData = System.Text.Json.JsonSerializer.Deserialize<JsonElement>(jsonResponse);
                    
                    // Extract participant name for display
                    if (participantData.TryGetProperty("name", out var nameElement))
                    {
                        var participantName = nameElement.GetString();
                        if (Model != null)
                        {
                            Model.CurrentParticipantName = participantName ?? "Session Participant";
                        }
                        
                        Logger.LogInformation("[API-PARTICIPANT-ME] [{RequestId}] Participant name loaded: {Name}", 
                            requestId, participantName);
                    }
                    
                    // Extract UserGuid for authentication (Q&A, delete, etc.)
                    if (participantData.TryGetProperty("userGuid", out var userGuidElement))
                    {
                        var userGuid = userGuidElement.GetString();
                        if (!string.IsNullOrEmpty(userGuid))
                        {
                            CurrentUserGuid = userGuid;
                            Logger.LogInformation("[API-PARTICIPANT-ME] [{RequestId}] UserGuid loaded for authentication: {UserGuid}", 
                                requestId, CurrentUserGuid);
                                
                            // USERGUID-PERSISTENCE: Store UserGuid for multi-browser isolation
                            try
                            {
                                if (JSRuntime != null)
                                {
                                    var sessionStorageKey = $"noor_user_guid_{SessionToken}";
                                    await JSRuntime.InvokeVoidAsync("sessionStorage.setItem", sessionStorageKey, userGuid);
                                    await JSRuntime.InvokeVoidAsync("localStorage.setItem", sessionStorageKey, userGuid);
                                    Logger.LogInformation("[API-PARTICIPANT-ME] [{RequestId}] UserGuid stored for session persistence: {Key}", 
                                        requestId, sessionStorageKey);
                                }
                            }
                            catch (Exception storageEx)
                            {
                                Logger.LogWarning("[API-PARTICIPANT-ME] [{RequestId}] Failed to store UserGuid: {Error}", 
                                    requestId, storageEx.Message);
                            }
                        }
                        else
                        {
                            Logger.LogWarning("[API-PARTICIPANT-ME] [{RequestId}] Empty UserGuid returned from API", requestId);
                        }
                    }
                    else
                    {
                        Logger.LogWarning("[API-PARTICIPANT-ME] [{RequestId}] No UserGuid found in participant API response", requestId);
                    }
                }
                else if (response.StatusCode == System.Net.HttpStatusCode.NotFound)
                {
                    Logger.LogWarning("[API-PARTICIPANT-ME] [{RequestId}] Participant not found for token: {Token}, UserGuid: {UserGuid} - User may not be registered yet", 
                        requestId, SessionToken, storedUserGuid ?? "NULL");
                    if (Model != null)
                    {
                        Model.CurrentParticipantName = "Session Participant";
                    }
                    // Don't set CurrentUserGuid - this will prevent Q&A until user registers
                    // Clear any invalid stored UserGuid to force re-registration
                    if (!string.IsNullOrEmpty(storedUserGuid))
                    {
                        try
                        {
                            if (JSRuntime != null)
                            {
                                var sessionStorageKey = $"noor_user_guid_{SessionToken}";
                                await JSRuntime.InvokeVoidAsync("sessionStorage.removeItem", sessionStorageKey);
                                Logger.LogInformation("[API-PARTICIPANT-ME] [{RequestId}] Cleared invalid UserGuid from session storage", requestId);
                            }
                        }
                        catch (Exception clearEx)
                        {
                            Logger.LogWarning("[API-PARTICIPANT-ME] [{RequestId}] Failed to clear invalid UserGuid: {Error}", 
                                requestId, clearEx.Message);
                        }
                    }
                }
                else
                {
                    Logger.LogWarning("[API-PARTICIPANT-ME] [{RequestId}] Current participant API failed - Status: {StatusCode}", 
                        requestId, response.StatusCode);
                    if (Model != null)
                    {
                        Model.CurrentParticipantName = "Session Participant";
                    }
                }
            }
            else
            {
                Logger.LogWarning("[API-PARTICIPANT-ME] [{RequestId}] Cannot load participant - Http or SessionToken is null", requestId);
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "[API-PARTICIPANT-ME] [{RequestId}] Error loading current participant from API", requestId);
            if (Model != null)
            {
                Model.CurrentParticipantName = "Session Participant";
            }
        }
    }

    // SignalR Status Methods
    private string GetSignalRStatusIcon()
    {
        return hubConnection?.State switch
        {
            HubConnectionState.Connected => "fa-solid fa-circle-check",
            HubConnectionState.Connecting => "fa-solid fa-circle-notch fa-spin",
            HubConnectionState.Reconnecting => "fa-solid fa-arrows-rotate fa-spin",
            HubConnectionState.Disconnected => "fa-solid fa-circle-xmark",
            _ => "fa-solid fa-circle-question"
        };
    }

    private string GetSignalRStatusColor()
    {
        return hubConnection?.State switch
        {
            HubConnectionState.Connected => "#10B981",      // Green
            HubConnectionState.Connecting => "#F59E0B",     // Yellow  
            HubConnectionState.Reconnecting => "#F59E0B",   // Yellow
            HubConnectionState.Disconnected => "#EF4444",  // Red
            _ => "#6B7280"                                  // Gray
        };
    }

    private string GetSignalRStatusText()
    {
        return hubConnection?.State switch
        {
            HubConnectionState.Connected => "Connected",
            HubConnectionState.Connecting => "Connecting",
            HubConnectionState.Reconnecting => "Reconnecting",
            HubConnectionState.Disconnected => "Disconnected",
            _ => "Unknown"
        };
    }

    private string GetSignalRStatusBackgroundColor()
    {
        return hubConnection?.State switch
        {
            HubConnectionState.Connected => "#F0FDF4",      // Light green
            HubConnectionState.Connecting => "#FFFBEB",     // Light yellow  
            HubConnectionState.Reconnecting => "#FFFBEB",   // Light yellow
            HubConnectionState.Disconnected => "#FEF2F2",  // Light red
            _ => "#F8F9FA"                                  // Light gray
        };
    }

    private string GetSignalRStatusBorderColor()
    {
        return hubConnection?.State switch
        {
            HubConnectionState.Connected => "#10B981",      // Green
            HubConnectionState.Connecting => "#F59E0B",     // Yellow  
            HubConnectionState.Reconnecting => "#F59E0B",   // Yellow
            HubConnectionState.Disconnected => "#EF4444",  // Red
            _ => "#E9ECEF"                                  // Gray
        };
    }

    private async Task RetrySignalRConnection()
    {
        try
        {
            Logger.LogInformation("[DEBUG-WORKITEM:hostcanvas:CANVAS] Retrying SignalR connection...");
            
            if (hubConnection != null)
            {
                await hubConnection.DisposeAsync();
            }
            
            await InitializeSignalRAsync();
            StateHasChanged();
            
            Logger.LogInformation("[DEBUG-WORKITEM:hostcanvas:CANVAS] SignalR connection retry completed");
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "[DEBUG-WORKITEM:hostcanvas:CANVAS] Failed to retry SignalR connection");
        }
    }

    private void NavigateHome()
    {
        Navigation.NavigateTo("/");
    }

    private void NavigateToWaitingRoom()
    {
        if (!string.IsNullOrEmpty(SessionToken))
        {
            Navigation.NavigateTo($"/session/waiting/{SessionToken}");
        }
        else
        {
            Navigation.NavigateTo("/");
        }
    }

    private Task EndSession()
    {
        // TODO: Implement session ending functionality
        Logger.LogInformation("COPILOT-DEBUG: End session requested for token: {Token}", SessionToken);
        // For now, just navigate back to waiting room
        NavigateToWaitingRoom();
        return Task.CompletedTask;
    }

    private static string FormatDate(DateTime? dateTime)
    {
        if (!dateTime.HasValue) return "Today";
        
        var date = dateTime.Value.Date;
        var today = DateTime.Today;
        
        if (date == today) return "Today";
        if (date == today.AddDays(1)) return "Tomorrow";
        
        return date.ToString("MMM dd, yyyy");
    }

    private static string FormatTime(DateTime? dateTime)
    {
        return dateTime?.ToString("h:mm tt") ?? "TBD";
    }

    private static string FormatTime(TimeSpan timeSpan)
    {
        if (timeSpan.TotalHours >= 1)
            return $"{(int)timeSpan.TotalHours}h {timeSpan.Minutes}m";
        else
            return $"{timeSpan.Minutes}m";
    }

    public async ValueTask DisposeAsync()
    {
        try
        {
            if (hubConnection != null)
            {
                Logger.LogInformation("[DEBUG-WORKITEM:hostcanvas:CANVAS] Disposing SignalR connection");
                await hubConnection.DisposeAsync();
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "[DEBUG-WORKITEM:hostcanvas:CANVAS] Error disposing SignalR connection");
        }
    }

    // ViewModel and Data Classes
    public class SessionCanvasViewModel
    {
        public long SessionId { get; set; }
        public string? LogoText { get; set; }
        public SessionCanvasState CurrentState { get; set; }
        public string? SessionName { get; set; }
        public string? SessionDescription { get; set; }
        public string? SessionDate { get; set; }
        public string? StartTime { get; set; }
        public string? Topic { get; set; }
        public int ParticipantCount { get; set; }
        public List<ParticipantData>? Participants { get; set; }
        public List<QuestionData>? Questions { get; set; }
        public string? ErrorMessage { get; set; }
        public TimeSpan Duration { get; set; }
        public DateTime? SessionStartTime { get; set; }
        public string? SharedAssetContent { get; set; }
        public string? CurrentParticipantName { get; set; }
    }

    public enum SessionCanvasState
    {
        Loading,
        Loaded,
        SessionNotFound
    }

    public class ParticipantData
    {
        public string UserId { get; set; } = "";
        public string Name { get; set; } = "";
        public string Country { get; set; } = "";
        public string Flag { get; set; } = "";
    }

    public class QuestionData
    {
        public int QuestionId { get; set; }
        public string Text { get; set; } = "";
        public int Votes { get; set; }
        public DateTime CreatedAt { get; set; }
        public string CreatedBy { get; set; } = "";
        public string UserName { get; set; } = "";
        public bool IsAnswered { get; set; }
        public bool IsMyQuestion { get; set; }
    }

    public class SessionValidationResponse
    {
        public bool Valid { get; set; }
        public int SessionId { get; set; }
        public string? Token { get; set; }
        public DateTime? ExpiresAt { get; set; }
        public SessionCanvasData? Session { get; set; }
        public ParticipantInfo? Participant { get; set; }
        public string? RequestId { get; set; }
    }

    public class SessionCanvasData
    {
        public int SessionId { get; set; }
        public string? Title { get; set; }
        public string? Description { get; set; }
        public string? Status { get; set; }
        public int ParticipantCount { get; set; }
        public int? MaxParticipants { get; set; }
        public DateTime? StartedAt { get; set; }
        public DateTime? CreatedAt { get; set; }
        public string? InstructorName { get; set; }
        
        // Properties that match the API response from ParticipantController
        public DateTime? StartTime { get; set; }  // Direct property to match API response
        public TimeSpan? Duration { get; set; }   // Direct property to match API response
    }

    public class ParticipantInfo
    {
        public string? JoinUrl { get; set; }
        public int AccessCount { get; set; }
        public DateTime? LastAccessedAt { get; set; }
    }

    public class ParticipantsResponse
    {
        public int SessionId { get; set; }
        public string? Token { get; set; }
        public int ParticipantCount { get; set; }
        public List<ParticipantApiData>? Participants { get; set; }
        public string? RequestId { get; set; }
    }

    public class ParticipantApiData
    {
        public string UserId { get; set; } = "";
        public string DisplayName { get; set; } = "";
        public DateTime JoinedAt { get; set; }
        public string Role { get; set; } = "";
        public string? City { get; set; }
        public string? Country { get; set; }
        public string? CountryFlag { get; set; }
    }



    public class SessionTokenResponse
    {
        public long SessionId { get; set; }
        public string? HostToken { get; set; }
        public string? UserToken { get; set; }
        public DateTime ExpiresAt { get; set; }
        public bool IsActive { get; set; }
        public int AccessCount { get; set; }
        public DateTime CreatedAt { get; set; }
    }

    // Q&A Methods
    private async Task SubmitQuestion()
    {
        var requestId = Guid.NewGuid().ToString("N")[..8];
        Logger.LogInformation("[DEBUG-WORKITEM:submit-bug] [{RequestId}] SubmitQuestion called - QuestionInput: '{QuestionText}', SessionToken: '{SessionToken}', UserGuid: '{UserGuid}'", 
            requestId, QuestionInput?.Trim() ?? "NULL", SessionToken ?? "NULL", CurrentUserGuid ?? "NULL");

        if (string.IsNullOrWhiteSpace(QuestionInput) || string.IsNullOrEmpty(SessionToken) || Http == null)
        {
            Logger.LogWarning("[DEBUG-WORKITEM:submit-bug] [{RequestId}] Validation failed - missing required fields", requestId);
            return;
        }

        try
        {
            Logger.LogInformation("[DEBUG-WORKITEM:submit-bug] [{RequestId}] Preparing API request payload", requestId);
            var requestPayload = new
            {
                SessionToken = SessionToken,
                QuestionText = QuestionInput.Trim(),
                UserGuid = CurrentUserGuid
            };
            
            Logger.LogInformation("[DEBUG-WORKITEM:submit-bug] [{RequestId}] Sending POST request to /api/Question/Submit", requestId);
            var response = await Http.PostAsJsonAsync("/api/Question/Submit", requestPayload);



            Logger.LogInformation("[DEBUG-WORKITEM:submit-bug] [{RequestId}] API response received - StatusCode: {StatusCode}", requestId, response.StatusCode);

            if (response.IsSuccessStatusCode)
            {
                var responseContent = await response.Content.ReadAsStringAsync();
                Logger.LogInformation("[DEBUG-WORKITEM:submit-bug] [{RequestId}] Question submitted successfully - Response: {Response}", requestId, responseContent);
                
                // Question submitted successfully - clear input
                QuestionInput = "";
                await InvokeAsync(StateHasChanged);
                
                Logger.LogInformation("[DEBUG-WORKITEM:submit-bug] [{RequestId}] Question input cleared and UI refreshed", requestId);
            }
            else if (response.StatusCode == System.Net.HttpStatusCode.Unauthorized)
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                Logger.LogWarning("[DEBUG-WORKITEM:submit-bug] [{RequestId}] User unauthorized - redirecting to landing page. Error: {Error}", requestId, errorContent);
                
                // Redirect to UserLanding.razor with session token for proper authentication
                // UserLanding.razor will handle session status check and route user to appropriate page after authentication
                Navigation.NavigateTo($"/user/landing/{SessionToken}");
                return;
            }
            else
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                Logger.LogError("[DEBUG-WORKITEM:submit-bug] [{RequestId}] Question submission failed: {StatusCode} - {Error}", requestId, response.StatusCode, errorContent);
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "[DEBUG-WORKITEM:submit-bug] [{RequestId}] Exception during question submission: {ExceptionMessage}", requestId, ex.Message);
            Console.WriteLine($"[DEBUG-WORKITEM:submit-bug] Error submitting question: {ex.Message}");
        }
    }

    private async Task VoteQuestion(int questionId)
    {
        if (Http == null) return;
        
        try
        {
            var response = await Http.PostAsJsonAsync("/api/Question/Vote", new
            {
                QuestionId = questionId,
                UserGuid = CurrentUserGuid
            });

            if (response.IsSuccessStatusCode)
            {
                // Vote will be updated via SignalR
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error voting on question: {ex.Message}");
        }
    }

    private void EditQuestion(int index)
    {
        if (Model?.Questions != null && index >= 0 && index < Model.Questions.Count)
        {
            EditingQuestionIndex = index;
            QuestionInput = Model.Questions[index].Text;
        }
    }

    private void ShowDeleteModal(int index)
    {
        if (Model?.Questions != null && index >= 0 && index < Model.Questions.Count)
        {
            QuestionToDeleteIndex = index;
            IsModalVisible = true;
        }
    }

    private void CancelDelete()
    {
        QuestionToDeleteIndex = null;
        IsModalVisible = false;
    }

    private async Task DeleteConfirmed()
    {
        if (Http == null || QuestionToDeleteIndex == null || Model?.Questions == null) return;
        
        var index = QuestionToDeleteIndex.Value;
        if (index >= 0 && index < Model.Questions.Count)
        {
            var questionId = Model.Questions[index].QuestionId;
            
            try
            {
                var response = await Http.DeleteAsync($"/api/Question/Delete/{questionId}?userGuid={CurrentUserGuid}");
                if (response.IsSuccessStatusCode)
                {
                    // Question will be removed via SignalR
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error deleting question: {ex.Message}");
            }
        }
        
        // Close modal
        QuestionToDeleteIndex = null;
        IsModalVisible = false;
    }

    // SignalR Integration
    private async Task InitializeSignalRAsync()
    {
        try
        {
            // Dispose existing connection if any
            if (hubConnection != null)
            {
                Logger.LogInformation("[DEBUG-WORKITEM:hostcanvas:CANVAS] 🔄 Disposing existing SignalR connection");
                Logger.LogInformation("[DEBUG-WORKITEM:hostcanvas:CANVAS] Disposing existing SignalR connection");
                await hubConnection.DisposeAsync();
                hubConnection = null;
            }

            Logger.LogInformation("[DEBUG-WORKITEM:hostcanvas:CANVAS] 🔗 Creating SignalR hub connection to /hub/session");
            Logger.LogInformation("[DEBUG-WORKITEM:hostcanvas:CANVAS] Creating SignalR hub connection to /hub/session");
            
            hubConnection = new HubConnectionBuilder()
                .WithUrl(Navigation.ToAbsoluteUri("/hub/session"))
                .WithAutomaticReconnect(new[] { TimeSpan.Zero, TimeSpan.FromSeconds(2), TimeSpan.FromSeconds(10), TimeSpan.FromSeconds(30) })
                .Build();

            // Connection state change events
            hubConnection.Closed += async (error) =>
            {
                Logger.LogError("[DEBUG-WORKITEM:hostcanvas:CANVAS] ❌ SignalR connection closed: {Error}", error?.Message ?? "No error");
                Logger.LogWarning("[DEBUG-WORKITEM:hostcanvas:CANVAS] SignalR connection closed: {Error}", error?.Message ?? "No error");
                await InvokeAsync(StateHasChanged);
            };

            hubConnection.Reconnecting += async (error) =>
            {
                Logger.LogWarning("[DEBUG-WORKITEM:hostcanvas:CANVAS] 🔄 SignalR reconnecting: {Error}", error?.Message ?? "No error");
                Logger.LogInformation("[DEBUG-WORKITEM:hostcanvas:CANVAS] SignalR reconnecting: {Error}", error?.Message ?? "No error");
                await InvokeAsync(StateHasChanged);
            };

            hubConnection.Reconnected += async (connectionId) =>
            {
                Logger.LogInformation("[DEBUG-WORKITEM:hostcanvas:CANVAS] SignalR reconnected with ID: {ConnectionId}", connectionId ?? "unknown");
                lastConnectionTime = DateTime.Now;
                await InvokeAsync(StateHasChanged);
                
                // Re-join session after reconnection
                if (Model?.SessionId > 0)
                {
                    await hubConnection.SendAsync("JoinSession", Model.SessionId, "participant");
                    Logger.LogInformation("[DEBUG-WORKITEM:hostcanvas:CANVAS] Re-joined session {SessionId} after reconnection", Model.SessionId);
                }
            };

            // Question events - Handle questions received from other participants
            hubConnection.On<object>("QuestionReceived", async (questionData) =>
            {
                if (Model?.Questions != null && questionData != null)
                {
                    try
                    {
                        // Parse the question data from SignalR
                        var jsonString = System.Text.Json.JsonSerializer.Serialize(questionData);
                        using var jsonDoc = System.Text.Json.JsonDocument.Parse(jsonString);
                        var root = jsonDoc.RootElement;
                        
                        var question = new QuestionData
                        {
                            QuestionId = root.TryGetProperty("questionId", out var qIdProp) ? 
                                (qIdProp.ValueKind == JsonValueKind.String ? qIdProp.GetString()?.GetHashCode() ?? 0 : qIdProp.GetInt32()) : 0,
                            Text = root.TryGetProperty("text", out var textProp) ? textProp.GetString() ?? "" : "",
                            UserName = root.TryGetProperty("userName", out var userProp) ? userProp.GetString() ?? "Anonymous" : "Anonymous",
                            CreatedBy = root.TryGetProperty("userId", out var userIdProp) ? userIdProp.GetString() ?? "" : "",
                            Votes = root.TryGetProperty("votes", out var votesProp) ? votesProp.GetInt32() : 0,
                            CreatedAt = root.TryGetProperty("submittedAt", out var dateProp) ? dateProp.GetDateTime() : DateTime.UtcNow,
                            IsAnswered = root.TryGetProperty("isAnswered", out var answeredProp) ? answeredProp.GetBoolean() : false,
                            IsMyQuestion = root.TryGetProperty("userId", out var myUserIdProp) ? 
                                (myUserIdProp.GetString() == CurrentUserGuid) : false
                        };
                        
                        // Only add if not already in the list (prevent duplicates)
                        if (!Model.Questions.Any(q => q.QuestionId == question.QuestionId))
                        {
                            Model.Questions.Add(question);
                        }
                        
                        await InvokeAsync(StateHasChanged);
                    }
                    catch (Exception ex)
                    {
                        Logger.LogError(ex, "Error processing QuestionReceived event");
                    }
                }
            });

            hubConnection.On<int, int>("QuestionVoteUpdated", async (questionId, newVoteCount) =>
            {
                if (Model?.Questions != null)
                {
                    var question = Model.Questions.FirstOrDefault(q => q.QuestionId == questionId);
                    if (question != null)
                    {
                        question.Votes = newVoteCount;
                        await InvokeAsync(StateHasChanged);
                    }
                }
            });

            hubConnection.On<int>("QuestionDeleted", async (questionId) =>
            {
                if (Model?.Questions != null)
                {
                    var question = Model.Questions.FirstOrDefault(q => q.QuestionId == questionId);
                    if (question != null)
                    {
                        Model.Questions.Remove(question);
                        await InvokeAsync(StateHasChanged);
                    }
                }
            });

            // Participant events
            hubConnection.On<ParticipantApiData>("ParticipantJoined", async (apiParticipant) =>
            {
                if (Model?.Participants != null)
                {
                    var participant = new ParticipantData
                    {
                        UserId = apiParticipant.UserId,
                        Name = apiParticipant.DisplayName,
                        Country = apiParticipant.Country ?? "",
                        Flag = apiParticipant.CountryFlag ?? ""
                    };
                    Model.Participants.Add(participant);
                    await InvokeAsync(StateHasChanged);
                }
            });

            hubConnection.On<string>("ParticipantLeft", async (userId) =>
            {
                if (Model?.Participants != null)
                {
                    var participant = Model.Participants.FirstOrDefault(p => p.UserId == userId);
                    if (participant != null)
                    {
                        Model.Participants.Remove(participant);
                        await InvokeAsync(StateHasChanged);
                    }
                }
            });

            // Note: Using AssetContentReceived for KSESSIONS pattern consistency
            // AssetShared handler removed to prevent conflicts

            // POC: Simple asset content reception - KSESSIONS-style approach
            hubConnection.On<string>("AssetContentReceived", async (htmlContent) =>
            {
                var trackingId = Guid.NewGuid().ToString("N")[..8];
                var receiveTime = DateTimeOffset.UtcNow.ToUnixTimeMilliseconds();
                
                try
                {
                    Logger.LogInformation("[DOM-TIMING] AssetContentReceived at {ReceiveTime}ms, trackingId={TrackingId}", 
                        receiveTime, trackingId);
                    Logger.LogInformation("[ASSET-SHARE-POC] Content received, length={Length}, trackingId={TrackingId}", 
                        htmlContent?.Length ?? 0, trackingId);
                    
                    if (!string.IsNullOrEmpty(htmlContent) && Model != null)
                    {
                        // Direct assignment - no complex parsing, following KSESSIONS pattern
                        Model.SharedAssetContent = htmlContent;
                        await InvokeAsync(StateHasChanged);
                        
                        var displayTime = DateTimeOffset.UtcNow.ToUnixTimeMilliseconds();
                        Logger.LogInformation("[DOM-TIMING] Content displayed at {DisplayTime}ms, trackingId={TrackingId}", 
                            displayTime, trackingId);
                        Logger.LogInformation("[ASSET-SHARE-POC] ✅ Content displayed successfully, trackingId={TrackingId}", trackingId);
                    }
                    else
                    {
                        Logger.LogWarning("[ASSET-SHARE-POC] ⚠️ No content or model null, trackingId={TrackingId}", trackingId);
                    }
                }
                catch (Exception ex)
                {
                    Logger.LogError(ex, "[ASSET-SHARE-POC] ❌ Error displaying content, trackingId={TrackingId}", trackingId);
                }
            });

            // HTML content broadcasting events (using working SimpleSignalRTest pattern)
            hubConnection.On<object>("HtmlContentReceived", async (broadcastData) =>
            {
                try
                {
                    Logger.LogInformation("[DEBUG-WORKITEM:canvas:broadcast] HtmlContentReceived event received");
                    
                    var json = System.Text.Json.JsonSerializer.Serialize(broadcastData);
                    using var doc = System.Text.Json.JsonDocument.Parse(json);
                    var root = doc.RootElement;
                    
                    if (root.TryGetProperty("htmlContent", out var htmlElement))
                    {
                        var htmlContent = htmlElement.GetString();
                        Logger.LogInformation("[DEBUG-WORKITEM:canvas:broadcast] Received HTML content: {Length} chars", htmlContent?.Length ?? 0);
                        
                        if (Model != null)
                        {
                            Model.SharedAssetContent = htmlContent;
                            await InvokeAsync(StateHasChanged);
                        }
                        
                        Logger.LogInformation("[DEBUG-WORKITEM:canvas:broadcast] HTML content displayed in session canvas");
                    }
                }
                catch (Exception ex)
                {
                    Logger.LogError(ex, "[DEBUG-WORKITEM:canvas:broadcast] Error processing HtmlContentReceived event");
                }
            });

            Logger.LogInformation("[DEBUG-WORKITEM:hostcanvas:CANVAS] 🚀 Starting SignalR connection...");
            Logger.LogInformation("[DEBUG-WORKITEM:hostcanvas:CANVAS] Starting SignalR connection...");
            await hubConnection.StartAsync();
            Logger.LogInformation("[DEBUG-WORKITEM:hostcanvas:CANVAS] ✅ SignalR connected: State={State}, ConnectionId={ConnectionId}", hubConnection.State, hubConnection.ConnectionId);
            Logger.LogInformation("[DEBUG-WORKITEM:hostcanvas:CANVAS] SignalR connection started successfully, State: {State}", hubConnection.State);
            
            if (Model?.SessionId > 0)
            {
                var connectionTrackingId = Guid.NewGuid().ToString("N")[..8];
                Logger.LogInformation("[DEBUG-WORKITEM:hostcanvas:CANVAS] 🔄 Attempting to join session group: session_{SessionId}", Model.SessionId);
                Logger.LogInformation("[DEBUG-WORKITEM:hostcanvas:CONNECTION-TRACK] 🔗 GROUP JOIN: Attempting to join session_{SessionId}, connectionTrackingId={ConnectionTrackingId} ;CLEANUP_OK", Model.SessionId, connectionTrackingId);
                await hubConnection.SendAsync("JoinSession", Model.SessionId, "participant");
                Logger.LogInformation("[DEBUG-WORKITEM:hostcanvas:CANVAS] ✅ Joined SignalR group: session_{SessionId}", Model.SessionId);
                Logger.LogInformation("[DEBUG-WORKITEM:hostcanvas:CONNECTION-TRACK] ✅ GROUP SUCCESS: Joined session_{SessionId} as participant, connectionTrackingId={ConnectionTrackingId} ;CLEANUP_OK", Model.SessionId, connectionTrackingId);
                
                // Test message to verify group membership
                Logger.LogInformation("[DEBUG-WORKITEM:hostcanvas:CANVAS] 🧪 Testing group membership for session_{SessionId}", Model.SessionId);
                Logger.LogInformation("[DEBUG-WORKITEM:hostcanvas:CONNECTION-TRACK] 📡 GROUP READY: SessionCanvas ready to receive broadcasts in session_{SessionId}, connectionTrackingId={ConnectionTrackingId} ;CLEANUP_OK", Model.SessionId, connectionTrackingId);
            }
            else
            {
                Logger.LogWarning("[DEBUG-WORKITEM:hostcanvas:CANVAS] ⚠️ SessionId not available - cannot join SignalR group");
                Logger.LogInformation("[DEBUG-WORKITEM:hostcanvas:CANVAS] 📊 Model state: SessionId={SessionId}, SessionName={SessionName}", Model?.SessionId, Model?.SessionName);
            }
            
            // Trigger UI update to show connected status
            lastConnectionTime = DateTime.Now;
            await InvokeAsync(StateHasChanged);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "[DEBUG-WORKITEM:hostcanvas:CANVAS] Error initializing SignalR connection: {Error}", ex.Message);
            // Trigger UI update to show disconnected status with retry button
            await InvokeAsync(StateHasChanged);
        }
    }

    private async Task LoadPersistedSessionStateAsync(string requestId)
    {
        try
        {
            Logger.LogInformation("[DEBUG-WORKITEM:hostcanvas:SESSION] [{RequestId}] Loading persisted session state from localStorage", requestId);
            
            var sessionState = await SessionStateService.LoadSessionStateAsync();
            
            if (sessionState != null)
            {
                Logger.LogInformation("[DEBUG-WORKITEM:hostcanvas:SESSION] [{RequestId}] Found persisted SessionId: {SessionId}", 
                    requestId, sessionState.SessionId);
                
                // Only use persisted state if we don't have a current SessionId
                if (_sessionId == null || _sessionId == 0)
                {
                    _sessionId = sessionState.SessionId;
                    
                    // Pre-populate model with persisted data to avoid empty initial state
                    if (Model != null)
                    {
                        Model.SessionId = sessionState.SessionId;
                        Model.SessionName = sessionState.SessionName;
                        Model.Topic = sessionState.Topic;
                        Model.ParticipantCount = sessionState.ParticipantCount;
                        
                        // Update the formatted display fields
                        if (sessionState.StartedAt.HasValue)
                        {
                            Model.SessionDate = FormatDate(sessionState.StartedAt.Value);
                            Model.StartTime = FormatTime(sessionState.StartedAt.Value);
                            Model.SessionStartTime = sessionState.StartedAt.Value;
                        }
                        
                        Logger.LogInformation("[DEBUG-WORKITEM:hostcanvas:SESSION] [{RequestId}] Pre-populated model with persisted data", requestId);
                        await InvokeAsync(StateHasChanged);
                    }
                }
                else
                {
                    Logger.LogInformation("[DEBUG-WORKITEM:hostcanvas:SESSION] [{RequestId}] Current SessionId ({CurrentSessionId}) exists, skipping persisted SessionId ({PersistedSessionId})", 
                        requestId, _sessionId, sessionState.SessionId);
                }
            }
            else
            {
                Logger.LogInformation("[DEBUG-WORKITEM:hostcanvas:SESSION] [{RequestId}] No persisted session state found", requestId);
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "[DEBUG-WORKITEM:hostcanvas:SESSION] [{RequestId}] Error loading persisted session state", requestId);
        }
    }

    private async Task SaveSessionStateAsync()
    {
        try
        {
            if (_sessionId.HasValue && Model != null)
            {
                var sessionState = new NoorCanvas.Services.SessionStateService.SessionState
                {
                    SessionId = (int)_sessionId.Value,
                    SessionName = Model.SessionName ?? "Unknown Session",
                    SessionDescription = "Session Canvas View",
                    SessionStatus = "Active",
                    Topic = Model.Topic ?? "Session Content",
                    ParticipantCount = Model.ParticipantCount,
                    StartedAt = Model.SessionStartTime,
                    CreatedAt = DateTime.UtcNow
                };

                var saved = await SessionStateService.SaveSessionStateAsync(sessionState);
                
                Logger.LogInformation("[DEBUG-WORKITEM:hostcanvas:SESSION] Session state saved: {Success} for SessionId: {SessionId}", 
                    saved, _sessionId.Value);
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "[DEBUG-WORKITEM:hostcanvas:SESSION] Error saving session state");
        }
    }

    private DateTime? lastConnectionTime;

    // REMOVED: InitializeUserGuidAsync method eliminated in favor of API-based approach
    // UserGuid is now retrieved directly from the participant API during LoadCurrentParticipantFromApiAsync
    // This eliminates localStorage/sessionStorage dependency and ensures proper multi-browser isolation

    private string GetSignalRStatusIconStyle()
    {
        var status = GetSignalRStatusText();
        return status switch
        {
            "Connected" => "color:#10B981;",
            "Connecting" => "color:#F59E0B;animation:spin 1s linear infinite;",
            "Reconnecting" => "color:#F59E0B;animation:spin 1s linear infinite;",
            _ => "color:#EF4444;"
        };
    }

    /// <summary>
    /// Safely process HTML content using advanced parsing service to replace Blazor DOM parser limitations
    /// [DEBUG-WORKITEM:signalcomm:impl] Enhanced with HtmlParsingService for robust parsing ;CLEANUP_OK
    /// </summary>
    private string GetSafeHtmlContent(string? htmlContent)
    {
        if (string.IsNullOrEmpty(htmlContent))
            return string.Empty;

        try
        {
            // Use the advanced HTML parsing service instead of basic validation
            var parseResult = HtmlParsingService.ParseHtml(htmlContent, ParseMode.Safe);
            
            if (!parseResult.IsValid)
            {
                Logger.LogWarning("[DEBUG-WORKITEM:signalcomm:impl] HTML parsing failed: {Error} ;CLEANUP_OK", parseResult.ErrorMessage);
                return CreateSafeErrorMessage(parseResult.ErrorMessage ?? "Unknown parsing error");
            }

            // Log any warnings from the parser
            if (parseResult.Warnings.Any())
            {
                Logger.LogInformation("[DEBUG-WORKITEM:signalcomm:impl] HTML parsing warnings: {Warnings} ;CLEANUP_OK", 
                    string.Join(", ", parseResult.Warnings));
            }

            Logger.LogInformation("[DEBUG-WORKITEM:signalcomm:impl] HTML parsed successfully by advanced parser, length: {Length} ;CLEANUP_OK", 
                parseResult.Content?.Length ?? 0);

            return parseResult.Content ?? string.Empty;
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "[DEBUG-WORKITEM:signalcomm:impl] Error in advanced HTML parsing ;CLEANUP_OK");
            return CreateSafeErrorMessage($"Parser error: {ex.Message}");
        }
    }

    /// <summary>
    /// Create a safe error message in HTML format
    /// </summary>
    private string CreateSafeErrorMessage(string message)
    {
        var timestamp = DateTime.Now.ToString("HH:mm:ss");
        return $@"<div style=""background:#FEF2F2;color:#DC2626;padding:15px;border-radius:8px;border:1px solid #FCA5A5;text-align:center;"">
<h4 style=""margin:0 0 8px 0;"">⚠️ Content Error</h4>
<p style=""margin:0;font-size:14px;"">{System.Web.HttpUtility.HtmlEncode(message)}</p>
<p style=""margin:8px 0 0 0;font-size:12px;opacity:0.8;"">Time: {timestamp} (Advanced Parser)</p>
</div>";
    }
}