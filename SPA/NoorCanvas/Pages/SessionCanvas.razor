@page "/session/canvas/{sessionToken?}"
@layout EmptyLayout
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.AspNetCore.Components.Web.HtmlRendering
@using Microsoft.AspNetCore.SignalR.Client
@using System.ComponentModel.DataAnnotations
@using System.Net.Http.Json
@using System.Text.Json.Serialization
@using System.Text.Json

@inject IHttpClientFactory HttpClientFactory
@inject IJSRuntime JSRuntime
@inject NavigationManager Navigation
@inject ILogger<SessionCanvas> Logger

<PageTitle>Session Canvas - NOOR Canvas</PageTitle>

<HeadContent>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Playfair+Display:wght@400;700;900&family=Cinzel+Decorative:wght@400;700&family=Inter:wght@400;500;600&family=Poppins:wght@400;600;700&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
</HeadContent>

<div style="background-color:#F8F5F1;display:flex;flex-direction:column;min-height:100vh;padding:1rem;">

    @if (Model?.CurrentState == SessionCanvasState.Loading)
    {
        <!-- Loading State -->
        <div style="width:100%;max-width:56rem;margin:0 auto;background-color:white;border-radius:1.5rem;padding:2rem;text-align:center;box-shadow:0 25px 50px -12px rgba(0,0,0,0.25);border:1px solid #e5e7eb;">
            
            <!-- Logo -->
            <div style="display:flex;justify-content:center;margin-bottom:1.5rem;">
                <img src="/images/branding/NC-Header.png?v=@DateTime.Now.Ticks" 
                     alt="@(Model?.LogoText ?? "NOOR Canvas")" 
                     style="max-width:150px;height:auto;" />
            </div>
            
            <div style="display:flex;align-items:center;justify-content:center;gap:1rem;margin-bottom:1.5rem;">
                <i class="fa-solid fa-circle-notch fa-spin" style="font-size:2rem;color:#D4AF37;"></i>
            </div>
            <p style="font-family:'Inter',sans-serif;font-size:1.125rem;color:#706357;margin:0;">Loading session canvas...</p>
        </div>
    }
    else if (Model?.CurrentState == SessionCanvasState.SessionNotFound)
    {
        <!-- Error State -->
        <div style="width:100%;max-width:56rem;margin:0 auto;background-color:white;border-radius:1.5rem;padding:2rem;text-align:center;box-shadow:0 25px 50px -12px rgba(0,0,0,0.25);border:1px solid #fecaca;">
            
            <!-- Logo -->
            <div style="display:flex;justify-content:center;margin-bottom:1.5rem;">
                <img src="/images/branding/NC-Header.png?v=@DateTime.Now.Ticks" 
                     alt="@(Model?.LogoText ?? "NOOR Canvas")" 
                     style="max-width:150px;height:auto;" />
            </div>
            
            <div style="display:flex;align-items:center;justify-content:center;gap:1rem;margin-bottom:1.5rem;">
                <i class="fa-solid fa-triangle-exclamation" style="font-size:2rem;color:#DC2626;"></i>
            </div>
            <p data-testid="error-message" style="font-family:'Inter',sans-serif;font-size:1.125rem;color:#706357;margin:0 0 1.5rem 0;">@(Model?.ErrorMessage ?? "Session could not be loaded. Please check your session token.")</p>
            <div style="display:flex;flex-direction:column;gap:0.75rem;">
                <button @onclick="NavigateHome" 
                        style="font-family:'Inter',sans-serif;font-size:1rem;font-weight:600;color:white;background-color:#3B82F6;padding:0.75rem 1.5rem;border-radius:0.5rem;border:none;cursor:pointer;transition:background-color 0.2s;hover:background-color:#2563EB;">
                    <i class="fa-solid fa-home" style="margin-right:0.5rem;"></i>
                    Return Home
                </button>
            </div>
        </div>
    }
    else if (Model?.CurrentState == SessionCanvasState.Loaded)
    {
        <!-- Session Canvas Content -->
        <div style="width:100%;max-width:80rem;margin:0 auto;">
            
            <!-- Header -->
            <div style="background-color:white;border-radius:1rem;padding:1.5rem 2rem;margin-bottom:1.5rem;box-shadow:0 10px 15px -3px rgba(0,0,0,0.1);border:2px solid #D4AF37;">
                <div style="display:flex;align-items:center;justify-content:between;gap:2rem;">
                    
                    <!-- Logo -->
                    <div style="flex-shrink:0;">
                        <img src="/images/branding/NC-Header.png?v=@DateTime.Now.Ticks" 
                             alt="@(Model?.LogoText ?? "NOOR Canvas")" 
                             style="max-width:120px;height:auto;" />
                    </div>
                    
                    <!-- Session Info -->
                    <div style="flex:1;text-align:center;">
                        <h1 style="font-family:'Poppins',sans-serif;font-weight:700;font-size:1.875rem;color:#006400;margin:0 0 0.5rem 0;">@(Model?.SessionName ?? "Session Canvas")</h1>
                        <div style="display:flex;align-items:center;justify-content:center;gap:1rem;font-family:'Inter',sans-serif;font-size:0.875rem;color:#706357;">
                            <span><i class="fa-solid fa-calendar" style="margin-right:0.25rem;"></i>@(Model?.SessionDate ?? "Today")</span>
                            <span><i class="fa-solid fa-clock" style="margin-right:0.25rem;"></i>@(Model?.StartTime ?? "Now")</span>
                            <span><i class="fa-solid fa-users" style="margin-right:0.25rem;"></i>@(Model?.ParticipantCount ?? 0) participants</span>
                        </div>
                    </div>
                    
                    <!-- Action Buttons -->
                    <div style="flex-shrink:0;display:flex;gap:0.75rem;">
                        <button @onclick="NavigateToWaitingRoom" 
                                style="font-family:'Inter',sans-serif;font-size:0.875rem;font-weight:600;color:#706357;background-color:#F8F5F1;padding:0.5rem 1rem;border-radius:0.375rem;border:1px solid #D4AF37;cursor:pointer;transition:all 0.2s;hover:background-color:#F3F4F6;">
                            <i class="fa-solid fa-arrow-left" style="margin-right:0.5rem;"></i>
                            Back to Waiting Room
                        </button>
                        <button @onclick="EndSession" 
                                style="font-family:'Inter',sans-serif;font-size:0.875rem;font-weight:600;color:white;background-color:#DC2626;padding:0.5rem 1rem;border-radius:0.375rem;border:none;cursor:pointer;transition:background-color 0.2s;hover:background-color:#B91C1C;">
                            <i class="fa-solid fa-stop" style="margin-right:0.5rem;"></i>
                            End Session
                        </button>
                    </div>
                </div>
            </div>
            
            <!-- Main Canvas Area -->
            <div style="display:grid;grid-template-columns:1fr 300px;gap:1.5rem;min-height:70vh;">
                
                <!-- Canvas Content Area -->
                <div style="background-color:white;border-radius:1rem;padding:2rem;box-shadow:0 10px 15px -3px rgba(0,0,0,0.1);border:2px solid #D4AF37;">
                    <div style="display:flex;align-items:center;justify-content:between;margin-bottom:1.5rem;">
                        <h2 style="font-family:'Inter',sans-serif;font-size:1.25rem;font-weight:600;color:#4B3C2B;margin:0;">Session Content</h2>
                        <div style="display:flex;gap:0.5rem;">
                            <button style="font-family:'Inter',sans-serif;font-size:0.75rem;padding:0.25rem 0.75rem;border-radius:9999px;background-color:#3B82F6;color:white;font-weight:600;border:none;cursor:pointer;transition:background-color 0.2s;hover:background-color:#2563EB;">
                                <i class="fa-solid fa-share" style="margin-right:0.25rem;"></i>
                                Share Screen
                            </button>
                            <button style="font-family:'Inter',sans-serif;font-size:0.75rem;padding:0.25rem 0.75rem;border-radius:9999px;background-color:#8B5CF6;color:white;font-weight:600;border:none;cursor:pointer;transition:background-color 0.2s;hover:background-color:#7C3AED;">
                                <i class="fa-solid fa-plus" style="margin-right:0.25rem;"></i>
                                Add Content
                            </button>
                        </div>
                    </div>
                    
                    <!-- Canvas Placeholder -->
                    <div style="border:2px dashed #D1D5DB;border-radius:0.5rem;padding:3rem;text-align:center;background-color:#F9FAFB;">
                        <div style="display:flex;flex-direction:column;align-items:center;gap:1rem;">
                            <i class="fa-solid fa-chalkboard-user" style="font-size:4rem;color:#9CA3AF;"></i>
                            <div>
                                <h3 style="font-family:'Inter',sans-serif;font-size:1.125rem;font-weight:600;color:#6B7280;margin:0 0 0.5rem 0;">Welcome to Session Canvas</h3>
                                <p style="font-family:'Inter',sans-serif;font-size:0.875rem;color:#9CA3AF;margin:0;">This is where the interactive session content will be displayed.</p>
                                <p style="font-family:'Inter',sans-serif;font-size:0.875rem;color:#9CA3AF;margin:0.25rem 0 0 0;">Shared assets from the host will appear here in real-time.</p>
                            </div>
                        </div>
                    </div>
                </div>
                
                <!-- Participants & Chat Sidebar -->
                <div style="display:flex;flex-direction:column;gap:1rem;">
                    
                    <!-- Participants Panel -->
                    <div style="background-color:white;border-radius:0.75rem;padding:1rem;box-shadow:0 4px 6px -1px rgba(0,0,0,0.1);border:1px solid #E5E7EB;flex:1;">
                        <div style="display:flex;align-items:center;gap:0.5rem;margin-bottom:0.75rem;">
                            <h3 style="font-family:'Inter',sans-serif;font-size:1rem;font-weight:600;color:#4B3C2B;margin:0;">Participants</h3>
                            <span style="background-color:#D4AF37;color:white;font-family:'Inter',sans-serif;font-size:0.75rem;font-weight:600;padding:0.125rem 0.5rem;border-radius:9999px;">@(Model?.ParticipantCount ?? 0)</span>
                        </div>
                        <div style="display:flex;flex-direction:column;gap:0.5rem;max-height:200px;overflow-y:auto;">
                            @if (Model?.Participants?.Any() == true)
                            {
                                @foreach (var participant in Model.Participants)
                                {
                                    <div style="display:flex;align-items:center;gap:0.5rem;padding:0.5rem;background-color:#F8F9FA;border-radius:0.375rem;">
                                        <div style="width:8px;height:8px;background-color:#10B981;border-radius:50%;"></div>
                                        <span style="font-family:'Inter',sans-serif;font-size:0.75rem;color:#374151;">@participant.Name</span>
                                        @if (!string.IsNullOrEmpty(participant.Flag))
                                        {
                                            <img src="@($"https://flagcdn.com/w20/{participant.Flag}.png")" alt="@($"{participant.Country} Flag")" style="height:12px;width:auto;border-radius:0.125rem;">
                                        }
                                    </div>
                                }
                            }
                            else
                            {
                                <div style="text-align:center;color:#9CA3AF;font-family:'Inter',sans-serif;font-size:0.75rem;padding:1rem 0;">
                                    No participants yet
                                </div>
                            }
                        </div>
                    </div>
                    
                    <!-- Chat Panel -->
                    <div style="background-color:white;border-radius:0.75rem;padding:1rem;box-shadow:0 4px 6px -1px rgba(0,0,0,0.1);border:1px solid #E5E7EB;flex:1;">
                        <h3 style="font-family:'Inter',sans-serif;font-size:1rem;font-weight:600;color:#4B3C2B;margin:0 0 0.75rem 0;">Session Chat</h3>
                        <div style="border:1px solid #E5E7EB;border-radius:0.375rem;padding:1rem;background-color:#F9FAFB;text-align:center;color:#9CA3AF;font-family:'Inter',sans-serif;font-size:0.75rem;">
                            <i class="fa-solid fa-comments" style="font-size:1.5rem;margin-bottom:0.5rem;display:block;"></i>
                            Chat functionality coming soon
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }
</div>

@implements IAsyncDisposable

@code {
    [Parameter] public string? SessionToken { get; set; }
    
    private SessionCanvasViewModel? Model { get; set; }
    private HubConnection? _hubConnection;
    private long? _sessionId;

    protected override async Task OnInitializedAsync()
    {
        var requestId = Guid.NewGuid().ToString("N")[..8];
        Logger.LogInformation("COPILOT-DEBUG: [{RequestId}] SessionCanvas OnInitialized - SessionToken: {SessionToken}", 
            requestId, SessionToken ?? "null");

        Model = new SessionCanvasViewModel
        {
            LogoText = "NOOR Canvas",
            CurrentState = SessionCanvasState.Loading,
            SessionName = "Loading Session...",
            SessionDate = "Today",
            StartTime = "Loading...",
            ParticipantCount = 0,
            Participants = new List<ParticipantData>()
        };

        await InitializeSessionAsync(requestId);
    }

    private async Task InitializeSessionAsync(string requestId)
    {
        try
        {
            if (string.IsNullOrEmpty(SessionToken))
            {
                Logger.LogWarning("COPILOT-DEBUG: [{RequestId}] No session token provided, redirecting to home", requestId);
                Navigation.NavigateTo("/");
                return;
            }

            Logger.LogInformation("COPILOT-DEBUG: [{RequestId}] Loading session canvas data for token: {Token}", 
                requestId, SessionToken);

            await LoadSessionDataAsync(SessionToken, requestId);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "COPILOT-DEBUG: [{RequestId}] Fatal error during session canvas initialization", requestId);
            Model!.CurrentState = SessionCanvasState.SessionNotFound;
            Model.ErrorMessage = "A critical error occurred while loading the session canvas.";
            StateHasChanged();
        }
    }

    private async Task LoadSessionDataAsync(string token, string requestId)
    {
        try
        {
            // Validate session token and get session data
            using var httpClient = HttpClientFactory.CreateClient("NoorCanvasApi");
            var apiUrl = $"api/host/session/{token}/validate";
            
            Logger.LogInformation("COPILOT-DEBUG: [{RequestId}] Validating session token via API: {ApiUrl}", requestId, apiUrl);

            var response = await httpClient.GetAsync(apiUrl);
            
            if (response.IsSuccessStatusCode)
            {
                var content = await response.Content.ReadAsStringAsync();
                Logger.LogInformation("COPILOT-DEBUG: [{RequestId}] Session validation successful: {Content}", requestId, content.Length > 200 ? content[..200] + "..." : content);

                var sessionResponse = System.Text.Json.JsonSerializer.Deserialize<SessionValidationResponse>(content, 
                    new JsonSerializerOptions { PropertyNameCaseInsensitive = true });

                if (sessionResponse?.Valid == true && sessionResponse.Session != null)
                {
                    UpdateSessionData(sessionResponse.Session);
                    _sessionId = sessionResponse.Session.SessionId;
                    
                    // Load participants
                    await LoadParticipantsAsync(requestId);
                    
                    Model!.CurrentState = SessionCanvasState.Loaded;
                    Logger.LogInformation("COPILOT-DEBUG: [{RequestId}] Session canvas loaded successfully", requestId);
                }
                else
                {
                    Model!.CurrentState = SessionCanvasState.SessionNotFound;
                    Model.ErrorMessage = "Session not found or invalid token.";
                }
            }
            else
            {
                Logger.LogWarning("COPILOT-DEBUG: [{RequestId}] Session validation failed: {StatusCode}", requestId, response.StatusCode);
                Model!.CurrentState = SessionCanvasState.SessionNotFound;
                Model.ErrorMessage = "Session not found. Please check your session token.";
            }
        }
        catch (HttpRequestException ex)
        {
            Logger.LogError(ex, "COPILOT-DEBUG: [{RequestId}] Network error during session canvas validation", requestId);
            Model!.CurrentState = SessionCanvasState.SessionNotFound;
            Model.ErrorMessage = "Unable to connect to the server. Please check your internet connection.";
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "COPILOT-DEBUG: [{RequestId}] Unexpected error during session canvas validation", requestId);
            Model!.CurrentState = SessionCanvasState.SessionNotFound;
            Model.ErrorMessage = "An unexpected error occurred while loading the session.";
        }
        
        StateHasChanged();
    }

    private void UpdateSessionData(SessionData session)
    {
        if (Model == null) return;

        Model.SessionName = session.Title ?? "Session Canvas";
        Model.SessionDate = FormatDate(session.StartTime);
        Model.StartTime = FormatTime(session.StartTime);
    }

    private async Task LoadParticipantsAsync(string requestId)
    {
        try
        {
            using var httpClient = HttpClientFactory.CreateClient("NoorCanvasApi");
            var apiUrl = $"api/participant/session/{SessionToken}/participants";
            
            var response = await httpClient.GetAsync(apiUrl);
            
            if (response.IsSuccessStatusCode)
            {
                var content = await response.Content.ReadAsStringAsync();
                Logger.LogInformation("COPILOT-DEBUG: [{RequestId}] Participants API response: {Content}", 
                    requestId, content.Length > 500 ? content[..500] + "..." : content);

                var participantsResponse = System.Text.Json.JsonSerializer.Deserialize<ParticipantsResponse>(content, 
                    new JsonSerializerOptions { PropertyNameCaseInsensitive = true });

                if (participantsResponse?.Participants != null)
                {
                    // Convert API participants to display participants
                    Model!.Participants = participantsResponse.Participants.Select(p => new ParticipantData
                    {
                        Name = p.DisplayName,
                        Country = p.Country ?? "Unknown",
                        Flag = p.CountryFlag?.ToLower() ?? ""
                    }).ToList();
                    
                    Model.ParticipantCount = Model.Participants.Count;
                    Logger.LogInformation("COPILOT-DEBUG: [{RequestId}] Loaded {Count} participants for session canvas", 
                        requestId, Model.Participants.Count);
                }
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "COPILOT-DEBUG: [{RequestId}] Error loading participants for session canvas", requestId);
        }
        
        await InvokeAsync(() => StateHasChanged());
    }

    private void NavigateHome()
    {
        Navigation.NavigateTo("/");
    }

    private void NavigateToWaitingRoom()
    {
        if (!string.IsNullOrEmpty(SessionToken))
        {
            Navigation.NavigateTo($"/session/waiting/{SessionToken}");
        }
        else
        {
            Navigation.NavigateTo("/");
        }
    }

    private Task EndSession()
    {
        // TODO: Implement session ending functionality
        Logger.LogInformation("COPILOT-DEBUG: End session requested for token: {Token}", SessionToken);
        // For now, just navigate back to waiting room
        NavigateToWaitingRoom();
        return Task.CompletedTask;
    }

    private static string FormatDate(DateTime? dateTime)
    {
        if (!dateTime.HasValue) return "Today";
        
        var date = dateTime.Value.Date;
        var today = DateTime.Today;
        
        if (date == today) return "Today";
        if (date == today.AddDays(1)) return "Tomorrow";
        
        return date.ToString("MMM dd, yyyy");
    }

    private static string FormatTime(DateTime? dateTime)
    {
        return dateTime?.ToString("h:mm tt") ?? "TBD";
    }

    public async ValueTask DisposeAsync()
    {
        // Cleanup SignalR connection if needed
        if (_hubConnection != null)
        {
            try
            {
                await _hubConnection.DisposeAsync();
            }
            catch (Exception ex)
            {
                Logger.LogWarning(ex, "COPILOT-DEBUG: Error disposing SignalR connection");
            }
        }
    }

    // ViewModel and Data Classes
    public class SessionCanvasViewModel
    {
        public string? LogoText { get; set; }
        public SessionCanvasState CurrentState { get; set; }
        public string? SessionName { get; set; }
        public string? SessionDate { get; set; }
        public string? StartTime { get; set; }
        public int ParticipantCount { get; set; }
        public List<ParticipantData>? Participants { get; set; }
        public string? ErrorMessage { get; set; }
    }

    public enum SessionCanvasState
    {
        Loading,
        Loaded,
        SessionNotFound
    }

    public class ParticipantData
    {
        public string Name { get; set; } = "";
        public string Country { get; set; } = "";
        public string Flag { get; set; } = "";
    }

    public class SessionValidationResponse
    {
        public bool Valid { get; set; }
        public int SessionId { get; set; }
        public string? Token { get; set; }
        public DateTime? ExpiresAt { get; set; }
        public SessionData? Session { get; set; }
        public ParticipantInfo? Participant { get; set; }
        public string? RequestId { get; set; }
    }

    public class SessionData
    {
        public int SessionId { get; set; }
        public string? Title { get; set; }
        public string? Description { get; set; }
        public string? Status { get; set; }
        public int ParticipantCount { get; set; }
        public int? MaxParticipants { get; set; }
        public DateTime? StartedAt { get; set; }
        public DateTime? CreatedAt { get; set; }
        public string? InstructorName { get; set; }
        
        // Computed properties for compatibility
        public DateTime? StartTime => StartedAt;
        public TimeSpan? Duration => TimeSpan.FromHours(1);
    }

    public class ParticipantInfo
    {
        public string? JoinUrl { get; set; }
        public int AccessCount { get; set; }
        public DateTime? LastAccessedAt { get; set; }
    }

    public class ParticipantsResponse
    {
        public int SessionId { get; set; }
        public string? Token { get; set; }
        public int ParticipantCount { get; set; }
        public List<ParticipantApiData>? Participants { get; set; }
        public string? RequestId { get; set; }
    }

    public class ParticipantApiData
    {
        public string UserId { get; set; } = "";
        public string DisplayName { get; set; } = "";
        public DateTime JoinedAt { get; set; }
        public string Role { get; set; } = "";
        public string? City { get; set; }
        public string? Country { get; set; }
        public string? CountryFlag { get; set; }
    }
}