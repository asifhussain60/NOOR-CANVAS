@page "/session/{sessionId}/waiting"
@using Microsoft.AspNetCore.SignalR.Client
@using Microsoft.JSInterop
@inject IJSRuntime JSRuntime
@inject NavigationManager Navigation
@inject ILogger<SessionWaiting> Logger
@inject DialogService DialogService
@inject HttpClient Http
@implements IAsyncDisposable

<div class="waiting-container">
    <div class="container">
        <div class="row justify-content-center">
            <div class="col-lg-8">
                @if (isLoading)
                {
                    <div class="text-center py-5">
                        <div class="spinner-border text-primary" role="status">
                            <span class="visually-hidden">Loading session...</span>
                        </div>
                        <p class="mt-3">Loading session information...</p>
                    </div>
                }
                else if (sessionData != null)
                {
                    <div class="waiting-card">
                        <div class="session-header text-center">
                            <i class="fas fa-clock fa-3x text-primary mb-3"></i>
                            <h2>Waiting for Session to Begin</h2>
                            <h4 class="text-primary">@sessionData.Title</h4>
                            @if (!string.IsNullOrEmpty(sessionData.Description))
                            {
                                <p class="text-muted">@sessionData.Description</p>
                            }
                        </div>

                        <div class="connection-status">
                            <div class="d-flex align-items-center justify-content-center mb-4">
                                <div class="status-indicator @GetConnectionStatusClass()"></div>
                                <span class="ms-2">@connectionStatus</span>
                            </div>
                        </div>

                        @if (sessionData.Status == "Active")
                        {
                            <div class="alert alert-success text-center">
                                <i class="fas fa-play-circle me-2"></i>
                                Session has started! Redirecting...
                            </div>
                        }
                        else
                        {
                            <div class="session-info">
                                <div class="row text-center">
                                    <div class="col-md-4">
                                        <div class="info-item">
                                            <i class="fas fa-users text-primary"></i>
                                            <h5>@sessionData.ParticipantCount</h5>
                                            <small>Participants Registered</small>
                                        </div>
                                    </div>
                                    <div class="col-md-4">
                                        <div class="info-item">
                                            <i class="fas fa-user-check text-success"></i>
                                            <h5>@connectedParticipants.Count</h5>
                                            <small>Connected Now</small>
                                        </div>
                                    </div>
                                    <div class="col-md-4">
                                        <div class="info-item">
                                            <i class="fas fa-clock text-info"></i>
                                            <h5>@GetTimeToStart()</h5>
                                            <small>Estimated Start</small>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        }

                        <div class="participant-list mt-4">
                            <h6><i class="fas fa-users me-2"></i>Connected Participants</h6>
                            <div class="participants-grid">
                                @if (connectedParticipants.Any())
                                {
                                    @foreach (var participant in connectedParticipants)
                                    {
                                        <div class="participant-item">
                                            <div class="d-flex align-items-center">
                                                <div class="participant-avatar">
                                                    <i class="fas fa-user"></i>
                                                </div>
                                                <div class="participant-info">
                                                    <strong>@participant.Name</strong>
                                                    <small class="text-muted d-block">@participant.Location</small>
                                                </div>
                                                @if (participant.UserId == CurrentUserId)
                                                {
                                                    <span class="badge bg-primary ms-auto">You</span>
                                                }
                                            </div>
                                        </div>
                                    }
                                }
                                else
                                {
                                    <div class="text-center text-muted py-3">
                                        <i class="fas fa-user-clock fa-2x mb-2"></i>
                                        <p>Waiting for other participants to connect...</p>
                                    </div>
                                }
                            </div>
                        </div>

                        <div class="waiting-tips mt-4">
                            <h6><i class="fas fa-lightbulb me-2"></i>While You Wait</h6>
                            <ul class="list-unstyled">
                                <li><i class="fas fa-check text-success me-2"></i>Ensure your device is connected to the internet</li>
                                <li><i class="fas fa-check text-success me-2"></i>Keep this page open and active</li>
                                <li><i class="fas fa-check text-success me-2"></i>The session will start automatically when the host begins</li>
                            </ul>
                        </div>

                        <div class="actions text-center mt-4">
                            <button class="btn btn-outline-secondary me-2" @onclick="RefreshSession">
                                <i class="fas fa-sync-alt"></i> Refresh
                            </button>
                            <button class="btn btn-danger" @onclick="LeaveSession">
                                <i class="fas fa-sign-out-alt"></i> Leave Session
                            </button>
                        </div>
                    </div>
                }
                else
                {
                    <div class="error-card">
                        <div class="text-center py-5">
                            <i class="fas fa-exclamation-circle fa-3x text-danger mb-3"></i>
                            <h4>Session Not Found</h4>
                            <p class="text-muted">The session you're trying to join doesn't exist or has expired.</p>
                            <button class="btn btn-primary" @onclick="GoHome">
                                <i class="fas fa-home"></i> Return to Home
                            </button>
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter] public string SessionId { get; set; } = string.Empty;
    [SupplyParameterFromQuery] public string? UserId { get; set; }

    private HubConnection? hubConnection;
    private SessionStatusData? sessionData;
    private List<ConnectedParticipant> connectedParticipants = new();
    private bool isLoading = true;
    private string connectionStatus = "Connecting...";
    private string CurrentUserId => UserId ?? "";

    protected override async Task OnInitializedAsync()
    {
        Logger.LogInformation("NOOR-INFO: Session waiting room loading for session: {SessionId}", SessionId);

        try
        {
            // Load session data
            await LoadSessionData();

            // Initialize SignalR connection
            await InitializeSignalRConnection();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "NOOR-ERROR: Failed to initialize waiting room");
            await DialogService.ShowErrorAsync("Failed to connect to session. Please try again.", "Connection Error");
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task LoadSessionData()
    {
        try
        {
            var response = await Http.GetAsync($"/api/participant/session/{SessionId}/status?userId={CurrentUserId}");
            if (response.IsSuccessStatusCode)
            {
                sessionData = await response.Content.ReadFromJsonAsync<SessionStatusData>();
                
                // If session is already active, navigate to active session
                if (sessionData?.Status == "Active")
                {
                    Logger.LogInformation("NOOR-INFO: Session already active, redirecting to active session");
                    Navigation.NavigateTo($"/session/{SessionId}/active?userId={CurrentUserId}");
                }
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "NOOR-ERROR: Failed to load session data");
        }
    }

    private async Task InitializeSignalRConnection()
    {
        try
        {
            hubConnection = new HubConnectionBuilder()
                .WithUrl(Navigation.ToAbsoluteUri("/hub/session"))
                .WithAutomaticReconnect()
                .Build();

            // Listen for SessionBegan event
            hubConnection.On<object>("SessionBegan", async (sessionBegan) =>
            {
                Logger.LogInformation("NOOR-INFO: SessionBegan event received, navigating to active session");
                await InvokeAsync(() =>
                {
                    Navigation.NavigateTo($"/session/{SessionId}/active?userId={CurrentUserId}");
                });
            });

            // Listen for SessionEnded event  
            hubConnection.On<object>("SessionEnded", async (sessionEnded) =>
            {
                Logger.LogInformation("NOOR-INFO: SessionEnded event received");
                await InvokeAsync(async () =>
                {
                    await DialogService.ShowSuccessAsync("The session has ended.", "Session Ended");
                    Navigation.NavigateTo("/");
                });
            });

            // Listen for participant join/leave events
            hubConnection.On<object>("UserJoined", async (userJoined) =>
            {
                Logger.LogDebug("NOOR-DEBUG: User joined session");
                await LoadConnectedParticipants();
                await InvokeAsync(StateHasChanged);
            });

            hubConnection.On<object>("UserLeft", async (userLeft) =>
            {
                Logger.LogDebug("NOOR-DEBUG: User left session");
                await LoadConnectedParticipants();
                await InvokeAsync(StateHasChanged);
            });

            await hubConnection.StartAsync();
            
            // Join the session group
            if (long.TryParse(SessionId, out long sessionIdLong))
            {
                await hubConnection.InvokeAsync("JoinSession", sessionIdLong, "participant");
            }

            connectionStatus = "Connected";
            Logger.LogInformation("NOOR-SUCCESS: SignalR connection established");
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "NOOR-ERROR: Failed to connect to SignalR hub");
            connectionStatus = "Connection Failed";
        }
    }

    private async Task LoadConnectedParticipants()
    {
        // Simulate loading connected participants
        // In a real implementation, this would come from SignalR or an API
        await Task.Delay(100);
    }

    private async Task RefreshSession()
    {
        isLoading = true;
        await LoadSessionData();
        isLoading = false;
    }

    private async Task LeaveSession()
    {
        var confirmed = await DialogService.ShowConfirmAsync("Are you sure you want to leave this session?", "Leave Session");
        if (confirmed)
        {
            if (hubConnection != null && long.TryParse(SessionId, out long sessionIdLong))
            {
                try
                {
                    await hubConnection.InvokeAsync("LeaveSession", sessionIdLong);
                }
                catch (Exception ex)
                {
                    Logger.LogError(ex, "NOOR-ERROR: Failed to leave session via SignalR");
                }
            }
            Navigation.NavigateTo("/");
        }
    }

    private void GoHome()
    {
        Navigation.NavigateTo("/");
    }

    private string GetConnectionStatusClass()
    {
        return connectionStatus switch
        {
            "Connected" => "bg-success",
            "Connection Failed" => "bg-danger",
            _ => "bg-warning"
        };
    }

    private string GetTimeToStart()
    {
        return "Soon"; // Placeholder - could calculate based on session start time
    }

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }

    // Models
    public class SessionStatusData
    {
        public string Title { get; set; } = string.Empty;
        public string Description { get; set; } = string.Empty;
        public string Status { get; set; } = string.Empty;
        public int ParticipantCount { get; set; }
        public int MaxParticipants { get; set; }
    }

    public class ConnectedParticipant
    {
        public string UserId { get; set; } = string.Empty;
        public string Name { get; set; } = string.Empty;
        public string Location { get; set; } = string.Empty;
    }
}

<style>
.waiting-container {
    min-height: 100vh;
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    padding: 60px 0;
}

.waiting-card {
    background: white;
    border-radius: 15px;
    box-shadow: 0 15px 35px rgba(0, 0, 0, 0.1);
    padding: 40px;
}

.session-header {
    border-bottom: 1px solid #e9ecef;
    padding-bottom: 30px;
    margin-bottom: 30px;
}

.status-indicator {
    width: 12px;
    height: 12px;
    border-radius: 50%;
}

.info-item {
    padding: 20px;
    text-align: center;
}

.info-item i {
    font-size: 2rem;
    margin-bottom: 10px;
}

.participant-item {
    background: #f8f9fa;
    border-radius: 8px;
    padding: 15px;
    margin-bottom: 10px;
}

.participant-avatar {
    width: 40px;
    height: 40px;
    background: #007bff;
    color: white;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    margin-right: 15px;
}

.waiting-tips ul li {
    margin-bottom: 8px;
}

.error-card {
    background: white;
    border-radius: 15px;
    box-shadow: 0 15px 35px rgba(0, 0, 0, 0.1);
    padding: 40px;
}
</style>
