@page "/session/waiting/{sessionToken?}"
@layout EmptyLayout
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.AspNetCore.Components.Web.HtmlRendering
@using Microsoft.AspNetCore.SignalR.Client
@using System.ComponentModel.DataAnnotations
@using System.Net.Http.Json
@using System.Text.Json.Serialization
@using NoorCanvas.Components.Development
@using NoorCanvas.Components
@using System.Timers
@using System.Globalization
@inject IHttpClientFactory HttpClientFactory
@inject IJSRuntime JSRuntime
@inject NavigationManager Navigation
@inject ILogger<SessionWaiting> Logger

<PageTitle>NoorCanvas</PageTitle>

@* All fonts and CDNs are centralized in Pages/_Host.cshtml *@
<style>
    .session-waiting-root {
        background-color: #F8F5F1;
        display: flex;
        align-items: center;
        justify-content: center;
        min-height: 100vh;
        padding: 1.5rem;
        font-family: 'Inter', sans-serif;
    }

    .session-waiting-container {
        width: 85%;
        max-width: 80rem;
        background-color: #FFFFFF;
        border-radius: 1.5rem;
        padding: 2rem;
        box-shadow: 0 25px 50px -12px rgba(0,0,0,0.25);
        border: 1px solid #E5E7EB;
        text-align: center;
    }

    .loading-state, .error-state, .network-error-state {
        width: 100%;
        padding: 2rem;
        text-align: center;
    }

    .error-state {
        border: 1px solid #fecaca;
        border-radius: 1rem;
        background-color: #fef2f2;
    }

    .network-error-state {
        border: 1px solid #fed7aa;
        border-radius: 1rem;
        background-color: #fff7ed;
    }

    .logo-container {
        display: flex;
        justify-content: center;
    }

    .logo-img {
        max-width: 300px;
        height: auto;
        margin: 0 auto;
    }

    .logo-img-small {
        max-width: 150px;
        height: auto;
        margin: 0 auto;
    }

    .loading-header, .error-header, .network-error-header {
        display: flex;
        align-items: center;
        justify-content: center;
        gap: 1rem;
        margin-bottom: 1.5rem;
    }

    .loading-title {
        font-family: 'Poppins', sans-serif;
        font-weight: 700;
        font-size: 1.875rem;
        color: #006400;
        margin: 0;
    }

    .error-title {
        font-family: 'Poppins', sans-serif;
        font-weight: 700;
        font-size: 1.875rem;
            color: #ef4444;
            margin: 0;
        }

        .network-error-title {
            font-family: 'Poppins', sans-serif;
            font-weight: 700;
            font-size: 1.875rem;
            color: #f97316;
            margin: 0;
        }

        .loading-spinner {
            font-size: 2.25rem;
            color: #006400;
        }

        .error-icon {
            font-size: 2.25rem;
            color: #ef4444;
        }

        .network-error-icon {
            font-size: 2.25rem;
            color: #f97316;
        }

        .description-text {
            font-family: 'Inter', sans-serif;
            font-size: 1.125rem;
            color: #706357;
            margin: 0;
        }

        .error-message {
            font-family: 'Inter', sans-serif;
            font-size: 1.125rem;
            color: #706357;
            margin: 0 0 1.5rem 0;
        }

        .button-container {
            display: flex;
            flex-direction: column;
            gap: 0.75rem;
        }

        .retry-button {
            width: 100%;
            padding: 0.75rem 1.5rem;
            background-color: #006400;
            color: white;
            font-weight: 600;
            border-radius: 0.75rem;
            border: none;
            cursor: pointer;
            transition: background-color 0.2s;
        }

        .home-button {
            width: 100%;
            padding: 0.75rem 1.5rem;
            background-color: #6b7280;
            color: white;
            font-weight: 600;
            border-radius: 0.75rem;
            border: none;
            cursor: pointer;
            transition: background-color 0.2s;
        }

        .main-content {
            width: 100%;
        }

        .session-header {
            text-align: center;
        }

        .session-title {
            font-family: 'Poppins', sans-serif;
            font-weight: 700;
            font-size: 2.5rem;
            color: #006400;
            margin: 0 0 0.5rem 0;
        }

        .session-info-panel {
background-color: #effff9;
    border-radius: 1.5rem;
    border: 2px solid #006400;
    padding: 2rem 3rem;
    margin: 0rem auto 3rem auto;
    max-width: 50rem;
    box-shadow: 0 10px 25px -12px rgba(0, 0, 0, 0.15);
    text-align: center;
        }

        .session-info-title {
            font-family: 'Poppins', sans-serif;
            font-weight: 700;
            font-size: 2.25rem;
            color: #006400;
            margin: 0 0 1rem 0;
            line-height: 1.2;
        }

        .session-info-description {
            font-family: 'Inter', sans-serif;
            font-size: 1.125rem;
            color: #4B3C2B;
            line-height: 1.6;
            margin: 0;
            text-align: center;
        }

        .panels-container {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 1.5rem;
            margin-bottom: 1.5rem;
        }

        .waiting-room-panel {
            background-color: white;
            border-radius: 1rem;
            border: 2px solid #D4AF37;
            padding: 1rem 1.5rem;
            box-shadow: inset 0 2px 4px 0 rgba(0,0,0,0.06);
            display: flex;
            flex-direction: column;
        }

        .waiting-room-title {
            font-family: 'Inter', sans-serif;
            font-size: 1.125rem;
            font-weight: 600;
            color: #4B3C2B;
            margin: 0 0 0.5rem 0;
        }

        .session-details-grid {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 0.75rem;
            background-color: white;
            padding: 0.75rem;
            border-radius: 0.5rem;
            flex: 1;
        }

        .detail-item {
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }

        .detail-icon-container {
            padding: 0.5rem;
            background-color: #E5D7A9;
            border-radius: 0.5rem;
        }

        .detail-icon {
            color: #B8960C;
            font-size: 1rem;
        }

        .detail-content {
            text-align: left;
        }

        .detail-label {
            font-family: 'Inter', sans-serif;
            font-size: 0.625rem;
            color: #706357;
            margin: 0;
        }

        .detail-value {
            font-family: 'Inter', sans-serif;
            font-weight: 600;
            color: #4B3C2B;
            font-size: 1rem;
            margin: 0;
        }

        .timer-panel {
            text-align: center;
            border-radius: 1rem;
            padding: 1.5rem;
            background-color: white;
            box-shadow: 0 10px 15px -3px rgba(0,0,0,0.1);
            border: 2px solid #D4AF37;
            display: flex;
            flex-direction: column;
            justify-content: center;
        }

        .timer-status {
            font-family: 'Inter', sans-serif;
            font-size: 1.125rem;
            font-weight: 600;
            color: #4B3C2B;
            margin: 0 0 0.5rem 0;
        }

        .countdown-display {
            font-size: 3rem;
            font-weight: 700;
            color: #006400;
            margin: 0.5rem 0 1rem 0;
            font-family: 'Inter', sans-serif;
        }

        .progress-bar-container {
            height: 0.5rem;
            background-color: #e5e7eb;
            border-radius: 9999px;
            overflow: hidden;
            margin-bottom: 0.5rem;
        }

        .progress-bar-fill {
            height: 100%;
            background-color: #006400;
            transition: width 0.5s ease-in-out;
        }

        .progress-bar-full {
            height: 100%;
            background-color: #006400;
            width: 100%;
        }

        .timer-description {
            font-family: 'Inter', sans-serif;
            font-size: 0.875rem;
            color: #706357;
            margin: 0;
        }

        .participants-panel {
            background-color: white;
            padding: 3rem;
            border-radius: 0.75rem;
            box-shadow: inset 0 2px 4px 0 rgba(0,0,0,0.06);
            border: 2px solid #D4AF37;
        }

        .participants-header {
            display: flex;
            align-items: center;
            justify-content: space-between;
            margin-bottom: 0.5rem;
        }

        .participants-title-container {
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }

.participants-title {
    font-family: 'Inter', sans-serif;
    font-size: 1.5rem;
    font-weight: 600;
    color: #006400;
    margin: 0;
}

        .participants-icon {
            font-size: 1.5rem;
            color: #706357;
        }

        .sort-buttons {
            display: flex;
            gap: 0.5rem;
        }

        .sort-button {
            font-family: 'Inter', sans-serif;
            font-size: 0.75rem;
            padding: 0.25rem 0.5rem;
            border-radius: 9999px;
            background-color: #F8F5F1;
            color: #4B3C2B;
            font-weight: 600;
            border: none;
            cursor: pointer;
            transition: background-color 0.2s;
        }

        .sort-button:hover {
            background-color: #e5e7eb;
        }

        .participants-list {
            display: grid;
            grid-template-columns: repeat(3, 1fr);
            gap: 0.5rem;
            max-height: 12rem;
            overflow-y: auto;
            padding-right: 0.5rem;
        }

        /* Responsive grid columns */
        @@media (min-width: 1200px) {
            .participants-list {
                grid-template-columns: repeat(4, 1fr);
            }
        }

        @@media (max-width: 768px) {
            .participants-list {
                grid-template-columns: repeat(2, 1fr);
            }
        }

        .participant-item {
            display: flex;
            align-items: center;
            gap: 0.75rem;
            color: #706357;
            margin-top: 1rem;
        }

        .participant-flag {
            height: 1.5rem;
            width: auto;
            border-radius: 0.125rem;
            border: 1px solid #d1d5db;
        }

        .participant-name {
            font-family: 'Inter', sans-serif;
            font-size: 1.125rem;
            font-weight: 500;
        }

        .no-participants {
            grid-column: 1 / -1;
            text-align: center;
            color: #706357;
            font-family: 'Inter', sans-serif;
            font-size: 0.875rem;
            padding: 1rem 0;
        }

        .connection-alert {
            background: linear-gradient(135deg, #fef3c7, #fde68a);
            border: 3px solid #f59e0b;
            border-radius: 1.5rem;
            padding: 1.5rem;
            margin-top: 2rem;
            box-shadow: 0 10px 20px rgba(245,158,11,0.2);
        }

        .connection-alert-content {
            display: flex;
            align-items: center;
            gap: 1rem;
            justify-content: center;
        }

        .connection-alert-icon {
            padding: 0.75rem;
            background: linear-gradient(135deg, #f59e0b, #d97706);
            border-radius: 50%;
            color: white;
        }

        .connection-alert-icon i {
            font-size: 1.5rem;
        }

        .connection-alert-text {
            flex: 1;
        }

        .connection-alert-message {
            font-family: 'Inter', sans-serif;
            font-size: 1rem;
            color: #92400e;
            margin: 0;
            font-weight: 600;
        }

        .connection-retry-button {
            background: linear-gradient(135deg, #f59e0b, #d97706);
            color: white;
            border: none;
            padding: 0.75rem 1.5rem;
            border-radius: 1rem;
            font-family: 'Inter', sans-serif;
            font-weight: 600;
            cursor: pointer;
            transition: transform 0.2s;
            box-shadow: 0 4px 6px rgba(245,158,11,0.3);
        }

        .test-button {
            background: linear-gradient(135deg, #dc2626, #b91c1c);
            color: white;
            border: none;
            padding: 0.75rem 1.5rem;
            border-radius: 1rem;
            font-family: 'Inter', sans-serif;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.2s;
            box-shadow: 0 4px 6px rgba(220,38,38,0.3);
            font-size: 0.875rem;
        }

        .test-button:hover {
            background: linear-gradient(135deg, #b91c1c, #991b1b);
            transform: translateY(-1px);
            box-shadow: 0 6px 8px rgba(220,38,38,0.4);
        }

        @@keyframes spin {
            from { transform: rotate(0deg); }
            to { transform: rotate(360deg); }
        }
</style>

<!-- Root container matching HostLanding.razor structure -->
<div class="session-waiting-root">
    
    <!-- Main content container -->
    <div class="session-waiting-container">

        @if (Model?.CurrentState == SessionWaitingState.Loading)
        {
            <!-- Loading State -->
            <div class="loading-state">
                <div class="loading-header">
                    <i class="fa-solid fa-spinner fa-spin loading-spinner"></i>
                    <h1 class="loading-title">Loading Session...</h1>
                </div>
                <p class="description-text">Please wait while we prepare your session.</p>
            </div>
        }
        else if (Model?.CurrentState == SessionWaitingState.SessionNotFound || Model?.CurrentState == SessionWaitingState.InvalidToken)
        {
            <!-- Error State -->
            <div class="error-state">
            <div class="error-header">
                <i class="fa-solid fa-exclamation-triangle error-icon"></i>
                <h1 class="error-title">Session Error</h1>
            </div>
            <p data-testid="error-message" class="error-message">@(Model?.ErrorMessage ?? "Session could not be loaded. Please check your session token.")</p>
            <div class="button-container">
                <button @onclick="RetryLoadSession" class="retry-button">
                    <i class="fa-solid fa-refresh" style="margin-right:0.5rem;"></i>
                    Try Again
                </button>
                <button @onclick="NavigateHome" class="home-button">
                    <i class="fa-solid fa-home" style="margin-right:0.5rem;"></i>
                    Return Home
                </button>
            </div>
        </div>
        }
        else if (Model?.CurrentState == SessionWaitingState.NetworkError)
        {
            <!-- Network Error State -->
            <div class="network-error-state">
            <div class="network-error-header">
                <i class="fa-solid fa-wifi network-error-icon"></i>
                <h1 class="network-error-title">Connection Error</h1>
            </div>
            <p class="error-message">Unable to connect to the server. Please check your internet connection.</p>
            <button @onclick="RetryLoadSession" class="retry-button">
                <i class="fa-solid fa-refresh" style="margin-right:0.5rem;"></i>
                Retry Connection
            </button>
        </div>
        }
        else if (Model?.CurrentState == SessionWaitingState.Loaded)
        {
            <!-- Main Waiting Room Content - Side by Side Layout -->
            <div class="main-content">
            
            <!-- Logo -->
            <div class="session-header">
                <div class="logo-container">
                    <img src="/images/NoorCanvas.png?v=20250924" 
                         alt="@(Model?.LogoText ?? "NOOR Canvas")" 
                         class="logo-img" />
                </div>
            </div>

            <!-- Centered Session Info Panel -->
            <div class="session-info-panel">
                <h1 class="session-info-title">@(Model?.SessionName ?? "Loading...")</h1>
                @if (!string.IsNullOrEmpty(Model?.SessionDescription))
                {
                    <p class="session-info-description">@Model.SessionDescription</p>
                }
            </div>

            <!-- Side-by-Side Panels Container: Waiting Room & Session Timer -->
            <div class="panels-container">
                
                <!-- Left Panel: Waiting Room Details -->
                <div class="waiting-room-panel">
                    <!-- Session Details Grid -->
                    <div class="session-details-grid">
                        <!-- Date -->
                        <div class="detail-item">
                            <div class="detail-icon-container">
                                <i class="fa-solid fa-calendar-days detail-icon"></i>
                            </div>
                            <div class="detail-content">
                                <p class="detail-label">Date</p>
                                <p class="detail-value">@(Model?.SessionDate ?? "Today")</p>
                            </div>
                        </div>
                        
                        <!-- Start Time -->
                        <div class="detail-item">
                            <div class="detail-icon-container">
                                <i class="fa-solid fa-clock detail-icon"></i>
                            </div>
                            <div class="detail-content">
                                <p class="detail-label">Start Time</p>
                                <p class="detail-value">@(Model?.StartTime ?? "2:00 PM EST")</p>
                            </div>
                        </div>
                        
                        <!-- Duration -->
                        <div class="detail-item">
                            <div class="detail-icon-container">
                                <i class="fa-solid fa-hourglass-half detail-icon"></i>
                            </div>
                            <div class="detail-content">
                                <p class="detail-label">Duration</p>
                                <p class="detail-value">@(Model?.SessionDuration ?? "Loading...")</p>
                            </div>
                        </div>
                        
                        <!-- Instructor -->
                        <div class="detail-item">
                            <div class="detail-icon-container">
                                <i class="fa-solid fa-user-tie detail-icon"></i>
                            </div>
                            <div class="detail-content">
                                <p class="detail-label">Instructor</p>
                                <p class="detail-value">@(Model?.InstructorName ?? "Loading...")</p>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Right Panel: Session Timer -->
                <div class="timer-panel">
                @if (Model?.SessionStarted == true)
                {
                    <p class="timer-status">Waiting For Host...</p>
                    <div class="countdown-display">
                        <i class="fa-solid fa-clock" style="color: #006400;"></i>
                    </div>
                    <div class="progress-bar-container">
                        <div class="progress-bar-full"></div>
                    </div>
                    <p class="timer-description">Waiting for host to begin the session.</p>
                }
                else
                {
                    <p class="timer-status">Session begins in:</p>
                    <div data-testid="countdown-display" class="countdown-display">@(Model?.FormattedTime ?? "00:00")</div>
                    <div data-testid="progress-bar" class="progress-bar-container">
                        <div class="progress-bar-fill" style="width:@(Model?.Progress ?? 0)%;"></div>
                    </div>
                    <p class="timer-description">@(Model?.StatusMessage ?? "Waiting for host to begin the session.")</p>
                }

                @* Start Session Button removed - Issue-129: Should not be visible in participant waiting room *@
                </div>
            </div>

            <!-- Participants Panel -->
            <div class="participants-panel">
                <div class="participants-header">
                    <div class="participants-title-container">
                        <h2 class="participants-title">Participants (@(Model?.Participants?.Count ?? 0))</h2>
                        <i class="fa-solid fa-users participants-icon"></i>
                    </div>
                    <div class="sort-buttons">
                        <button @onclick="SortByName" class="sort-button">Sort by Name</button>
                        <button @onclick="SortByCountry" class="sort-button">Sort by Country</button>
                    </div>
                </div>
                <div data-testid="participants-list" class="participants-list">
                    @if (Model?.Participants?.Any() == true)
                    {
                        @foreach (var p in Model.Participants)
                        {
                            <div class="participant-item">
                                <FlagIcon CountryIso2="@p.Flag" 
                                         CountryName="@p.Country" 
                                         DataTestId="participant-flag"
                                         Style="height:1.5rem;width:auto;border-radius:0.125rem;border:1px solid #d1d5db;" />
                                <span class="participant-name">@p.Name</span>
                            </div>
                        }
                    }
                    else
                    {
                        <div class="no-participants">
                            No participants yet. You're the first!
                        </div>
                    }
                </div>
            </div>



            <!-- Connection Status Alert -->
            @if (Model?.CurrentState == SessionWaitingState.ConnectionIssue)
            {
                <div class="connection-alert">
                    <div class="connection-alert-content">
                        <div class="connection-alert-icon">
                            <i class="fa-solid fa-exclamation-triangle"></i>
                        </div>
                        <div class="connection-alert-text">
                            <p class="connection-alert-message">Connection unstable. Updates may be delayed.</p>
                        </div>
                        <button @onclick="RetryConnection" class="connection-retry-button">
                            <i class="fa-solid fa-refresh" style="margin-right:0.5rem;"></i>Retry
                        </button>
                    </div>
                </div>
            }

            <!-- Development Testing Panel -->
            <DevPanel Title="Test Panel" 
                      Description="Volume testing tools for UI validation with large participant counts" 
                      IsExpandedDefault="false">
                <div style="text-align: center;">
                    <button @onclick="FloodParticipantList" class="test-button">
                        <i class="fa-solid fa-users" style="margin-right:0.5rem;"></i>
                        Add 50 Random Participants
                    </button>
                    <p style="margin-top: 0.5rem; font-size: 0.8rem; color: #6b7280;">
                        Tests UI performance and layout with high participant volume
                    </p>
                </div>
            </DevPanel>
        </div>
        }
    </div>
</div>



@implements IAsyncDisposable

@code {
    [Parameter] public string? SessionToken { get; set; }
    
    private SessionWaitingViewModel? Model { get; set; }
    private System.Timers.Timer? _countdownTimer;
    private System.Timers.Timer? _participantUpdateTimer;
    private HubConnection? _hubConnection;
    private DateTime _sessionStartTime;
    private int _countdownDurationMs = 300000; // 5 minutes default
    private int _retryAttempts = 0;
    private const int MaxRetryAttempts = 3;
    private long? _sessionId;
    


    protected override async Task OnInitializedAsync()
    {
        var requestId = Guid.NewGuid().ToString("N")[..8];
        Logger.LogInformation("NOOR-DEBUG: [{RequestId}] SessionWaiting OnInitialized - SessionToken: {SessionToken}", 
            requestId, SessionToken ?? "null");

        Model = new SessionWaitingViewModel
        {
            LogoText = "NOOR Canvas",
            CurrentState = SessionWaitingState.Loading,
            SessionName = "Loading Session...",
            SessionDate = "Today",
            StartTime = "Loading...",
            SessionDuration = "Loading...",
            InstructorName = "Loading...",
            FormattedTime = "00:00",
            Progress = 0,
            StatusMessage = "Preparing session...",
            Participants = new List<ParticipantData>(),
            SessionStarted = false
        };

        await InitializeSessionAsync(requestId);
    }

    private async Task InitializeSessionAsync(string requestId)
    {
        try
        {
            if (string.IsNullOrEmpty(SessionToken))
            {
                Logger.LogWarning("NOOR-DEBUG: [{RequestId}] No session token provided", requestId);
                Model!.CurrentState = SessionWaitingState.InvalidToken;
                Model.ErrorMessage = "No session token provided. Please use a valid session link.";
                StateHasChanged();
                return;
            }

            Logger.LogInformation("NOOR-DEBUG: [{RequestId}] Loading session data for token: {Token}", 
                requestId, SessionToken);

            // Only handle real session tokens - no mock/demo data
            if (!string.IsNullOrEmpty(SessionToken))
            {
                await LoadSessionDataAsync(SessionToken, requestId);
                if (Model?.CurrentState == SessionWaitingState.Loaded)
                {
                    InitializeTimers();
                    await LoadParticipantsAsync(requestId);
                }
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "NOOR-DEBUG: [{RequestId}] Fatal error during session initialization", requestId);
            Model!.CurrentState = SessionWaitingState.CriticalError;
            Model.ErrorMessage = "A critical error occurred while loading the session.";
            StateHasChanged();
        }
    }

    private async Task LoadSessionDataAsync(string token, string requestId)
    {
        try
        {
            Model!.CurrentState = SessionWaitingState.Loading;
            StateHasChanged();

            using var httpClient = HttpClientFactory.CreateClient();
            httpClient.BaseAddress = new Uri("https://localhost:9091/");
            var response = await httpClient.GetAsync($"api/participant/session/{token}/validate");
            
            Logger.LogInformation("NOOR-DEBUG: [{RequestId}] Session validation API response: {StatusCode}", 
                requestId, response.StatusCode);

            if (response.IsSuccessStatusCode)
            {
                var content = await response.Content.ReadAsStringAsync();
                var validationResult = System.Text.Json.JsonSerializer.Deserialize<SessionValidationResponse>(content, 
                    new System.Text.Json.JsonSerializerOptions { PropertyNameCaseInsensitive = true });

                if (validationResult?.Valid == true && validationResult.Session != null)
                {
                    Logger.LogInformation("NOOR-DEBUG: [{RequestId}] Session validation successful - SessionID: {SessionId}, Title: {Title}", 
                        requestId, validationResult.Session.SessionId, validationResult.Session.Title);

                    UpdateSessionData(validationResult.Session);
                    Model.CurrentState = SessionWaitingState.Loaded;
                    _retryAttempts = 0; // Reset retry counter on success
                    
                    // Store session ID for SignalR integration
                    _sessionId = validationResult.Session.SessionId;
                    
                    // Initialize SignalR connection for real-time participant updates
                    await InitializeSignalRConnection(requestId);
                }
                else
                {
                    Logger.LogWarning("NOOR-DEBUG: [{RequestId}] Session validation returned invalid result", requestId);
                    Model.CurrentState = SessionWaitingState.InvalidToken;
                    Model.ErrorMessage = "Invalid session token. Please check your session link.";
                }
            }
            else if (response.StatusCode == System.Net.HttpStatusCode.NotFound)
            {
                Model.CurrentState = SessionWaitingState.SessionNotFound;
                Model.ErrorMessage = "Session not found. The session may have been canceled or expired.";
            }
            else
            {
                Logger.LogError("NOOR-DEBUG: [{RequestId}] Session validation failed with status: {StatusCode}", 
                    requestId, response.StatusCode);
                Model.CurrentState = SessionWaitingState.ApiError;
                Model.ErrorMessage = $"Server error ({response.StatusCode}). Please try again later.";
            }
        }
        catch (HttpRequestException ex)
        {
            Logger.LogError(ex, "NOOR-DEBUG: [{RequestId}] Network error during session validation", requestId);
            Model!.CurrentState = SessionWaitingState.NetworkError;
            Model.ErrorMessage = "Network error. Please check your internet connection.";
        }
        catch (TaskCanceledException ex)
        {
            Logger.LogError(ex, "NOOR-DEBUG: [{RequestId}] Request timeout during session validation", requestId);
            Model!.CurrentState = SessionWaitingState.Timeout;
            Model.ErrorMessage = "Request timed out. Please try again.";
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "NOOR-DEBUG: [{RequestId}] Unexpected error during session validation", requestId);
            Model!.CurrentState = SessionWaitingState.CriticalError;
            Model.ErrorMessage = "An unexpected error occurred. Please try again.";
        }
        
        StateHasChanged();
    }

    private void UpdateSessionData(SessionWaitingData session)
    {
        if (Model == null) return;

        var requestId = Guid.NewGuid().ToString("N")[..8];

        // ISSUE-FIXED: Use current time + offset for waiting room timer instead of historical KSESSIONS date
        // For waiting rooms, we want a countdown based on current time, not historical session data
        DateTime calculatedStartTime;
        
        // Check if session has actually started (status check)
        bool sessionAlreadyStarted = session.Status?.Equals("Started", StringComparison.OrdinalIgnoreCase) == true ||
                                   session.Status?.Equals("Live", StringComparison.OrdinalIgnoreCase) == true;
        
        if (sessionAlreadyStarted)
        {
            // Session has started - show immediate start
            calculatedStartTime = DateTime.Now;
            Logger.LogInformation("NOOR-DEBUG-TIME: [{RequestId}] Session already started - using immediate start", requestId);
        }
        else
        {
            // Waiting room: Use current time + 5 minutes for demonstration countdown
            calculatedStartTime = DateTime.Now.AddMinutes(5);
            Logger.LogInformation("NOOR-DEBUG-TIME: [{RequestId}] Waiting room mode - using current time + 5 minutes: {StartTime}", requestId, calculatedStartTime);
        }
        
        // Now that we have calculatedStartTime, update the model
        Model.SessionName = session.Title ?? "Unknown Session";
        Model.SessionDescription = session.Description ?? "";
        // ISSUE-FIXED: Show current date for waiting rooms instead of historical KSESSIONS date
        Model.SessionDate = FormatDate(DateTime.Now); // Use current date for waiting room display
        Model.StartTime = FormatTime(calculatedStartTime); // Use calculated start time
        Model.SessionDuration = FormatDuration(session.Duration);
        Model.InstructorName = session.InstructorName ?? "Loading...";
        
        _sessionStartTime = calculatedStartTime;
        var currentTime = DateTime.Now;
        _countdownDurationMs = (int)(_sessionStartTime - currentTime).TotalMilliseconds;
        
        if (_countdownDurationMs <= 0)
        {
            Model.SessionStarted = true;
            Model.StatusMessage = "Session is ready to begin!";
        }
    }

    private async Task LoadParticipantsAsync(string requestId)
    {
        try
        {
            Logger.LogInformation("NOOR-DEBUG-UI: [{RequestId}] Starting LoadParticipantsAsync with SessionToken: {SessionToken}", 
                requestId, SessionToken);
            
            using var httpClient = HttpClientFactory.CreateClient("default");
            httpClient.BaseAddress = new Uri("https://localhost:9091/");
            
            var apiUrl = $"api/participant/session/{SessionToken}/participants";
            Logger.LogInformation("NOOR-DEBUG-UI: [{RequestId}] Making API call to: {ApiUrl}", requestId, apiUrl);
            
            var response = await httpClient.GetAsync(apiUrl);
            
            Logger.LogInformation("NOOR-DEBUG-UI: [{RequestId}] API response status: {StatusCode}", 
                requestId, response.StatusCode);
            
            if (response.IsSuccessStatusCode)
            {
                var content = await response.Content.ReadAsStringAsync();
                Logger.LogInformation("NOOR-DEBUG: [{RequestId}] Participants API response: {Content}", 
                    requestId, content);
                
                var participantsResponse = System.Text.Json.JsonSerializer.Deserialize<ParticipantsResponse>(content, 
                    new System.Text.Json.JsonSerializerOptions { PropertyNameCaseInsensitive = true });

                if (participantsResponse?.Participants != null)
                {
                    // COPILOT-DEBUG: Issue-130 Fix - Add participants instead of replacing entire list
                    Logger.LogInformation("COPILOT-DEBUG: [{RequestId}] Before processing - Current participant count: {CurrentCount}", 
                        requestId, Model!.Participants?.Count ?? 0);
                    
                    // Initialize participants list if null
                    if (Model!.Participants == null)
                    {
                        Model!.Participants = new List<ParticipantData>();
                    }

                    // Convert API participants to display participants (with database-driven flag codes)
                    var newParticipants = participantsResponse.Participants.Select(p => new ParticipantData
                    {
                        Name = p.DisplayName,
                        Country = p.Country ?? "Unknown",
                        Flag = p.CountryFlag ?? "un" // Database-driven flag code from API
                    }).ToList();

                    // COPILOT-DEBUG: Log detailed flag information for each participant
                    foreach (var p in newParticipants)
                    {
                        Logger.LogInformation("COPILOT-DEBUG: [{RequestId}] Participant '{Name}' -> Country: '{Country}', Flag: '{Flag}'", 
                            requestId, p.Name, p.Country, p.Flag);
                    }

                    // COPILOT-DEBUG: Add only new participants that don't already exist
                    var existingNames = Model.Participants.Select(p => p.Name).ToHashSet();
                    var participantsToAdd = newParticipants.Where(p => !existingNames.Contains(p.Name)).ToList();
                    
                    Logger.LogInformation("COPILOT-DEBUG: [{RequestId}] API returned {ApiCount} participants, {NewCount} are new, {ExistingCount} already exist", 
                        requestId, newParticipants.Count, participantsToAdd.Count, newParticipants.Count - participantsToAdd.Count);
                    
                    // Add new participants to existing list
                    Model.Participants.AddRange(participantsToAdd);
                    
                    Logger.LogInformation("COPILOT-DEBUG: [{RequestId}] After processing - Final participant count: {FinalCount}", 
                        requestId, Model.Participants.Count);
                }
                else
                {
                    Model!.Participants = new List<ParticipantData>();
                    Logger.LogInformation("NOOR-DEBUG: [{RequestId}] No participants returned from API", requestId);
                }
            }
            else
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                Logger.LogError("NOOR-DEBUG: [{RequestId}] Failed to load participants: {StatusCode} - {ErrorContent}", 
                    requestId, response.StatusCode, errorContent);
                
                // Only use real data - no fallback to demo data
                Model!.Participants = new List<ParticipantData>();
                Logger.LogError("NOOR-DEBUG: [{RequestId}] Participants API call failed - Token: {Token}, URL: {Url}, Status: {Status} - NO FALLBACK USED", 
                    requestId, SessionToken, $"api/participant/session/{SessionToken}/participants", response.StatusCode);
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "NOOR-DEBUG: [{RequestId}] Error loading participants - NO FALLBACK USED", requestId);
            // Only use real data - no fallback to demo data
            Model!.Participants = new List<ParticipantData>();
        }
        
        await InvokeAsync(() => StateHasChanged());
    }

    // GetCountryFlag method removed - now using database-driven flag codes from KSESSIONS.Countries table

    private async Task InitializeSignalRConnection(string requestId)
    {
        try
        {
            if (_sessionId == null)
            {
                Logger.LogWarning("NOOR-SIGNALR: [{RequestId}] Cannot initialize SignalR - session ID is null", requestId);
                return;
            }

            Logger.LogInformation("NOOR-SIGNALR: [{RequestId}] Initializing SignalR connection for session {SessionId}", 
                requestId, _sessionId);

            // Create SignalR connection to SessionHub
            _hubConnection = new HubConnectionBuilder()
                .WithUrl(Navigation.ToAbsoluteUri("/hub/session"))
                .WithAutomaticReconnect()
                .Build();

            // Handle real-time participant events
            _hubConnection.On<object>("UserJoined", async (eventData) =>
            {
                var logRequestId = Guid.NewGuid().ToString("N")[..8];
                Logger.LogInformation("NOOR-SIGNALR: [{RequestId}] UserJoined event received: {EventData}", 
                    logRequestId, System.Text.Json.JsonSerializer.Serialize(eventData));
                
                // Refresh participants immediately when someone joins
                await InvokeAsync(async () =>
                {
                    await LoadParticipantsAsync(logRequestId);
                    StateHasChanged();
                });
            });

            _hubConnection.On<object>("UserLeft", async (eventData) =>
            {
                var logRequestId = Guid.NewGuid().ToString("N")[..8];
                Logger.LogInformation("NOOR-SIGNALR: [{RequestId}] UserLeft event received: {EventData}", 
                    logRequestId, System.Text.Json.JsonSerializer.Serialize(eventData));
                
                // Refresh participants immediately when someone leaves
                await InvokeAsync(async () =>
                {
                    await LoadParticipantsAsync(logRequestId);
                    StateHasChanged();
                });
            });

            _hubConnection.On<object>("ParticipantJoined", async (participantData) =>
            {
                var logRequestId = Guid.NewGuid().ToString("N")[..8];
                Logger.LogInformation("NOOR-SIGNALR: [{RequestId}] ParticipantJoined event received: {ParticipantData}", 
                    logRequestId, System.Text.Json.JsonSerializer.Serialize(participantData));
                
                // Refresh participants immediately when someone registers
                await InvokeAsync(async () =>
                {
                    await LoadParticipantsAsync(logRequestId);
                    StateHasChanged();
                });
            });

            // Listen for session start events to automatically navigate to canvas
            _hubConnection.On<object>("SessionBegan", async (sessionData) =>
            {
                var logRequestId = Guid.NewGuid().ToString("N")[..8];
                Logger.LogInformation("NOOR-SIGNALR: [{RequestId}] SessionBegan event received - navigating to canvas: {SessionData}", 
                    logRequestId, System.Text.Json.JsonSerializer.Serialize(sessionData));
                
                // Navigate all waiting users to session canvas
                await InvokeAsync(() =>
                {
                    if (!string.IsNullOrEmpty(SessionToken))
                    {
                        Logger.LogInformation("COPILOT-DEBUG: [{RequestId}] SessionWaiting navigating to canvas with USER TOKEN: {Token} (length: {Length})", 
                            logRequestId, SessionToken, SessionToken.Length);
                        Navigation.NavigateTo($"/session/canvas/{SessionToken}");
                    }
                    else
                    {
                        Logger.LogWarning("NOOR-SIGNALR: [{RequestId}] Cannot navigate to canvas - SessionToken is null", logRequestId);
                    }
                });
            });



            // Start the connection
            await _hubConnection.StartAsync();
            Logger.LogInformation("NOOR-SIGNALR: [{RequestId}] SignalR connection started successfully", requestId);

            // COPILOT-DEBUG: ISSUE FIX - Join token-based group instead of session-based group
            // This ensures all users with the same UserToken see each other immediately
            var tokenGroup = $"usertoken_{SessionToken}";
            await _hubConnection.SendAsync("JoinGroup", tokenGroup);
            Logger.LogInformation("COPILOT-DEBUG: [{RequestId}] ISSUE FIX - Joined token-based group '{TokenGroup}' for real-time participant sync", 
                requestId, tokenGroup);
            
            // Also join session group for backward compatibility with other events
            await _hubConnection.SendAsync("JoinSession", _sessionId, "participant");
            Logger.LogInformation("NOOR-SIGNALR: [{RequestId}] Joined session group {SessionId} for compatibility", requestId, _sessionId);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "NOOR-SIGNALR: [{RequestId}] Failed to initialize SignalR connection", requestId);
            // SignalR failure shouldn't break the component - we'll fallback to polling
        }
    }

    private void InitializeTimers()
    {
        // Countdown timer
        _countdownTimer = new System.Timers.Timer(1000); // Update every second
        _countdownTimer.Elapsed += UpdateCountdown;
        _countdownTimer.Enabled = true;

        // Participant update timer - now fallback only (5 minutes) since we have real-time SignalR updates
        _participantUpdateTimer = new System.Timers.Timer(300000); // Update every 5 minutes as fallback
        _participantUpdateTimer.Elapsed += async (s, e) => await UpdateParticipants();
        _participantUpdateTimer.Enabled = true;
    }

    private void UpdateCountdown(object? source, ElapsedEventArgs e)
    {
        if (Model == null || Model.SessionStarted) return;

        try
        {
            var currentTime = DateTime.Now;
            var timeLeft = _sessionStartTime - currentTime;
            var requestId = Guid.NewGuid().ToString("N")[..8];
            

            
            if (timeLeft.TotalMilliseconds <= 0)
            {
                Model.SessionStarted = true;
                Model.FormattedTime = "00:00";
                Model.Progress = 100;
                Model.StatusMessage = "Session is ready to begin!";
                _countdownTimer?.Stop();
            }
            else
            {
                var totalMinutes = Math.Floor(timeLeft.TotalMinutes);
                var seconds = timeLeft.Seconds;
                Model.FormattedTime = $"{totalMinutes:00}:{seconds:00}";
                
                var progress = ((_countdownDurationMs - timeLeft.TotalMilliseconds) / _countdownDurationMs) * 100;
                Model.Progress = Math.Max(0, Math.Min(100, (int)progress));
                
                if (timeLeft.TotalMinutes < 1)
                {
                    Model.StatusMessage = "Starting very soon...";
                }
                else if (timeLeft.TotalMinutes < 5)
                {
                    Model.StatusMessage = "Starting soon...";
                }
                else
                {
                    Model.StatusMessage = "Waiting for session to begin.";
                }
            }

            InvokeAsync(() => StateHasChanged());
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "NOOR-DEBUG-TIME: Error updating countdown timer");
        }
    }

    private async Task UpdateParticipants()
    {
        if (Model?.CurrentState != SessionWaitingState.Loaded) return;
        
        var requestId = Guid.NewGuid().ToString("N")[..8];
        await LoadParticipantsAsync(requestId);
    }

    private async Task RetryLoadSession()
    {
        if (_retryAttempts >= MaxRetryAttempts)
        {
            Model!.ErrorMessage = "Maximum retry attempts exceeded. Please refresh the page or contact support.";
            return;
        }
        
        _retryAttempts++;
        var requestId = Guid.NewGuid().ToString("N")[..8];
        Logger.LogInformation("NOOR-DEBUG: [{RequestId}] Retrying session load, attempt {Attempt}", 
            requestId, _retryAttempts);
            
        await InitializeSessionAsync(requestId);
    }

    private async Task RetryConnection()
    {
        Model!.CurrentState = SessionWaitingState.Loaded;
        var requestId = Guid.NewGuid().ToString("N")[..8];
        await UpdateParticipants();
    }



    private void NavigateHome()
    {
        Navigation.NavigateTo("/");
    }

    private void FloodParticipantList()
    {
        if (Model?.Participants == null) return;

        var random = new Random();
        var firstNames = new[] { "Mohammed", "Ahmed", "Ali", "Omar", "Khalid", "Hassan", "Ibrahim", "Yusuf", "Abdullah", "Ameer", 
                                "Sarah", "Fatima", "Aisha", "Khadija", "Maryam", "Zeinab", "Layla", "Noor", "Amina", "Yasmin",
                                "John", "David", "Michael", "James", "Robert", "William", "Richard", "Joseph", "Thomas", "Christopher",
                                "Maria", "Elizabeth", "Jennifer", "Linda", "Patricia", "Susan", "Jessica", "Ashley", "Emily", "Samantha",
                                "Chen", "Wang", "Li", "Zhang", "Liu", "Yang", "Huang", "Zhao", "Wu", "Zhou" };
        
        var lastNames = new[] { "Al-Rashid", "Al-Mahmoud", "Al-Zahra", "Al-Nouri", "Al-Sabah", "Al-Hashemi", "Al-Farisi", "Al-Tamimi",
                               "Smith", "Johnson", "Williams", "Brown", "Jones", "Garcia", "Miller", "Davis", "Rodriguez", "Martinez",
                               "Lee", "Kim", "Kim", "Park", "Choi", "Jung", "Kang", "Cho", "Yoon", "Jang", "Lim",
                               "Singh", "Kumar", "Sharma", "Gupta", "Verma", "Agarwal", "Mishra", "Tiwari", "Yadav", "Jain" };

        var countries = new[] { "US", "CA", "GB", "DE", "FR", "IT", "ES", "AU", "NZ", "JP", "KR", "CN", "IN", "PK", "BD", 
                               "EG", "SA", "AE", "TR", "MA", "NG", "ZA", "BR", "MX", "AR", "RU", "SE", "NO", "DK", "NL" };

        var countryFlags = new[] { "us", "ca", "gb", "de", "fr", "it", "es", "au", "nz", "jp", "kr", "cn", "in", "pk", "bd",
                                  "eg", "sa", "ae", "tr", "ma", "ng", "za", "br", "mx", "ar", "ru", "se", "no", "dk", "nl" };

        // Add 50 random participants
        for (int i = 0; i < 50; i++)
        {
            var firstName = firstNames[random.Next(firstNames.Length)];
            var lastName = lastNames[random.Next(lastNames.Length)];
            var countryIndex = random.Next(countries.Length);
            
            Model.Participants.Add(new ParticipantData
            {
                Name = $"{firstName} {lastName}",
                Country = countries[countryIndex],
                Flag = countryFlags[countryIndex]
            });
        }

        var requestId = Guid.NewGuid().ToString("N")[..8];
        Logger.LogInformation("NOOR-TEST: [{RequestId}] Added 50 random participants for volume testing. Total participants: {Count}", 
            requestId, Model.Participants.Count);
        
        StateHasChanged();
    }

    // COPILOT-DEBUG: Issue-129 - StartSession method removed as button should not be in participant waiting room

    private void SortByName()
    {
        if (Model?.Participants != null)
        {
            Model.Participants = Model.Participants.OrderBy(p => p.Name).ToList();
            StateHasChanged();
        }
    }
    


    private void SortByCountry()
    {
        if (Model?.Participants != null)
        {
            Model.Participants = Model.Participants.OrderBy(p => p.Country).ToList();
            StateHasChanged();
        }
    }

    private static string FormatDate(DateTime? dateTime)
    {
        if (!dateTime.HasValue) return "Today";
        
        var date = dateTime.Value.Date;
        var today = DateTime.Today;
        
        if (date == today) return "Today";
        if (date == today.AddDays(1)) return "Tomorrow";
        
        return date.ToString("MMM dd, yyyy");
    }

    private static string FormatTime(DateTime? dateTime)
    {
        return dateTime?.ToString("h:mm tt") ?? "TBD";
    }

    private static string FormatDuration(TimeSpan? duration)
    {
        if (!duration.HasValue) return "Duration not available";
        
        var hours = duration.Value.Hours;
        var minutes = duration.Value.Minutes;
        
        if (hours > 0 && minutes > 0)
            return $"{hours}h {minutes}m";
        if (hours > 0)
            return $"{hours} hour{(hours > 1 ? "s" : "")}";
        if (minutes > 0)
            return $"{minutes} minute{(minutes > 1 ? "s" : "")}";
            
        return "30 minutes";
    }

    public void Dispose()
    {
        _countdownTimer?.Stop();
        _countdownTimer?.Dispose();
        _participantUpdateTimer?.Stop();
        _participantUpdateTimer?.Dispose();
    }

    public async ValueTask DisposeAsync()
    {
        // Dispose timers
        Dispose();
        
        // Cleanup SignalR connection asynchronously
        if (_hubConnection != null)
        {
            try
            {
                if (_hubConnection.State == HubConnectionState.Connected)
                {
                    // COPILOT-DEBUG: ISSUE FIX - Leave token-based group on cleanup
                    if (!string.IsNullOrEmpty(SessionToken))
                    {
                        var tokenGroup = $"usertoken_{SessionToken}";
                        await _hubConnection.SendAsync("LeaveGroup", tokenGroup);
                        Logger.LogInformation("COPILOT-DEBUG: Left token-based group {TokenGroup}", tokenGroup);
                    }
                    
                    if (_sessionId != null)
                    {
                        await _hubConnection.SendAsync("LeaveSession", _sessionId);
                        Logger.LogInformation("NOOR-SIGNALR: Left session group {SessionId}", _sessionId);
                    }
                }
                await _hubConnection.DisposeAsync();
                Logger.LogInformation("NOOR-SIGNALR: SignalR connection disposed successfully");
            }
            catch (Exception ex)
            {
                Logger.LogWarning(ex, "NOOR-SIGNALR: Error during SignalR cleanup");
            }
        }
    }

    // ViewModel and Data Classes
    public class SessionWaitingViewModel
    {
        public string? LogoText { get; set; }
        public SessionWaitingState CurrentState { get; set; }
        public string? SessionName { get; set; }
        public string? SessionDescription { get; set; }
        public string? SessionDate { get; set; }
        public string? StartTime { get; set; }
        public string? SessionDuration { get; set; }
        public string? InstructorName { get; set; }
        public string? FormattedTime { get; set; }
        public int Progress { get; set; }
        public string? StatusMessage { get; set; }
        public List<ParticipantData>? Participants { get; set; }
        public bool SessionStarted { get; set; }
        public string? ErrorMessage { get; set; }
    }

    public enum SessionWaitingState
    {
        Loading,
        Loaded,
        SessionNotFound,
        InvalidToken,
        NetworkError,
        ApiError,
        Timeout,
        ConnectionIssue,
        CriticalError
    }

    public class ParticipantData
    {
        public string Name { get; set; } = "";
        public string Country { get; set; } = "";
        public string Flag { get; set; } = "";
    }

    public class SessionValidationResponse
    {
        public bool Valid { get; set; }
        public int SessionId { get; set; }
        public string? Token { get; set; }
        public DateTime? ExpiresAt { get; set; }
        public SessionWaitingData? Session { get; set; }
        public ParticipantInfo? Participant { get; set; }
        public string? RequestId { get; set; }
    }

    public class SessionWaitingData
    {
        public int SessionId { get; set; }
        public string? Title { get; set; }
        public string? Description { get; set; }
        public string? Status { get; set; }
        public int ParticipantCount { get; set; }
        public int? MaxParticipants { get; set; }
        public DateTime? StartedAt { get; set; }
        public DateTime? CreatedAt { get; set; }
        public string? InstructorName { get; set; } // Database-driven instructor name
        
        // PHASE 2 FIX: Real API properties for KSESSIONS data
        public DateTime? StartTime { get; set; } // Real SessionDate from KSESSIONS database
        public TimeSpan? Duration { get; set; } // Real duration from API (not hard-coded "1 hour")
    }

    public class ParticipantInfo
    {
        public string? JoinUrl { get; set; }
        public int AccessCount { get; set; }
        public DateTime? LastAccessedAt { get; set; }
    }

    public class ParticipantsResponse
    {
        public int SessionId { get; set; }
        public string? Token { get; set; }
        public int ParticipantCount { get; set; }
        public List<ParticipantApiData>? Participants { get; set; }
        public string? RequestId { get; set; }
    }

    public class ParticipantApiData
    {
        public string UserId { get; set; } = "";
        public string DisplayName { get; set; } = "";
        public DateTime JoinedAt { get; set; }
        public string Role { get; set; } = "";
        public string? City { get; set; }
        public string? Country { get; set; }
        public string? CountryFlag { get; set; } // Database-driven flag code
    }
}