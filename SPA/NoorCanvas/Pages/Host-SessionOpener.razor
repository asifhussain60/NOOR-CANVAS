@page "/host/session-opener"
@page "/host/session-opener/{token?}"
@layout EmptyLayout
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.AspNetCore.Components.Web.Virtualization
@using NoorCanvas.ViewModels
@using NoorCanvas.Models
@using NoorCanvas.Controllers
@using NoorCanvas.Services
@using NoorCanvas.Components
@using System.ComponentModel.DataAnnotations
@using System.Text.Json
@using NoorCanvas.Models.Debug
@using NoorCanvas.Components.Development
@using NoorCanvas.Data
@using Microsoft.EntityFrameworkCore
@inject HostSessionService HostService
@inject IJSRuntime JSRuntime
@inject NavigationManager Navigation
@inject ILogger<Host_SessionOpener> Logger
@inject SimplifiedCanvasDbContext DbContext

<PageTitle>NOOR Canvas - Host Session Opener</PageTitle>

<HeadContent>
    @* Fonts are centralized in Pages/_Host.cshtml; do not duplicate here. *@
</HeadContent>

<!-- Root Container with NOOR Canvas Background -->
<div style="background-color:#F8F5F1;display:flex;align-items:center;justify-content:center;min-height:100vh;padding:1.5rem;font-family:'Inter',sans-serif;">
    
    <!-- Main Component Container -->
    <div style="width:100%;max-width:46.4rem;background-color:#FFFFFF;border-radius:1.5rem;padding:1.5rem 2rem;gap:1.5rem;box-shadow:0 25px 50px -12px rgba(0,0,0,0.25);border:1px solid #e5e7eb;">
        
        <!-- NOOR Canvas Logo -->
        <div class="noor-canvas-logo" style="display:flex;align-items:center;justify-content:center;text-align:center;margin-bottom:1.5rem;">
            <img src="/images/NoorCanvas.png?v=20250924" 
                 alt="@(Model?.LogoText ?? "NOOR Canvas")" />
        </div>
        
        <!-- Title Section -->
        <h1 style="font-family:'Poppins',sans-serif;font-weight:bold;font-size:2rem;color:#006400;display:flex;align-items:center;justify-content:center;gap:0.5rem;margin-bottom:1.5rem;">
            <i class="fa-solid fa-user-tie" style="font-size:2.5rem;color:#006400;"></i>
            <span>Host Session Opener</span>
        </h1>

        <!-- Session Panel -->
        <div style="width:100%;background-color:#FFFFFF;border-radius:1rem;border:2px solid #C5B358;padding:1.5rem 2rem;gap:1.5rem;box-shadow:inset 0 2px 4px 0 rgba(0,0,0,0.06);text-align:center;">
            
            <div style="display:flex;flex-direction:column;align-items:center;gap:1rem;padding:0 2.5rem;">
                
                <!-- Error/Info message container -->
                @if (!string.IsNullOrEmpty(Model?.ErrorMessage) || !string.IsNullOrEmpty(Model?.InfoMessage))
                {
                    @if (!string.IsNullOrEmpty(Model?.ErrorMessage))
                    {
                        <div style="background-color:#fef2f2;border:1px solid #fca5a5;border-radius:0.5rem;padding:1rem;margin-bottom:1rem;width:100%;">
                            <div style="display:flex;align-items:start;gap:0.75rem;">
                                <i class="fa-solid fa-exclamation-triangle" style="color:#dc2626;font-size:1.25rem;margin-top:0.125rem;"></i>
                                <div style="flex:1;">
                                    <h4 style="color:#dc2626;font-family:'Poppins',sans-serif;font-weight:600;font-size:0.95rem;margin:0 0 0.5rem 0;">Action Required</h4>
                                    <p style="color:#991b1b;font-family:'Inter',sans-serif;font-size:0.875rem;line-height:1.4;margin:0;">@((MarkupString)Model.ErrorMessage)</p>
                                </div>
                            </div>
                        </div>
                    }
                    @if (!string.IsNullOrEmpty(Model?.InfoMessage))
                    {
                        <div style="background-color:#eff6ff;border:1px solid #93c5fd;border-radius:0.5rem;padding:1rem;margin-bottom:1rem;width:100%;">
                            <div style="display:flex;align-items:start;gap:0.75rem;">
                                <i class="fa-solid fa-info-circle" style="color:#2563eb;font-size:1.25rem;margin-top:0.125rem;"></i>
                                <div style="flex:1;">
                                    <h4 style="color:#2563eb;font-family:'Poppins',sans-serif;font-weight:600;font-size:0.95rem;margin:0 0 0.5rem 0;">Information</h4>
                                    <p style="color:#1d4ed8;font-family:'Inter',sans-serif;font-size:0.875rem;line-height:1.4;margin:0;">@((MarkupString)Model.InfoMessage)</p>
                                </div>
                            </div>
                        </div>
                    }
                }
                
                <!-- Microphone Icon -->
                <div style="padding:1rem;border-radius:50%;border:4px solid #006400;margin-bottom:1rem;">
                    <i class="fa-solid fa-microphone" style="font-size:4rem;color:#006400;"></i>
                </div>
                
                <!-- Host Controls Grid -->
                <div style="display:grid;grid-template-columns:1fr 1fr;gap:2.5rem;width:100%;min-width:25rem;">
                    
                    <!-- Dropdown controls (Left Column) -->
                    <div style="display:flex;flex-direction:column;gap:1rem;">
                        
                        <!-- Album Selection -->
                        <div style="width:100%;">
                            <label for="album-select" style="display:block;font-size:0.875rem;font-weight:500;color:#374151;text-align:left;margin-bottom:0.25rem;">Album</label>
                            <select id="album-select" @bind="SelectedAlbum" @bind:after="ValidateForm" required autocomplete="off"
                                    style="@(Model?.SelectedAlbum == null ? "color:#9ca3af;" : "color:#4B3C2B;") width:100%;padding:0.5rem;border:1px solid #d1d5db;border-radius:0.375rem;outline:none;transition:all 0.2s;" 
                                    disabled="@(Model?.IsLoadingAlbums ?? false)">
                                <option value="">@((Model?.IsLoadingAlbums ?? false) ? "Loading albums..." : "Select Album")</option>
                                @if (!(Model?.IsLoadingAlbums ?? false))
                                {
                                    @foreach (var album in Albums)
                                    {
                                        <option value="@album.Id">@album.Name</option>
                                    }
                                }
                            </select>
                        </div>
                        
                        <!-- Category Selection -->
                        <div style="width:100%;">
                            <label for="category-select" style="display:block;font-size:0.875rem;font-weight:500;color:#374151;text-align:left;margin-bottom:0.25rem;">Category</label>
                            <select id="category-select" @bind="SelectedCategory" @bind:after="ValidateForm" required autocomplete="off"
                                    style="@(Model?.SelectedCategory == null ? "color:#9ca3af;" : "color:#4B3C2B;") width:100%;padding:0.5rem;border:1px solid #d1d5db;border-radius:0.375rem;outline:none;transition:all 0.2s;" 
                                    disabled="@((Model?.IsLoadingCategories ?? false) || string.IsNullOrEmpty(Model?.SelectedAlbum))">
                                <option value="">@((Model?.IsLoadingCategories ?? false) ? "Loading categories..." : string.IsNullOrEmpty(Model?.SelectedAlbum) ? "Select Album First" : "Select Category")</option>
                                @if (!(Model?.IsLoadingCategories ?? false))
                                {
                                    @foreach (var category in Categories)
                                    {
                                        <option value="@category.CategoryID">@category.CategoryName</option>
                                    }
                                }
                            </select>
                        </div>
                        
                        <!-- Session Selection -->
                        <div style="width:100%;">
                            <label for="session-select" style="display:block;font-size:0.875rem;font-weight:500;color:#374151;text-align:left;margin-bottom:0.25rem;">Session</label>
                            <select id="session-select" @bind="SelectedSession" @bind:after="OnFormFieldChanged" required autocomplete="off"
                                    style="@(Model?.SelectedSession == null ? "color:#9ca3af;" : "color:#4B3C2B;") width:100%;padding:0.5rem;border:1px solid #d1d5db;border-radius:0.375rem;outline:none;transition:all 0.2s;" 
                                    disabled="@((Model?.IsLoadingSessions ?? false) || string.IsNullOrEmpty(Model?.SelectedCategory))">
                                <option value="">@((Model?.IsLoadingSessions ?? false) ? "Loading sessions..." : string.IsNullOrEmpty(Model?.SelectedCategory) ? "Select Category First" : "Select Session")</option>
                                @if (!(Model?.IsLoadingSessions ?? false))
                                {
                                    @foreach (var session in Sessions)
                                    {
                                        <option value="@session.SessionID">@session.SessionName</option>
                                    }
                                }
                            </select>
                        </div>
                    </div>

                    <!-- Host Inputs (Right Column) -->
                    <div style="display:flex;flex-direction:column;gap:1rem;">
                        
                        <!-- Date Input -->
                        <div style="width:100%;">
                            <label for="session-date" style="display:block;font-size:0.875rem;font-weight:500;color:#374151;text-align:left;margin-bottom:0.25rem;">Date</label>
                            <input type="date" id="session-date" @bind="SessionDate" @bind:after="OnFormFieldChanged" required autocomplete="off"
                                   style="width:100%;padding:0.5rem;border:1px solid #d1d5db;border-radius:0.375rem;outline:none;transition:all 0.2s;color:#4B3C2B;">
                        </div>
                        
                        <!-- Time Input -->
                        <div style="width:100%;">
                            <label for="session-time" style="display:block;font-size:0.875rem;font-weight:500;color:#374151;text-align:left;margin-bottom:0.25rem;">Start Time (EST)</label>
                            <input type="text" id="session-time" @bind="SessionTime" @oninput="OnTimeInput" @bind:after="OnFormFieldChanged" required autocomplete="off"
                                   placeholder="HH:MM AM/PM" 
                                   style="width:100%;padding:0.5rem;border:1px solid #d1d5db;border-radius:0.375rem;outline:none;transition:all 0.2s;color:#4B3C2B;">
                        </div>
                        
                        <!-- Duration Input -->
                        <div style="width:100%;">
                            <label for="session-duration" style="display:block;font-size:0.875rem;font-weight:500;color:#374151;text-align:left;margin-bottom:0.25rem;">Duration (minutes)</label>
                            <input type="number" id="session-duration" @bind="SessionDuration" @bind:after="OnFormFieldChanged" required autocomplete="off"
                                   placeholder="Enter duration" min="1" max="480"
                                   style="width:100%;padding:0.5rem;border:1px solid #d1d5db;border-radius:0.375rem;outline:none;transition:all 0.2s;color:#4B3C2B;">
                        </div>
                    </div>
                </div>

                <!-- Open Session Button -->
                <div style="display:flex;justify-content:center;width:100%;margin-top:1.5rem;">
                    <button id="openSessionBtn" @onclick="OpenSessionAsync" disabled="@(!(Model?.IsFormValid ?? false) || (Model?.IsProcessingSession ?? false) || (Model?.HasGeneratedToken ?? false))" 
                            style="@GetButtonStyle()">
                        @if (Model?.IsProcessingSession ?? false)
                        {
                            <i class="fa-solid fa-spinner fa-spin" style="margin-right:0.5rem;"></i>
                            <span>Processing...</span>
                        }
                        else if (Model?.HasGeneratedToken ?? false)
                        {
                            <i class="fa-solid fa-check" style="margin-right:0.5rem;"></i>
                            <span>Token Generated</span>
                        }
                        else
                        {
                            <i class="fa-solid fa-key" style="margin-right:0.5rem;"></i>
                            <span>Generate User Token</span>
                        }
                    </button>
                </div>
            </div>
        </div>

        <!-- Session URL Panel -->
        @if ((Model?.ShowSessionUrlPanel ?? false) && !string.IsNullOrEmpty(Model?.SessionUrl))
        {
            <SessionUrlPanel Model="@Model" OnCopyUserUrl="CopyUserUrlAsync" OnLoadControlPanel="LoadControlPanelAsync" />
        }
    </div>
</div>

@* Debug Panel - Development Only *@
<DebugPanel CurrentViewName="HostSessionOpener" 
           DebugActions="GetHostSessionOpenerDebugActions()" 
           GenericMessage="Host Session Opener debug actions"
           ShowDebugToasts="true" />

@code {
    [Parameter] public string? Token { get; set; }
    
    private HostSessionOpenerViewModel Model { get; set; } = new();
    private List<NoorCanvas.Controllers.AlbumData> Albums { get; set; } = new();
    private List<NoorCanvas.Controllers.CategoryData> Categories { get; set; } = new();
    private List<HostSessionData> Sessions { get; set; } = new();

    // Property wrappers for binding with cascading logic
    private string? SelectedAlbum
    {
        get => Model?.SelectedAlbum;
        set
        {
            if (Model != null && Model.SelectedAlbum != value)
            {
                Model.SelectedAlbum = value;
                // Use InvokeAsync to properly handle async cascading
                InvokeAsync(async () => await OnAlbumChanged());
            }
        }
    }
    
    private string? SelectedCategory
    {
        get => Model?.SelectedCategory;
        set
        {
            if (Model != null && Model.SelectedCategory != value)
            {
                Model.SelectedCategory = value;
                // Use InvokeAsync to properly handle async cascading
                InvokeAsync(async () => await OnCategoryChanged());
            }
        }
    }
    
    private string? SelectedSession
    {
        get => Model?.SelectedSession;
        set => SetModelProperty(m => m.SelectedSession = value);
    }
    
    private DateTime SessionDate
    {
        get => Model?.SessionDate ?? DateTime.Today;
        set => SetModelProperty(m => m.SessionDate = value);
    }
    
    private string SessionTime
    {
        get => Model?.SessionTime ?? "6:00 AM";
        set => SetModelProperty(m => m.SessionTime = value);
    }
    
    private int? SessionDuration
    {
        get => Model?.SessionDuration;
        set => SetModelProperty(m => m.SessionDuration = value);
    }

    private void SetModelProperty(Action<HostSessionOpenerViewModel> setter)
    {
        if (Model != null)
        {
            setter(Model);
        }
    }

    protected override async Task OnInitializedAsync()
    {
        // Set host token if provided
        if (!string.IsNullOrEmpty(Token))
        {
            Model.HostFriendlyToken = Token;
        }

        // Load initial data
        await LoadAlbumsAsync();
        
        // If we have a token, auto-populate the dropdowns based on the associated session
        if (!string.IsNullOrEmpty(Token))
        {
            await AutoPopulateDropdownsFromToken();
        }
    }

    private async Task LoadAlbumsAsync()
    {
        Model.IsLoadingAlbums = true;
        Model.ErrorMessage = "";
        Model.InfoMessage = "";
        StateHasChanged();
        
        try
        {
            Albums = await HostService.LoadAlbumsAsync(Model.HostFriendlyToken);
            
            if (Albums.Count == 0)
            {
                Model.InfoMessage = "No albums are currently available. Please contact your administrator if this seems incorrect.";
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading albums");
            Model.ErrorMessage = "<strong>Unable to load albums</strong><br/>• Check your internet connection<br/>• Refresh the page to try again<br/>• Contact support if the problem persists";
        }
        finally
        {
            Model.IsLoadingAlbums = false;
            ValidateForm();
            StateHasChanged();
        }
    }

    private async Task AutoPopulateDropdownsFromToken()
    {
        try
        {
            // Step 1: Validate token and get SessionId
            if (string.IsNullOrEmpty(Token))
            {
                return;
            }
            
            var validationResponse = await HostService.ValidateHostTokenAsync(Token);
            if (!validationResponse.Valid || validationResponse.SessionId <= 0)
            {
                Model.InfoMessage = $"<strong>Host Token Status</strong><br/>Token <code>{Token}</code> is not valid or has expired.<br/><br/><strong>What to do:</strong><br/>• You can still use this form by manually selecting options below<br/>• To get a new token, run the Host Provisioner tool<br/>• Contact your administrator if you need assistance";
                return;
            }

            // Step 2: Get session details to find GroupId (AlbumId) and CategoryId
            var sessionDetails = await HostService.GetSessionDetailsAsync(validationResponse.SessionId, Token);
            if (sessionDetails == null)
            {
                Model.InfoMessage = $"<strong>Session Configuration</strong><br/>Session details for token <code>{Token}</code> could not be retrieved.<br/><br/><strong>What to do:</strong><br/>• Select options manually from the dropdowns below<br/>• Verify the token with your administrator";
                return;
            }

            // Step 3: Auto-populate dropdowns in sequence
            await AutoPopulateSequence(sessionDetails.GroupId.ToString(), sessionDetails.CategoryId.ToString(), sessionDetails.SessionId.ToString());
            
            Model.InfoMessage = $"<strong>Auto-populated from Token</strong><br/>Successfully loaded session configuration for token <code>{Token}</code>.<br/>You can modify the selections below if needed.";
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error during auto-population for token: {Token}", Token);
            Model.ErrorMessage = $"<strong>Auto-population Failed</strong><br/>Could not load session data for token <code>{Token ?? "unknown"}</code>.<br/><br/><strong>What to do:</strong><br/>• Select options manually from the dropdowns below<br/>• Check your network connection<br/>• Contact support if the issue persists";
        }
    }

    private async Task AutoPopulateSequence(string albumId, string categoryId, string sessionId)
    {
        try
        {
            // Step 1: Wait for albums to be loaded, then set album
            var maxWait = 10; // 10 second timeout
            var waited = 0;
            while (Albums.Count == 0 && waited < maxWait)
            {
                await Task.Delay(1000);
                waited++;
            }

            if (Albums.Count == 0)
            {
                return;
            }

            // Set album and trigger cascade
            SelectedAlbum = albumId;
            StateHasChanged();

            // Step 2: Wait for categories to load, then set category
            waited = 0;
            while (Categories.Count == 0 && waited < maxWait)
            {
                await Task.Delay(1000);
                waited++;
            }

            if (Categories.Count == 0)
            {
                return;
            }

            // Set category and trigger cascade
            SelectedCategory = categoryId;
            StateHasChanged();

            // Step 3: Wait for sessions to load, then set session
            waited = 0;
            while (Sessions.Count == 0 && waited < maxWait)
            {
                await Task.Delay(1000);
                waited++;
            }

            if (Sessions.Count == 0)
            {
                return;
            }

            // Set session
            SelectedSession = sessionId;
            
            // Validate form after all fields are auto-populated
            ValidateForm();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error during auto-population sequence");
        }
    }

    private void OnFormFieldChanged()
    {
        // Reset form state when any field changes
        Model.ResetFormState();
        ValidateForm();
        StateHasChanged();
    }

    private async Task OnAlbumChanged()
    {
        try
        {
            // Reset dependent selections when album changes
            if (Model != null)
            {
                Model.SelectedCategory = null;
                Model.SelectedSession = null;
            }
            Categories.Clear();
            Sessions.Clear();

            if (string.IsNullOrEmpty(Model?.SelectedAlbum))
            {
                ValidateForm();
                StateHasChanged();
                return;
            }

            await LoadCategoriesAsync();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error in OnAlbumChanged for album {AlbumId}", Model?.SelectedAlbum);
            if (Model != null) Model.ErrorMessage = "Error loading categories. Please try again.";
        }
    }

    private async Task OnCategoryChanged()
    {
        try
        {
            // Reset dependent selection when category changes
            if (Model != null) Model.SelectedSession = null;
            Sessions.Clear();

            if (string.IsNullOrEmpty(Model?.SelectedCategory))
            {
                ValidateForm();
                StateHasChanged();
                return;
            }

            await LoadSessionsAsync();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error in OnCategoryChanged for category {CategoryId}", Model?.SelectedCategory);
            if (Model != null) Model.ErrorMessage = "<strong>Unable to load sessions</strong><br/>• Check your internet connection<br/>• Try selecting a different category<br/>• Refresh the page if the problem persists";
        }
    }

    private async Task LoadCategoriesAsync()
    {
        if (string.IsNullOrEmpty(Model.SelectedAlbum)) return;
        
        Model.IsLoadingCategories = true;
        Model.SelectedCategory = null;
        Model.ErrorMessage = "";
        Categories.Clear();
        Sessions.Clear();
        Model.SelectedSession = null;
        StateHasChanged();
        
        try
        {
            Categories = await HostService.LoadCategoriesAsync(Model.SelectedAlbum, Model.HostFriendlyToken);
            
            if (Categories.Count == 0)
            {
                Model.InfoMessage = "No categories are available for the selected album. Please try a different album.";
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading categories for album {AlbumId}", Model.SelectedAlbum);
            Model.ErrorMessage = $"<strong>Unable to load categories</strong><br/>• Check your internet connection<br/>• Try selecting a different album<br/>• Refresh the page if the problem persists";
        }
        finally
        {
            Model.IsLoadingCategories = false;
            ValidateForm();
            StateHasChanged();
        }
    }

    private async Task LoadSessionsAsync()
    {
        if (string.IsNullOrEmpty(Model.SelectedCategory)) return;
        
        Model.IsLoadingSessions = true;
        Model.SelectedSession = null;
        Model.ErrorMessage = "";
        Sessions.Clear();
        StateHasChanged();
        
        try
        {
            if (int.TryParse(Model.SelectedCategory, out int categoryId))
            {
                Sessions = await HostService.LoadSessionsAsync(categoryId, Model.HostFriendlyToken);
                
                if (Sessions.Count == 0)
                {
                    Model.InfoMessage = "No sessions are available for the selected category. Please try a different category.";
                }
            }
            else
            {
                Model.ErrorMessage = "<strong>Invalid Category Selection</strong><br/>Please select a valid category from the dropdown.";
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading sessions for category {CategoryId}", Model.SelectedCategory);
            Model.ErrorMessage = "<strong>Unable to load sessions</strong><br/>• Check your internet connection<br/>• Try selecting a different category<br/>• Refresh the page if the problem persists";
        }
        finally
        {
            Model.IsLoadingSessions = false;
            ValidateForm();
            StateHasChanged();
        }
    }

    private void OnTimeInput(ChangeEventArgs e)
    {
        var input = e.Value?.ToString() ?? "";
        Model.SessionTime = HostService.FormatTimeInput(input);
        ValidateForm();
    }

    private void ValidateForm()
    {
        // Reset form state flags
        Model.ResetFormState();
        
        // Validate required fields
        Model.IsFormValid = Model.ValidateRequiredFields();
        
        // Validate time format if form is otherwise valid
        if (Model.IsFormValid && !HostService.ValidateTimeFormat(Model.SessionTime))
        {
            Model.IsFormValid = false;
            Model.ErrorMessage = "<strong>Invalid Time Format</strong><br/>Please enter time in HH:MM AM/PM format (e.g., 9:30 AM or 2:15 PM).";
        }
        else if (!Model.IsFormValid && Model.HasAttemptedSubmit)
        {
            // Provide detailed guidance on what's missing
            var missingFields = new List<string>();
            if (string.IsNullOrEmpty(Model.SelectedAlbum)) missingFields.Add("Album");
            if (string.IsNullOrEmpty(Model.SelectedCategory)) missingFields.Add("Category");
            if (string.IsNullOrEmpty(Model.SelectedSession)) missingFields.Add("Session");
            if (string.IsNullOrEmpty(Model.SessionTime)) missingFields.Add("Start Time");
            if (!Model.SessionDuration.HasValue || Model.SessionDuration.Value <= 0) missingFields.Add("Duration");
            
            if (missingFields.Any())
            {
                Model.ErrorMessage = $"<strong>Required Fields Missing</strong><br/>Please complete: {string.Join(", ", missingFields)}";
            }
            else
            {
                Model.ErrorMessage = "<strong>Form Validation</strong><br/>Please ensure all fields are filled correctly.";
            }
        }
        else
        {
            Model.ErrorMessage = "";
        }
        StateHasChanged();
    }

    private async Task OpenSessionAsync()
    {
        // Mark that user has attempted to submit
        Model.HasAttemptedSubmit = true;
        Model.IsProcessingSession = true;
        Model.ErrorMessage = "";
        Model.InfoMessage = "";
        StateHasChanged();
        
        try
        {
            var response = await HostService.CreateSessionAndGenerateTokensAsync(Model);
            
            if (response.Success)
            {
                // Set URLs and show panel
                var baseUrl = HostService.GetBaseUrl();
                Model.SessionUrl = $"{baseUrl}/host/control-panel/{response.HostToken}";
                Model.UserLandingUrl = $"{baseUrl}/user/landing/{response.UserToken}";
                Model.ShowSessionUrlPanel = true;
                Model.HasGeneratedToken = true;
            }
            else
            {
                var errorMessage = response.Message ?? "Unknown error occurred";
                
                if (errorMessage.Contains("Session") && errorMessage.Contains("not found"))
                {
                    Model.ErrorMessage = $"<strong>Session Creation Failed</strong><br/>The selected session needs to be created by the Host Provisioner tool first.<br/><br/><strong>What to do:</strong><br/>• Run the Host Provisioner tool to create Session {Model.SelectedSession}<br/>• Or select a different session that has already been created<br/>• Contact your administrator for assistance";
                }
                else if (errorMessage.Contains("BadRequest") || errorMessage.Contains("400"))
                {
                    Model.ErrorMessage = "<strong>Invalid Request</strong><br/>There was a problem with the session data.<br/><br/><strong>What to do:</strong><br/>• Verify all fields are filled correctly<br/>• Try selecting different options<br/>• Refresh the page and try again";
                }
                else
                {
                    Model.ErrorMessage = $"<strong>Session Creation Failed</strong><br/>{errorMessage}<br/><br/><strong>What to do:</strong><br/>• Check your internet connection<br/>• Verify all fields are correct<br/>• Try again in a few moments";
                }
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error in OpenSessionAsync");
            Model.ErrorMessage = "<strong>Unexpected Error</strong><br/>An unexpected error occurred while creating the session.<br/><br/><strong>What to do:</strong><br/>• Check your internet connection<br/>• Refresh the page and try again<br/>• Contact support if the issue persists<br/><br/><small>Technical details logged for debugging</small>";
        }
        finally
        {
            Model.IsProcessingSession = false;
            StateHasChanged();
        }
    }



    private async Task CopyUserUrlAsync()
    {
        try
        {
            await JSRuntime.InvokeVoidAsync("navigator.clipboard.writeText", Model.UserLandingUrl);
            Model.UserCopied = true;
            StateHasChanged();
            
            await Task.Delay(3000);
            Model.UserCopied = false;
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error copying user URL to clipboard");
        }
    }

    private Task LoadControlPanelAsync()
    {
        try
        {
            var controlPanelUrl = Model.SessionUrl;
            Navigation.NavigateTo(controlPanelUrl);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading control panel");
            Model.ErrorMessage = "Failed to load control panel. Please try again.";
        }
        return Task.CompletedTask;
    }

    private string GetButtonStyle()
    {
        var baseStyle = "display:flex;align-items:center;justify-content:center;font-family:'Poppins',sans-serif;font-weight:600;font-size:1rem;padding:0.875rem 2rem;border-radius:0.5rem;border:none;cursor:pointer;transition:all 0.2s;min-width:200px;";
        
        if (!Model.IsFormValid || Model.IsProcessingSession || Model.HasGeneratedToken)
        {
            return baseStyle + "background-color:#9ca3af;color:#ffffff;cursor:not-allowed;";
        }
        
        return baseStyle + "background-color:#006400;color:#ffffff;box-shadow:0 4px 6px -1px rgba(0,0,0,0.1);";
    }
    
    // Debug Actions Factory
    private List<IDebugAction> GetHostSessionOpenerDebugActions()
    {
        var actions = new List<IDebugAction>();
        
        // Clean Canvas Action - Execute canvas.CleanCanvas stored procedure
        actions.Add(new DebugAction(
            "Clean Canvas",
            "Execute canvas.CleanCanvas stored procedure to reset table structure for testing",
            async () => await ExecuteCleanCanvasAsync(),
            "fa-solid fa-broom"
        )
        {
            IsEnabled = true
        });
        
        return actions;
    }
    
    // Execute canvas.CleanCanvas stored procedure
    private async Task ExecuteCleanCanvasAsync()
    {
        try
        {
            Logger.LogInformation("NOOR-DEBUG-PANEL: Starting canvas.CleanCanvas execution");
            
            // Execute the stored procedure using the database context
            await DbContext.Database.ExecuteSqlRawAsync("EXEC canvas.CleanCanvas");
            
            Logger.LogInformation("NOOR-DEBUG-PANEL: canvas.CleanCanvas executed successfully");
            
            // Show success toast notification
            await JSRuntime.InvokeVoidAsync("showNoorToast", "Clean Canvas completed successfully", "success");
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "NOOR-DEBUG-PANEL: Error executing canvas.CleanCanvas");
            
            // Show error toast notification
            await JSRuntime.InvokeVoidAsync("showNoorToast", $"Clean Canvas failed: {ex.Message}", "error");
        }
    }
}