@page "/user/{token}"
@using System.Net.Http.Json
@using System.Text.Json.Serialization
@inject IHttpClientFactory HttpClientFactory
@inject IJSRuntime JSRuntime
@inject NavigationManager Navigation
@inject ILogger<UserToken> Logger

<div class="user-token-container">
    @if (isValidating)
    {
        <div class="d-flex justify-content-center align-items-center" style="height: 100vh;">
            <div class="text-center">
                <div class="spinner-border text-success" role="status" style="width: 3rem; height: 3rem;">
                    <span class="visually-hidden">Validating session access...</span>
                </div>
                <h4 class="mt-3 text-success">Validating Session Access</h4>
                <p class="text-muted">Token: @Token</p>
                @if (!string.IsNullOrEmpty(debugMessage))
                {
                    <div class="mt-3 p-3 bg-light rounded">
                        <small class="text-muted">@debugMessage</small>
                    </div>
                }
            </div>
        </div>
    }
    else if (validationResult != null)
    {
        @if (validationResult.Valid)
        {
            <div class="container">
                <div class="row justify-content-center">
                    <div class="col-lg-8">
                        <div class="card shadow-lg">
                            <div class="card-header bg-success text-white text-center">
                                <h3><i class="fas fa-check-circle me-2"></i>Welcome to Session</h3>
                            </div>
                            <div class="card-body p-4">
                                @if (validationResult.Session != null)
                                {
                                    <div class="text-center mb-4">
                                        <h4 class="text-primary">@validationResult.Session.Title</h4>
                                        @if (!string.IsNullOrEmpty(validationResult.Session.Description))
                                        {
                                            <p class="text-muted">@validationResult.Session.Description</p>
                                        }
                                        <span class="badge bg-success fs-6">@validationResult.Session.Status</span>
                                    </div>
                                }
                                
                                <div class="row text-center mb-4">
                                    <div class="col-md-3">
                                        <div class="border rounded p-3">
                                            <i class="fas fa-id-card text-info fs-4"></i>
                                            <h6 class="mt-2">Session ID</h6>
                                            <p class="text-muted">@validationResult.SessionId</p>
                                        </div>
                                    </div>
                                    <div class="col-md-3">
                                        <div class="border rounded p-3">
                                            <i class="fas fa-users text-primary fs-4"></i>
                                            <h6 class="mt-2">Access Type</h6>
                                            <p class="text-muted">@validationResult.TokenType</p>
                                        </div>
                                    </div>
                                    <div class="col-md-3">
                                        <div class="border rounded p-3">
                                            <i class="fas fa-eye text-warning fs-4"></i>
                                            <h6 class="mt-2">Views</h6>
                                            <p class="text-muted">@validationResult.AccessCount</p>
                                        </div>
                                    </div>
                                    <div class="col-md-3">
                                        <div class="border rounded p-3">
                                            <i class="fas fa-clock text-danger fs-4"></i>
                                            <h6 class="mt-2">Expires</h6>
                                            <p class="text-muted">@GetTimeUntilExpiry()</p>
                                        </div>
                                    </div>
                                </div>
                                
                                <div class="d-grid gap-2">
                                    <button class="btn btn-success btn-lg" @onclick="JoinSession">
                                        <i class="fas fa-sign-in-alt me-2"></i>Join Session Now
                                    </button>
                                    <button class="btn btn-outline-secondary" @onclick="NavigateToHome">
                                        <i class="fas fa-home me-2"></i>Return to Home
                                    </button>
                                </div>
                            </div>
                        </div>
                        
                        <!-- Debug Information -->
                        <div class="mt-4 p-3 bg-light rounded">
                            <h6>Debug Information:</h6>
                            <pre class="text-small">@debugInfo</pre>
                        </div>
                    </div>
                </div>
            </div>
        }
        else
        {
            <div class="container">
                <div class="row justify-content-center">
                    <div class="col-lg-6">
                        <div class="alert alert-danger text-center">
                            <h4><i class="fas fa-times-circle"></i> Invalid Session Token</h4>
                            <p>The session token "@Token" is not valid or has expired.</p>
                            
                            @if (!string.IsNullOrEmpty(errorMessage))
                            {
                                <div class="mt-3 p-3 bg-light rounded">
                                    <strong>Error Details:</strong>
                                    <p class="text-muted mt-2">@errorMessage</p>
                                </div>
                            }
                            
                            <div class="mt-4">
                                <button class="btn btn-primary me-3" @onclick="NavigateToHome">
                                    <i class="fas fa-home me-2"></i>Return to Home
                                </button>
                                <button class="btn btn-outline-secondary" @onclick="RetryValidation">
                                    <i class="fas fa-redo me-2"></i>Retry Validation
                                </button>
                            </div>
                        </div>
                        
                        <!-- Debug Information -->
                        <div class="mt-4 p-3 bg-light rounded">
                            <h6>Debug Information:</h6>
                            <pre class="text-small">@debugInfo</pre>
                        </div>
                    </div>
                </div>
            </div>
        }
    }
</div>

@code {
    [Parameter] public string Token { get; set; } = string.Empty;
    
    private bool isValidating = true;
    private TokenValidationResponse? validationResult;
    private string errorMessage = string.Empty;
    private string debugMessage = string.Empty;
    private string debugInfo = string.Empty;
    
    protected override async Task OnInitializedAsync()
    {
        Logger.LogInformation("NOOR-USER-TOKEN: Page loaded with token: {Token}", Token);
        debugInfo = $"User Token received: {Token}\n";
        debugInfo += $"Page loaded at: {DateTime.UtcNow:yyyy-MM-dd HH:mm:ss} UTC\n";
        
        await ValidateUserToken();
    }
    
    private async Task ValidateUserToken()
    {
        if (string.IsNullOrWhiteSpace(Token))
        {
            Logger.LogWarning("NOOR-USER-TOKEN: No token provided in URL parameter");
            errorMessage = "No token provided in URL parameter";
            debugInfo += "ERROR: Token is null or empty\n";
            isValidating = false;
            return;
        }
        
        if (Token.Length != 8)
        {
            Logger.LogWarning("NOOR-USER-TOKEN: Invalid token length: {Length}, expected 8 characters", Token.Length);
            errorMessage = $"Invalid token length: {Token.Length}, expected 8 characters";
            debugInfo += $"ERROR: Invalid token length: {Token.Length}\n";
            isValidating = false;
            return;
        }
        
        debugMessage = "Contacting token validation API...";
        debugInfo += "Calling API: /api/token/validate/{token}?isHost=false\n";
        StateHasChanged();
        
        try
        {
            using var httpClient = HttpClientFactory.CreateClient("default");
            Logger.LogInformation("NOOR-USER-TOKEN: Validating token {Token} via API", Token);
            
            var response = await httpClient.GetAsync($"/api/token/validate/{Token}?isHost=false");
            debugInfo += $"API Response Status: {response.StatusCode}\n";
            debugInfo += $"API Response Headers: {string.Join(", ", response.Headers.Select(h => $"{h.Key}={string.Join(",", h.Value)}"))}\n";
            
            if (response.IsSuccessStatusCode)
            {
                var responseText = await response.Content.ReadAsStringAsync();
                debugInfo += $"API Response Body: {responseText}\n";
                
                validationResult = await response.Content.ReadFromJsonAsync<TokenValidationResponse>();
                
                if (validationResult != null)
                {
                    Logger.LogInformation("NOOR-USER-TOKEN: Token validation successful for session {SessionId}", validationResult.SessionId);
                    debugInfo += $"Validation Result: Valid={validationResult.Valid}, SessionId={validationResult.SessionId}\n";
                    debugInfo += $"Session Title: {validationResult.Session?.Title}\n";
                    debugInfo += $"Token Type: {validationResult.TokenType}\n";
                }
                else
                {
                    Logger.LogWarning("NOOR-USER-TOKEN: Failed to deserialize validation response");
                    errorMessage = "Failed to parse validation response";
                    debugInfo += "ERROR: Failed to deserialize API response\n";
                }
            }
            else
            {
                var errorText = await response.Content.ReadAsStringAsync();
                Logger.LogWarning("NOOR-USER-TOKEN: API validation failed with status {StatusCode}: {Error}", response.StatusCode, errorText);
                errorMessage = $"API Error {response.StatusCode}: {errorText}";
                debugInfo += $"API Error: {response.StatusCode} - {errorText}\n";
                
                // Create a failed validation result
                validationResult = new TokenValidationResponse { Valid = false };
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "NOOR-USER-TOKEN: Exception during token validation");
            errorMessage = $"Validation failed: {ex.Message}";
            debugInfo += $"EXCEPTION: {ex.Message}\n";
            debugInfo += $"Stack Trace: {ex.StackTrace}\n";
            
            // Create a failed validation result
            validationResult = new TokenValidationResponse { Valid = false };
        }
        finally
        {
            isValidating = false;
            StateHasChanged();
        }
    }
    
    private async Task RetryValidation()
    {
        isValidating = true;
        validationResult = null;
        errorMessage = string.Empty;
        debugMessage = string.Empty;
        debugInfo = $"Retry attempt at: {DateTime.UtcNow:yyyy-MM-dd HH:mm:ss} UTC\n";
        
        StateHasChanged();
        await ValidateUserToken();
    }
    
    private void JoinSession()
    {
        if (validationResult?.Valid == true)
        {
            Logger.LogInformation("NOOR-USER-TOKEN: Redirecting to participant registration for session {SessionId}", validationResult.SessionId);
            
            // Redirect to participant registration
            Navigation.NavigateTo($"/participant/register?session={validationResult.SessionId}");
        }
    }
    
    private void NavigateToHome()
    {
        Navigation.NavigateTo("/");
    }
    
    private string GetTimeUntilExpiry()
    {
        if (validationResult?.ExpiresAt != null)
        {
            var timeLeft = validationResult.ExpiresAt - DateTime.UtcNow;
            if (timeLeft.TotalSeconds > 0)
            {
                if (timeLeft.TotalDays > 1)
                    return $"{timeLeft.Days}d {timeLeft.Hours}h";
                else if (timeLeft.TotalHours > 1)
                    return $"{timeLeft.Hours}h {timeLeft.Minutes}m";
                else
                    return $"{timeLeft.Minutes}m";
            }
            return "Expired";
        }
        return "Unknown";
    }
    
    // Response model matching the API
    public class TokenValidationResponse
    {
        [JsonPropertyName("valid")]
        public bool Valid { get; set; }
        
        [JsonPropertyName("sessionId")]
        public long SessionId { get; set; }
        
        [JsonPropertyName("tokenType")]
        public string TokenType { get; set; } = string.Empty;
        
        [JsonPropertyName("expiresAt")]
        public DateTime ExpiresAt { get; set; }
        
        [JsonPropertyName("accessCount")]
        public int AccessCount { get; set; }
        
        [JsonPropertyName("session")]
        public SessionInfo? Session { get; set; }
    }
    
    public class SessionInfo
    {
        [JsonPropertyName("sessionId")]
        public long SessionId { get; set; }
        
        [JsonPropertyName("title")]
        public string? Title { get; set; }
        
        [JsonPropertyName("description")]
        public string? Description { get; set; }
        
        [JsonPropertyName("status")]
        public string? Status { get; set; }
        
        [JsonPropertyName("createdAt")]
        public DateTime CreatedAt { get; set; }
    }
}
