@page "/host/session/create"
@using Microsoft.AspNetCore.Components
@using System.Net.Http.Json
@using System.Text.Json.Serialization
@inject IJSRuntime JSRuntime
@inject NavigationManager Navigation
@inject ILogger<CreateSession> Logger
@inject IHttpClientFactory HttpClientFactory

<!-- NOOR Canvas Header -->
<header class="noor-header-container">
    <img src="~/images/branding/NC-Header.png" alt="NOOR Canvas - Host Control Panel" class="noor-header" />
</header>

<div class="noor-main-container noor-space-y-6">
    <!-- Host Control Panel Header -->
    <header class="text-center">
        <h1 class="noor-title">
            <i class="fa-solid fa-gear text-blue-500"></i>
            <span>HOST CONTROL PANEL</span>
        </h1>
    </header>

    <!-- Session Details Panel -->
    <div class="bg-white p-6 rounded-xl shadow-lg border border-gray-300">
        <h2 class="font-bold text-2xl text-blue-900 mb-4">Create New Session</h2>
        <p class="text-gray-600 text-sm leading-relaxed mb-4">Select your content album, category, and session to create a new interactive learning session.</p>
        
        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <div class="alert alert-danger" role="alert">
                <i class="fas fa-exclamation-circle"></i> @errorMessage
            </div>
        }

        <form @onsubmit="CreateNewSession" @onsubmit:preventDefault="true">
            <!-- Dropdown and Session Controls Panel Container -->
        <div class="noor-flex-panel mt-6">
            <!-- Dropdown Panel -->
            <div class="noor-panel noor-space-y-4">
                <!-- Album Dropdown -->
                <div class="w-full">
                    <label for="album" class="noor-label">
                        <i class="fa-solid fa-compact-disc"></i>
                        <span>Album</span>
                    </label>
                    <select id="album" name="album" class="noor-select" value="@selectedAlbumId" @onchange="OnAlbumChanged" disabled="@isLoading">
                        <option selected disabled value="">Select an album</option>
                        @if (albums != null)
                        {
                            @foreach (var album in albums)
                            {
                                <option value="@album.GroupId">@album.GroupName</option>
                            }
                        }
                    </select>
                    @if (isLoadingAlbums)
                    {
                        <small class="text-gray-500"><i class="fas fa-spinner fa-spin"></i> Loading albums...</small>
                    }
                </div>

                <!-- Category Dropdown -->
                <div class="w-full">
                    <label for="category" class="noor-label">
                        <i class="fa-solid fa-tag"></i>
                        <span>Category</span>
                    </label>
                    <select id="category" name="category" class="noor-select" value="@selectedCategoryId" @onchange="OnCategoryChanged" disabled="@(isLoading || string.IsNullOrEmpty(selectedAlbumId))">
                        <option selected disabled value="">Select a category</option>
                        @if (categories != null)
                        {
                            @foreach (var category in categories)
                            {
                                <option value="@category.CategoryId">@category.CategoryName</option>
                            }
                        }
                    </select>
                    @if (isLoadingCategories)
                    {
                        <small class="text-gray-500"><i class="fas fa-spinner fa-spin"></i> Loading categories...</small>
                    }
                </div>

                <!-- Session Dropdown -->
                <div class="w-full">
                    <label for="session" class="noor-label">
                        <i class="fa-solid fa-calendar-check"></i>
                        <span>Session</span>
                    </label>
                    <select id="session" name="session" class="noor-select" @bind="selectedSessionId" disabled="@(isLoading || string.IsNullOrEmpty(selectedCategoryId))">
                        <option selected disabled value="">Select a session</option>
                        @if (sessions != null)
                        {
                            @foreach (var session in sessions)
                            {
                                <option value="@session.SessionId">@session.SessionName</option>
                        }
                    </select>
                    @if (isLoadingSessions)
                    {
                        <small class="text-gray-500"><i class="fas fa-spinner fa-spin"></i> Loading sessions...</small>
                    }
                </div>
            </div>

            <!-- Session Controls Panel -->
            <div class="noor-panel flex flex-col items-center justify-center noor-space-y-4">
                <h3 class="noor-section-title">SESSION CONTROLS</h3>
                
                <!-- Create Session Button -->
                <form @onsubmit="CreateNewSession" @onsubmit:preventDefault="true" class="w-full">
                    <button type="submit" class="noor-btn noor-btn-primary w-full" 
                            disabled="@(isLoading || string.IsNullOrEmpty(selectedSessionId))">
                        @if (isLoading)
                        {
                            <span class="spinner-border spinner-border-sm me-2"></span>
                        }
                        <i class="fas fa-rocket"></i> Create Session
                    </button>
                </form>
                
                <!-- Session Preview (if selected) -->
                @if (!string.IsNullOrEmpty(selectedSessionId) && sessions != null)
                {
                    @{
                        var selectedSession = sessions.FirstOrDefault(s => s.SessionId == selectedSessionId);
                    }
                    @if (selectedSession != null)
                    {
                        <div class="bg-gray-50 rounded-lg p-4 w-full text-center">
                            <h4 class="font-bold text-blue-900">Selected Session</h4>
                            <p class="text-gray-700">@selectedSession.SessionName</p>
                        </div>
                    }
                }
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter] public string? Guid { get; set; }
    
    private string? selectedAlbumId = "";
    private string? selectedCategoryId = "";
    private string? selectedSessionId = "";
    private string errorMessage = "";
    private bool isLoading = false;
    private bool isLoadingAlbums = false;
    private bool isLoadingCategories = false;
    private bool isLoadingSessions = false;
    
    private List<AlbumDto>? albums = null;
    private List<CategoryDto>? categories = null;
    private List<SessionDto>? sessions = null;

    protected override async Task OnInitializedAsync()
    {
        Logger.LogInformation("NOOR-INFO: CreateSession page initialized");
        await LoadAlbums();
    }

    protected override void OnParametersSet()
    {
        // Get GUID from query string if not provided as parameter
        if (string.IsNullOrEmpty(Guid))
        {
            var uri = new Uri(Navigation.Uri);
            var queryParams = Microsoft.AspNetCore.WebUtilities.QueryHelpers.ParseQuery(uri.Query);
            if (queryParams.TryGetValue("guid", out var guidValues))
            {
                Guid = guidValues.FirstOrDefault();
            }
        }
        
        Logger.LogInformation("NOOR-INFO: Host GUID for session creation: {Guid}", Guid?.Substring(0, 8) + "...");
    }

    private async Task LoadAlbums()
    {
        isLoadingAlbums = true;
        try
        {
            Logger.LogInformation("NOOR-INFO: Loading albums from KSESSIONS_DEV");
            
            using var httpClient = HttpClientFactory.CreateClient();
            var response = await httpClient.GetAsync("/api/host/albums");
            
            if (response.IsSuccessStatusCode)
            {
                albums = await response.Content.ReadFromJsonAsync<List<AlbumDto>>();
                Logger.LogInformation("NOOR-SUCCESS: Loaded {Count} albums", albums?.Count ?? 0);
            }
            else
            {
                Logger.LogWarning("NOOR-WARNING: Failed to load albums - HTTP {StatusCode}", response.StatusCode);
                errorMessage = "Failed to load albums. Please try again.";
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "NOOR-ERROR: Exception loading albums");
            errorMessage = "Error connecting to database. Please check your connection.";
        }
        finally
        {
            isLoadingAlbums = false;
            StateHasChanged();
        }
    }

    private async Task OnAlbumChanged(ChangeEventArgs e)
    {
        selectedAlbumId = e.Value?.ToString();
        selectedCategoryId = "";
        selectedSessionId = "";
        categories = null;
        sessions = null;
        
        if (!string.IsNullOrEmpty(selectedAlbumId) && int.TryParse(selectedAlbumId, out int albumId))
        {
            await LoadCategories(albumId);
        }
    }

    private async Task LoadCategories(int albumId)
    {
        isLoadingCategories = true;
        try
        {
            Logger.LogInformation("NOOR-INFO: Loading categories for album {AlbumId}", albumId);
            
            using var httpClient = HttpClientFactory.CreateClient();
            var response = await httpClient.GetAsync($"/api/host/categories/{albumId}");
            
            if (response.IsSuccessStatusCode)
            {
                categories = await response.Content.ReadFromJsonAsync<List<CategoryDto>>();
                Logger.LogInformation("NOOR-SUCCESS: Loaded {Count} categories", categories?.Count ?? 0);
            }
            else
            {
                Logger.LogWarning("NOOR-WARNING: Failed to load categories - HTTP {StatusCode}", response.StatusCode);
                errorMessage = "Failed to load categories. Please try again.";
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "NOOR-ERROR: Exception loading categories");
            errorMessage = "Error loading categories. Please check your connection.";
        }
        finally
        {
            isLoadingCategories = false;
            StateHasChanged();
        }
    }

    private async Task OnCategoryChanged(ChangeEventArgs e)
    {
        selectedCategoryId = e.Value?.ToString();
        selectedSessionId = "";
        sessions = null;
        
        if (!string.IsNullOrEmpty(selectedCategoryId) && int.TryParse(selectedCategoryId, out int categoryId))
        {
            await LoadSessions(categoryId);
        }
    }

    private async Task LoadSessions(int categoryId)
    {
        isLoadingSessions = true;
        try
        {
            Logger.LogInformation("NOOR-INFO: Loading sessions for category {CategoryId}", categoryId);
            
            using var httpClient = HttpClientFactory.CreateClient();
            var response = await httpClient.GetAsync($"/api/host/sessions/{categoryId}");
            
            if (response.IsSuccessStatusCode)
            {
                sessions = await response.Content.ReadFromJsonAsync<List<SessionDto>>();
                Logger.LogInformation("NOOR-SUCCESS: Loaded {Count} sessions", sessions?.Count ?? 0);
            }
            else
            {
                Logger.LogWarning("NOOR-WARNING: Failed to load sessions - HTTP {StatusCode}", response.StatusCode);
                errorMessage = "Failed to load sessions. Please try again.";
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "NOOR-ERROR: Exception loading sessions");
            errorMessage = "Error loading sessions. Please check your connection.";
        }
        finally
        {
            isLoadingSessions = false;
            StateHasChanged();
        }
    }

    private async Task CreateNewSession()
    {
        if (string.IsNullOrEmpty(selectedSessionId) || string.IsNullOrEmpty(Guid))
            return;

        isLoading = true;
        try
        {
            Logger.LogInformation("NOOR-INFO: Creating session for GUID {Guid} with session {SessionId}", 
                Guid.Substring(0, 8) + "...", selectedSessionId);

            var createRequest = new
            {
                HostGuid = Guid,
                SessionId = int.Parse(selectedSessionId),
                AlbumId = int.Parse(selectedAlbumId!),
                CategoryId = int.Parse(selectedCategoryId!)
            };

            using var httpClient = HttpClientFactory.CreateClient();
            var response = await httpClient.PostAsJsonAsync("/api/host/create-session", createRequest);

            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<CreateSessionResponse>();
                Logger.LogInformation("NOOR-SUCCESS: Session created successfully - ID: {SessionId}", result?.SessionId);
                
                // Show success message and allow creating another session
                await JSRuntime.InvokeVoidAsync("alert", $"Session created successfully! Session ID: {result?.SessionId}");
            }
            else
            {
                Logger.LogWarning("NOOR-WARNING: Session creation failed - HTTP {StatusCode}", response.StatusCode);
                errorMessage = "Failed to create session. Please try again.";
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "NOOR-ERROR: Exception creating session");
            errorMessage = "Error creating session. Please try again.";
        }
        finally
        {
            isLoading = false;
        }
    }

    // DTO classes for API responses
    public class AlbumDto
    {
        public int GroupId { get; set; }
        public string GroupName { get; set; } = "";
    }

    public class CategoryDto
    {
        public int CategoryId { get; set; }
        public string CategoryName { get; set; } = "";
        public int GroupId { get; set; }
    }

    public class SessionDto
    {
        public int SessionId { get; set; }
        public string SessionName { get; set; } = "";
        public int CategoryId { get; set; }
    }

    public class CreateSessionResponse
    {
        public int SessionId { get; set; }
        public string Status { get; set; } = "";
    }
}
