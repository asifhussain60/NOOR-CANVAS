@page "/host/dashboard"
@using System.Net.Http.Json
@using System.Text.Json
@inject HttpClient Http
@inject IJSRuntime JSRuntime
@inject NavigationManager Navigation
@inject ILogger<HostDashboard> Logger

<div class="host-dashboard">
    <div class="dashboard-header">
        <div class="container-fluid">
            <div class="row align-items-center">
                <div class="col-md-6">
                    <h1><i class="fas fa-tachometer-alt"></i> Host Dashboard</h1>
                    <p class="text-muted">Manage your NOOR Canvas sessions</p>
                </div>
                <div class="col-md-6 text-end">
                    <button class="btn btn-primary me-2" @onclick="NavigateToCreateSession">
                        <i class="fas fa-plus"></i> New Session
                    </button>
                    <button class="btn btn-outline-secondary" @onclick="RefreshDashboard">
                        <i class="fas fa-sync"></i> Refresh
                    </button>
                </div>
            </div>
        </div>
    </div>

    @if (isLoading)
    {
        <div class="text-center py-5">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading dashboard...</span>
            </div>
            <p class="mt-3">Loading dashboard data...</p>
        </div>
    }
    else if (dashboardData != null)
    {
        <div class="dashboard-content">
            <div class="container-fluid">
                <!-- Stats Cards -->
                <div class="row mb-4">
                    <div class="col-md-4">
                        <div class="stats-card">
                            <div class="stats-icon bg-primary">
                                <i class="fas fa-play"></i>
                            </div>
                            <div class="stats-content">
                                <h3>@dashboardData.ActiveSessions</h3>
                                <p>Active Sessions</p>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-4">
                        <div class="stats-card">
                            <div class="stats-icon bg-success">
                                <i class="fas fa-users"></i>
                            </div>
                            <div class="stats-content">
                                <h3>@dashboardData.TotalParticipants</h3>
                                <p>Total Participants</p>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-4">
                        <div class="stats-card">
                            <div class="stats-icon bg-info">
                                <i class="fas fa-calendar"></i>
                            </div>
                            <div class="stats-content">
                                <h3>@dashboardData.RecentSessions.Count</h3>
                                <p>Recent Sessions</p>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Recent Sessions -->
                <div class="row">
                    <div class="col-12">
                        <div class="card">
                            <div class="card-header">
                                <h5><i class="fas fa-history"></i> Recent Sessions</h5>
                            </div>
                            <div class="card-body">
                                @if (dashboardData.RecentSessions.Any())
                                {
                                    <div class="table-responsive">
                                        <table class="table table-hover">
                                            <thead>
                                                <tr>
                                                    <th>Title</th>
                                                    <th>Status</th>
                                                    <th>Participants</th>
                                                    <th>Created</th>
                                                    <th>Actions</th>
                                                </tr>
                                            </thead>
                                            <tbody>
                                                @foreach (var session in dashboardData.RecentSessions)
                                                {
                                                    <tr>
                                                        <td>
                                                            <strong>@session.Title</strong>
                                                        </td>
                                                        <td>
                                                            <span class="badge @GetStatusBadgeClass(session.Status)">
                                                                @session.Status
                                                            </span>
                                                        </td>
                                                        <td>@session.ParticipantCount</td>
                                                        <td>@session.CreatedAt.ToString("MMM dd, yyyy HH:mm")</td>
                                                        <td>
                                                            @if (session.Status == "Created")
                                                            {
                                                                <button class="btn btn-sm btn-success me-1" 
                                                                        @onclick="() => StartSession(session.Id)">
                                                                    <i class="fas fa-play"></i> Start
                                                                </button>
                                                            }
                                                            @if (session.Status == "Active")
                                                            {
                                                                <button class="btn btn-sm btn-danger me-1" 
                                                                        @onclick="() => EndSession(session.Id)">
                                                                    <i class="fas fa-stop"></i> End
                                                                </button>
                                                            }
                                                            <button class="btn btn-sm btn-outline-primary" 
                                                                    @onclick="() => ViewSession(session.Id)">
                                                                <i class="fas fa-eye"></i> View
                                                            </button>
                                                        </td>
                                                    </tr>
                                                }
                                            </tbody>
                                        </table>
                                    </div>
                                }
                                else
                                {
                                    <div class="text-center py-4">
                                        <i class="fas fa-calendar-plus fa-3x text-muted mb-3"></i>
                                        <h6>No sessions yet</h6>
                                        <p class="text-muted">Create your first session to get started</p>
                                        <button class="btn btn-primary" @onclick="NavigateToCreateSession">
                                            Create First Session
                                        </button>
                                    </div>
                                }
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }


</div>

@code {
    private HostDashboardData? dashboardData;
    private bool isLoading = true;
    private string? sessionToken;
    private string? initializationError;

    [Parameter]
    [SupplyParameterFromQuery]
    public string? Guid { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            Logger.LogInformation("NOOR-INFO: Host dashboard initializing for GUID: {Guid}", Guid?.Substring(0, 8) + "...");
            
            // âœ… LIVE API: Authenticate host GUID and get session token
            if (!string.IsNullOrEmpty(Guid))
            {
                await AuthenticateHost();
                if (!string.IsNullOrEmpty(sessionToken))
                {
                    await LoadDashboardData();
                }
                else
                {
                    Logger.LogError("NOOR-ERROR: Host authentication failed, redirecting to landing");
                    Navigation.NavigateTo("/");
                    return;
                }
            }
            else
            {
                Logger.LogWarning("NOOR-WARNING: No host GUID provided, redirecting to landing");
                Navigation.NavigateTo("/");
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "NOOR-ERROR: Failed to initialize host dashboard");
            initializationError = ex.Message; // Store error for client-side logging
        }
        finally
        {
            isLoading = false;
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                // JavaScript interop calls only after component is rendered on client
                await JSRuntime.InvokeVoidAsync("NoorLogger.info", "HOST-DASHBOARD", "Dashboard initialized", new { guid = Guid });
                
                // Log any initialization errors that occurred during OnInitializedAsync
                if (!string.IsNullOrEmpty(initializationError))
                {
                    await JSRuntime.InvokeVoidAsync("NoorLogger.error", "HOST-DASHBOARD", "Initialization failed", new { error = initializationError });
                }
            }
            catch (Exception ex)
            {
                Logger.LogError(ex, "NOOR-ERROR: Failed to initialize client-side logging");
            }
        }
    }

    private async Task AuthenticateHost()
    {
        try
        {
            Logger.LogInformation("NOOR-INFO: Authenticating host GUID: {Guid}", Guid?.Substring(0, 8) + "...");
            
            var request = new { HostGuid = Guid };
            var response = await Http.PostAsJsonAsync("/api/host/authenticate", request);
            
            if (response.IsSuccessStatusCode)
            {
                var authResponse = await response.Content.ReadFromJsonAsync<HostAuthResponse>();
                if (authResponse?.Success == true)
                {
                    sessionToken = authResponse.SessionToken;
                    Logger.LogInformation("NOOR-SUCCESS: Host authenticated successfully");
                    return;
                }
            }
            
            Logger.LogError("NOOR-ERROR: Host authentication failed - Invalid response");
            sessionToken = null;
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "NOOR-ERROR: Host authentication exception");
            sessionToken = null;
        }
    }

    private async Task LoadDashboardData()
    {
        try
        {
            Logger.LogInformation("NOOR-INFO: Loading dashboard data with session token");
            
            // âœ… LIVE API: Load dashboard data from backend
            var response = await Http.GetAsync($"/api/host/dashboard?sessionToken={sessionToken}");
            
            if (response.IsSuccessStatusCode)
            {
                var apiDashboardData = await response.Content.ReadFromJsonAsync<HostDashboardResponse>();
                if (apiDashboardData != null)
                {
                    // Map API response to UI model
                    dashboardData = new HostDashboardData
                    {
                        HostName = apiDashboardData.HostName,
                        ActiveSessions = apiDashboardData.ActiveSessions,
                        TotalParticipants = apiDashboardData.TotalParticipants,
                        RecentSessions = apiDashboardData.RecentSessions.Select(s => new SessionSummary
                        {
                            Id = s.GroupId,
                            Title = s.Status, // TODO: Update when Title field is populated in backend
                            Status = s.Status,
                            CreatedAt = s.CreatedAt,
                            ParticipantCount = s.ParticipantCount,
                            SessionGuid = s.SessionGuid,
                            JoinLink = $"https://localhost:9091/session/{s.SessionGuid}"
                        }).ToList()
                    };

                    Logger.LogInformation("NOOR-SUCCESS: Dashboard data loaded from API - {ActiveSessions} active sessions, {TotalParticipants} participants", 
                        dashboardData.ActiveSessions, dashboardData.TotalParticipants);
                    await JSRuntime.InvokeVoidAsync("NoorLogger.info", "HOST-DASHBOARD", "Dashboard data loaded from API", 
                        new { activeSessions = dashboardData.ActiveSessions, totalParticipants = dashboardData.TotalParticipants });
                }
            }
            else
            {
                Logger.LogError("NOOR-ERROR: Failed to load dashboard data - HTTP {StatusCode}", response.StatusCode);
                await JSRuntime.InvokeVoidAsync("NoorLogger.error", "HOST-DASHBOARD", "Failed to load dashboard data", 
                    new { statusCode = (int)response.StatusCode, error = response.ReasonPhrase });
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "NOOR-ERROR: Exception loading dashboard data");
            await JSRuntime.InvokeVoidAsync("NoorLogger.error", "HOST-DASHBOARD", "Exception loading dashboard data", new { error = ex.Message });
        }
    }

    private async Task RefreshDashboard()
    {
        isLoading = true;
        await LoadDashboardData();
        isLoading = false;
        StateHasChanged();
    }

    private async Task NavigateToCreateSession()
    {
        Logger.LogInformation("NOOR-INFO: Navigating to create session page");
        await JSRuntime.InvokeVoidAsync("NoorLogger.info", "NAVIGATION", "Navigating to create session", new { destination = "/host/session/create" });
        Navigation.NavigateTo("/host/session/create");
    }



    private async Task StartSession(System.Guid sessionId)
    {
        try
        {
            Logger.LogInformation("NOOR-INFO: Starting session: {SessionId}", sessionId);
            
            // âœ… LIVE API: Call backend to start session
            // First find the session to get the database SessionId
            var session = dashboardData?.RecentSessions.FirstOrDefault(s => s.Id == sessionId);
            if (session == null)
            {
                Logger.LogWarning("NOOR-WARNING: Session not found in dashboard data");
                await JSRuntime.InvokeVoidAsync("alert", "Session not found. Please refresh the dashboard.");
                return;
            }

            // TODO: Need to get the actual database SessionId from the GroupId
            // For now, using a workaround - this should be fixed when we have proper session mapping
            var response = await Http.PostAsync($"/api/host/session/{sessionId}/start", null);
            
            if (response.IsSuccessStatusCode)
            {
                session.Status = "Active";
                StateHasChanged();
                Logger.LogInformation("NOOR-SUCCESS: Session started successfully via API");
                await JSRuntime.InvokeVoidAsync("NoorLogger.info", "SESSION-MANAGEMENT", "Session started", new { sessionId = sessionId });
            }
            else
            {
                Logger.LogError("NOOR-ERROR: Failed to start session - HTTP {StatusCode}", response.StatusCode);
                await JSRuntime.InvokeVoidAsync("alert", $"Failed to start session: {response.ReasonPhrase}");
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "NOOR-ERROR: Exception starting session");
            await JSRuntime.InvokeVoidAsync("alert", "Failed to start session. Please try again.");
            await JSRuntime.InvokeVoidAsync("NoorLogger.error", "SESSION-MANAGEMENT", "Failed to start session", new { error = ex.Message });
        }
    }

    private async Task EndSession(System.Guid sessionId)
    {
        try
        {
            Logger.LogInformation("NOOR-INFO: Ending session: {SessionId}", sessionId);
            
            // âœ… LIVE API: Call backend to end session
            var session = dashboardData?.RecentSessions.FirstOrDefault(s => s.Id == sessionId);
            if (session == null)
            {
                Logger.LogWarning("NOOR-WARNING: Session not found in dashboard data");
                await JSRuntime.InvokeVoidAsync("alert", "Session not found. Please refresh the dashboard.");
                return;
            }

            var response = await Http.PostAsync($"/api/host/session/{sessionId}/end", null);
            
            if (response.IsSuccessStatusCode)
            {
                session.Status = "Completed";
                StateHasChanged();
                Logger.LogInformation("NOOR-SUCCESS: Session ended successfully via API");
                await JSRuntime.InvokeVoidAsync("NoorLogger.info", "SESSION-MANAGEMENT", "Session ended", new { sessionId = sessionId });
            }
            else
            {
                Logger.LogError("NOOR-ERROR: Failed to end session - HTTP {StatusCode}", response.StatusCode);
                await JSRuntime.InvokeVoidAsync("alert", $"Failed to end session: {response.ReasonPhrase}");
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "NOOR-ERROR: Exception ending session");
            await JSRuntime.InvokeVoidAsync("alert", "Failed to end session. Please try again.");
            await JSRuntime.InvokeVoidAsync("NoorLogger.error", "SESSION-MANAGEMENT", "Failed to end session", new { error = ex.Message });
        }
    }

    private void ViewSession(System.Guid sessionId)
    {
        Navigation.NavigateTo($"/session/{sessionId}");
    }

    private string GetStatusBadgeClass(string status)
    {
        return status switch
        {
            "Active" => "bg-success",
            "Created" => "bg-primary",
            "Completed" => "bg-secondary",
            _ => "bg-light text-dark"
        };
    }

    // API Response Models
    public class HostAuthResponse
    {
        public bool Success { get; set; }
        public string SessionToken { get; set; } = string.Empty;
        public DateTime ExpiresAt { get; set; }
        public string HostGuid { get; set; } = string.Empty;
    }

    public class HostDashboardResponse
    {
        public string HostName { get; set; } = string.Empty;
        public int ActiveSessions { get; set; }
        public int TotalParticipants { get; set; }
        public List<SessionSummaryResponse> RecentSessions { get; set; } = new();
    }

    public class SessionSummaryResponse
    {
        public long SessionId { get; set; }
        public Guid GroupId { get; set; }
        public string Status { get; set; } = string.Empty;
        public DateTime CreatedAt { get; set; }
        public int ParticipantCount { get; set; }
        public string SessionGuid { get; set; } = string.Empty;
    }

    // UI Models (duplicated here for now - should be in shared models)
    public class HostDashboardData
    {
        public string HostName { get; set; } = string.Empty;
        public int ActiveSessions { get; set; }
        public int TotalParticipants { get; set; }
        public List<SessionSummary> RecentSessions { get; set; } = new();
    }

    public class SessionSummary
    {
        public System.Guid Id { get; set; }
        public string Title { get; set; } = string.Empty;
        public string Status { get; set; } = string.Empty;
        public DateTime CreatedAt { get; set; }
        public int ParticipantCount { get; set; }
        public string SessionGuid { get; set; } = string.Empty;
        public string JoinLink { get; set; } = string.Empty;
    }

    public class SessionResponse
    {
        public Guid SessionId { get; set; }
        public string SessionGuid { get; set; } = string.Empty;
        public string JoinLink { get; set; } = string.Empty;
        public DateTime CreatedAt { get; set; }
        public DateTime ExpiresAt { get; set; }
    }

    public class CreateSessionRequest
    {
        public string Title { get; set; } = string.Empty;
        public string Description { get; set; } = string.Empty;
        public int? MaxParticipants { get; set; }
    }
}

<style>
.host-dashboard {
    min-height: 100vh;
    background-color: #f8f9fa;
}

.dashboard-header {
    background: white;
    padding: 2rem 0;
    border-bottom: 1px solid #dee2e6;
    margin-bottom: 2rem;
}

.dashboard-header h1 {
    color: #2c3e50;
    font-weight: 600;
    margin-bottom: 0.5rem;
}

.stats-card {
    background: white;
    border-radius: 10px;
    padding: 1.5rem;
    box-shadow: 0 2px 10px rgba(0,0,0,0.1);
    display: flex;
    align-items: center;
    margin-bottom: 1rem;
}

.stats-icon {
    width: 60px;
    height: 60px;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 1.5rem;
    color: white;
    margin-right: 1rem;
}

.stats-content h3 {
    font-size: 2rem;
    font-weight: 700;
    margin-bottom: 0;
    color: #2c3e50;
}

.stats-content p {
    margin-bottom: 0;
    color: #6c757d;
    font-size: 0.9rem;
}

.card {
    border: none;
    border-radius: 10px;
    box-shadow: 0 2px 10px rgba(0,0,0,0.1);
}

.card-header {
    background: white;
    border-bottom: 1px solid #dee2e6;
    border-radius: 10px 10px 0 0 !important;
}

.table th {
    border-top: none;
    font-weight: 600;
    color: #495057;
    font-size: 0.9rem;
}

.badge {
    font-size: 0.8rem;
}

.modal {
    background: rgba(0,0,0,0.5);
}

.modal-content {
    border: none;
    border-radius: 10px;
}

.btn {
    border-radius: 6px;
    font-weight: 500;
}

.btn-sm {
    font-size: 0.8rem;
}
</style>
