@page "/host/session/create"
@using Microsoft.AspNetCore.Components
@using System.Net.Http.Json
@using System.Text.Json.Serialization
@inject IJSRuntime JSRuntime
@inject NavigationManager Navigation
@inject ILogger<CreateSession> Logger
@inject IHttpClientFactory HttpClientFactory

<div class="container mt-4">
    <div class="row justify-content-center">
        <div class="col-lg-8">
            <div class="card shadow">
                <div class="card-header bg-primary text-white">
                    <h3 class="mb-0"><i class="fas fa-plus-circle"></i> Create New Session</h3>
                </div>
                <div class="card-body">
                    <p class="text-muted">Select your content album, category, and session to begin</p>
                    
                    @if (!string.IsNullOrEmpty(errorMessage))
                    {
                        <div class="alert alert-danger" role="alert">
                            <i class="fas fa-exclamation-circle"></i> @errorMessage
                        </div>
                    }

                    <form @onsubmit="CreateNewSession" @onsubmit:preventDefault="true">
                        <div class="row">
                            <!-- Album Selection -->
                            <div class="col-md-4 mb-3">
                                <label class="form-label">Album</label>
                                <select class="form-select" value="@selectedAlbumId" @onchange="OnAlbumChanged" disabled="@isLoading">
                                    <option value="">Select Album...</option>
                                    @if (albums != null)
                                    {
                                        @foreach (var album in albums)
                                        {
                                            <option value="@album.GroupId">@album.GroupName</option>
                                        }
                                    }
                                </select>
                                @if (isLoadingAlbums)
                                {
                                    <small class="text-muted"><i class="fas fa-spinner fa-spin"></i> Loading albums...</small>
                                }
                            </div>

                            <!-- Category Selection -->
                            <div class="col-md-4 mb-3">
                                <label class="form-label">Category</label>
                                <select class="form-select" value="@selectedCategoryId" @onchange="OnCategoryChanged" disabled="@(isLoading || string.IsNullOrEmpty(selectedAlbumId))">
                                    <option value="">Select Category...</option>
                                    @if (categories != null)
                                    {
                                        @foreach (var category in categories)
                                        {
                                            <option value="@category.CategoryId">@category.CategoryName</option>
                                        }
                                    }
                                </select>
                                @if (isLoadingCategories)
                                {
                                    <small class="text-muted"><i class="fas fa-spinner fa-spin"></i> Loading categories...</small>
                                }
                            </div>

                            <!-- Session Selection -->
                            <div class="col-md-4 mb-3">
                                <label class="form-label">Session</label>
                                <select class="form-select" @bind="selectedSessionId" disabled="@(isLoading || string.IsNullOrEmpty(selectedCategoryId))">
                                    <option value="">Select Session...</option>
                                    @if (sessions != null)
                                    {
                                        @foreach (var session in sessions)
                                        {
                                            <option value="@session.SessionId">@session.SessionName</option>
                                        }
                                    }
                                </select>
                                @if (isLoadingSessions)
                                {
                                    <small class="text-muted"><i class="fas fa-spinner fa-spin"></i> Loading sessions...</small>
                                }
                            </div>
                        </div>

                        <div class="row">
                            <div class="col-12">
                                <button type="submit" class="btn btn-primary btn-lg w-100" 
                                        disabled="@(isLoading || string.IsNullOrEmpty(selectedSessionId))">
                                    @if (isLoading)
                                    {
                                        <span class="spinner-border spinner-border-sm me-2"></span>
                                    }
                                    <i class="fas fa-rocket"></i> Create Session
                                </button>
                            </div>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter] public string? Guid { get; set; }
    
    private string? selectedAlbumId = "";
    private string? selectedCategoryId = "";
    private string? selectedSessionId = "";
    private string errorMessage = "";
    private bool isLoading = false;
    private bool isLoadingAlbums = false;
    private bool isLoadingCategories = false;
    private bool isLoadingSessions = false;
    
    private List<AlbumDto>? albums = null;
    private List<CategoryDto>? categories = null;
    private List<SessionDto>? sessions = null;

    protected override async Task OnInitializedAsync()
    {
        Logger.LogInformation("NOOR-INFO: CreateSession page initialized");
        await LoadAlbums();
    }

    protected override void OnParametersSet()
    {
        // Get GUID from query string if not provided as parameter
        if (string.IsNullOrEmpty(Guid))
        {
            var uri = new Uri(Navigation.Uri);
            var queryParams = Microsoft.AspNetCore.WebUtilities.QueryHelpers.ParseQuery(uri.Query);
            if (queryParams.TryGetValue("guid", out var guidValues))
            {
                Guid = guidValues.FirstOrDefault();
            }
        }
        
        Logger.LogInformation("NOOR-INFO: Host GUID for session creation: {Guid}", Guid?.Substring(0, 8) + "...");
    }

    private async Task LoadAlbums()
    {
        isLoadingAlbums = true;
        try
        {
            Logger.LogInformation("NOOR-INFO: Loading albums from KSESSIONS_DEV");
            
            using var httpClient = HttpClientFactory.CreateClient();
            var response = await httpClient.GetAsync("/api/host/albums");
            
            if (response.IsSuccessStatusCode)
            {
                albums = await response.Content.ReadFromJsonAsync<List<AlbumDto>>();
                Logger.LogInformation("NOOR-SUCCESS: Loaded {Count} albums", albums?.Count ?? 0);
            }
            else
            {
                Logger.LogWarning("NOOR-WARNING: Failed to load albums - HTTP {StatusCode}", response.StatusCode);
                errorMessage = "Failed to load albums. Please try again.";
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "NOOR-ERROR: Exception loading albums");
            errorMessage = "Error connecting to database. Please check your connection.";
        }
        finally
        {
            isLoadingAlbums = false;
            StateHasChanged();
        }
    }

    private async Task OnAlbumChanged(ChangeEventArgs e)
    {
        selectedAlbumId = e.Value?.ToString();
        selectedCategoryId = "";
        selectedSessionId = "";
        categories = null;
        sessions = null;
        
        if (!string.IsNullOrEmpty(selectedAlbumId) && int.TryParse(selectedAlbumId, out int albumId))
        {
            await LoadCategories(albumId);
        }
    }

    private async Task LoadCategories(int albumId)
    {
        isLoadingCategories = true;
        try
        {
            Logger.LogInformation("NOOR-INFO: Loading categories for album {AlbumId}", albumId);
            
            using var httpClient = HttpClientFactory.CreateClient();
            var response = await httpClient.GetAsync($"/api/host/categories/{albumId}");
            
            if (response.IsSuccessStatusCode)
            {
                categories = await response.Content.ReadFromJsonAsync<List<CategoryDto>>();
                Logger.LogInformation("NOOR-SUCCESS: Loaded {Count} categories", categories?.Count ?? 0);
            }
            else
            {
                Logger.LogWarning("NOOR-WARNING: Failed to load categories - HTTP {StatusCode}", response.StatusCode);
                errorMessage = "Failed to load categories. Please try again.";
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "NOOR-ERROR: Exception loading categories");
            errorMessage = "Error loading categories. Please check your connection.";
        }
        finally
        {
            isLoadingCategories = false;
            StateHasChanged();
        }
    }

    private async Task OnCategoryChanged(ChangeEventArgs e)
    {
        selectedCategoryId = e.Value?.ToString();
        selectedSessionId = "";
        sessions = null;
        
        if (!string.IsNullOrEmpty(selectedCategoryId) && int.TryParse(selectedCategoryId, out int categoryId))
        {
            await LoadSessions(categoryId);
        }
    }

    private async Task LoadSessions(int categoryId)
    {
        isLoadingSessions = true;
        try
        {
            Logger.LogInformation("NOOR-INFO: Loading sessions for category {CategoryId}", categoryId);
            
            using var httpClient = HttpClientFactory.CreateClient();
            var response = await httpClient.GetAsync($"/api/host/sessions/{categoryId}");
            
            if (response.IsSuccessStatusCode)
            {
                sessions = await response.Content.ReadFromJsonAsync<List<SessionDto>>();
                Logger.LogInformation("NOOR-SUCCESS: Loaded {Count} sessions", sessions?.Count ?? 0);
            }
            else
            {
                Logger.LogWarning("NOOR-WARNING: Failed to load sessions - HTTP {StatusCode}", response.StatusCode);
                errorMessage = "Failed to load sessions. Please try again.";
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "NOOR-ERROR: Exception loading sessions");
            errorMessage = "Error loading sessions. Please check your connection.";
        }
        finally
        {
            isLoadingSessions = false;
            StateHasChanged();
        }
    }

    private async Task CreateNewSession()
    {
        if (string.IsNullOrEmpty(selectedSessionId) || string.IsNullOrEmpty(Guid))
            return;

        isLoading = true;
        try
        {
            Logger.LogInformation("NOOR-INFO: Creating session for GUID {Guid} with session {SessionId}", 
                Guid.Substring(0, 8) + "...", selectedSessionId);

            var createRequest = new
            {
                HostGuid = Guid,
                SessionId = int.Parse(selectedSessionId),
                AlbumId = int.Parse(selectedAlbumId!),
                CategoryId = int.Parse(selectedCategoryId!)
            };

            using var httpClient = HttpClientFactory.CreateClient();
            var response = await httpClient.PostAsJsonAsync("/api/host/create-session", createRequest);

            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<CreateSessionResponse>();
                Logger.LogInformation("NOOR-SUCCESS: Session created successfully - ID: {SessionId}", result?.SessionId);
                
                Navigation.NavigateTo($"/host/dashboard?sessionId={result?.SessionId}");
            }
            else
            {
                Logger.LogWarning("NOOR-WARNING: Session creation failed - HTTP {StatusCode}", response.StatusCode);
                errorMessage = "Failed to create session. Please try again.";
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "NOOR-ERROR: Exception creating session");
            errorMessage = "Error creating session. Please try again.";
        }
        finally
        {
            isLoading = false;
        }
    }

    // DTO classes for API responses
    public class AlbumDto
    {
        public int GroupId { get; set; }
        public string GroupName { get; set; } = "";
    }

    public class CategoryDto
    {
        public int CategoryId { get; set; }
        public string CategoryName { get; set; } = "";
        public int GroupId { get; set; }
    }

    public class SessionDto
    {
        public int SessionId { get; set; }
        public string SessionName { get; set; } = "";
        public int CategoryId { get; set; }
    }

    public class CreateSessionResponse
    {
        public int SessionId { get; set; }
        public string Status { get; set; } = "";
    }
}
