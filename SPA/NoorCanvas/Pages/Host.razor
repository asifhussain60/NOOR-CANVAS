@page "/host"
@using System.Net.Http.Json
@using System.Text.Json.Serialization
@inject HttpClient Http
@inject IJSRuntime JSRuntime
@inject NavigationManager Navigation
@inject ILogger<Host> Logger
@inject IHttpClientFactory HttpClientFactory

<div class="host-auth-container">
    <div class="container">
        <div class="row justify-content-center">
            <div class="col-lg-6">
                <div class="auth-card">
                    <div class="text-center mb-4">
                        <i class="fas fa-chalkboard-teacher fa-3x text-primary mb-3"></i>
                        <h2>Host Authentication</h2>
                        @if (!string.IsNullOrEmpty(SessionId))
                        {
                            <p class="text-muted">Enter your Host GUID to access Session @SessionId</p>
                        }
                        else
                        {
                            <p class="text-muted">Enter your Host GUID to access your dashboard</p>
                        }
                    </div>

                    @if (isLoading)
                    {
                        <div class="text-center py-4">
                            <div class="spinner-border text-primary" role="status">
                                <span class="visually-hidden">Authenticating...</span>
                            </div>
                            <p class="mt-3">Verifying Host GUID...</p>
                        </div>
                    }
                    else if (!string.IsNullOrEmpty(errorMessage))
                    {
                        <div class="alert alert-danger">
                            <i class="fas fa-exclamation-triangle"></i> @errorMessage
                        </div>
                    }

                    <form @onsubmit="AuthenticateHost" @onsubmit:preventDefault="true">
                        <div class="mb-3">
                            <label class="form-label">Host GUID</label>
                            <input type="text" class="form-control" @bind="hostGuid" 
                                   placeholder="Enter your Host GUID" required 
                                   disabled="@isLoading" />
                            <div class="form-text">
                                Use the Host GUID provided by your administrator or generated by the HostProvisioner tool
                            </div>
                        </div>

                        <button type="submit" class="btn btn-primary w-100" disabled="@(isLoading || string.IsNullOrWhiteSpace(hostGuid))">
                            @if (isLoading)
                            {
                                <span class="spinner-border spinner-border-sm me-2"></span>
                                @("Authenticating...")
                            }
                            else
                            {
                                <i class="fas fa-sign-in-alt me-2"></i>
                                @("Access Dashboard")
                            }
                        </button>
                    </form>

                    @if (!string.IsNullOrEmpty(SessionId))
                    {
                        <div class="mt-3 text-center">
                            <small class="text-muted">
                                Session ID: @SessionId
                            </small>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter]
    [SupplyParameterFromQuery(Name = "sessionid")]
    public string? SessionId { get; set; }

    private string hostGuid = "";
    private bool isLoading = false;
    private string errorMessage = "";

    protected override async Task OnInitializedAsync()
    {
        try
        {
            Logger.LogInformation("NOOR-INFO: Host authentication page loaded for session: {SessionId}", SessionId ?? "None");
            await JSRuntime.InvokeVoidAsync("NoorLogger.info", "HOST-PAGE", "Host authentication page loaded", new { sessionId = SessionId });
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "NOOR-ERROR: Failed to initialize host page");
        }
    }

    private async Task AuthenticateHost()
    {
        if (string.IsNullOrWhiteSpace(hostGuid))
            return;

        isLoading = true;
        errorMessage = "";
        Logger.LogInformation("NOOR-INFO: Host authentication attempt with GUID: {HostGuid}", hostGuid.Substring(0, 8) + "...");

        try
        {
            await JSRuntime.InvokeVoidAsync("NoorLogger.info", "HOST-AUTH", "Host authentication initiated", new { 
                guidPreview = hostGuid.Substring(0, 8) + "...",
                sessionId = SessionId 
            });

            if (Guid.TryParse(hostGuid, out Guid guid))
            {
                using var httpClient = HttpClientFactory.CreateClient("default");
                var request = new { HostGuid = hostGuid };
                var response = await httpClient.PostAsJsonAsync("/api/host/authenticate", request);

                if (response.IsSuccessStatusCode)
                {
                    var authResponse = await response.Content.ReadFromJsonAsync<HostAuthResponse>();
                    if (authResponse?.Success == true)
                    {
                        Logger.LogInformation("NOOR-SUCCESS: Host GUID authenticated successfully, redirecting to dashboard");
                        await JSRuntime.InvokeVoidAsync("NoorLogger.info", "HOST-AUTH", "Host authentication successful", new { 
                            hostGuid = guid,
                            sessionId = SessionId 
                        });

                        // If a specific session was requested, include it in the redirect
                        if (!string.IsNullOrEmpty(SessionId))
                        {
                            Navigation.NavigateTo($"/host/session-manager?guid={guid}&sessionId={SessionId}");
                        }
                        else
                        {
                            Navigation.NavigateTo($"/host/dashboard?guid={guid}");
                        }
                        return;
                    }
                }

                Logger.LogWarning("NOOR-WARNING: Host authentication failed for GUID: {HostGuid}", hostGuid.Substring(0, 8) + "...");
                await JSRuntime.InvokeVoidAsync("NoorLogger.error", "HOST-AUTH", "Host authentication failed", new { 
                    error = "Invalid credentials",
                    sessionId = SessionId 
                });
                errorMessage = "Invalid Host GUID or authentication failed.";
            }
            else
            {
                Logger.LogWarning("NOOR-WARNING: Invalid GUID format: {HostGuid}", hostGuid.Substring(0, 8) + "...");
                errorMessage = "Invalid GUID format. Please check your Host GUID and try again.";
            }
        }
        catch (HttpRequestException httpEx)
        {
            Logger.LogError(httpEx, "NOOR-ERROR: Network error during host authentication");
            await JSRuntime.InvokeVoidAsync("NoorLogger.error", "HOST-AUTH", "Network error during authentication", new { error = httpEx.Message });
            errorMessage = "Network error. Please check your connection and try again.";
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "NOOR-ERROR: Host authentication failed with error: {Error}", ex.Message);
            await JSRuntime.InvokeVoidAsync("NoorLogger.error", "HOST-AUTH", "Authentication error", new { error = ex.Message });
            errorMessage = "Authentication failed. Please try again.";
        }
        finally
        {
            isLoading = false;
        }
    }

    // API Response Model
    public class HostAuthResponse
    {
        [JsonPropertyName("success")]
        public bool Success { get; set; }
        
        [JsonPropertyName("sessionToken")]
        public string SessionToken { get; set; } = string.Empty;
        
        [JsonPropertyName("expiresAt")]
        public DateTime ExpiresAt { get; set; }
        
        [JsonPropertyName("hostGuid")]
        public string HostGuid { get; set; } = string.Empty;
    }
}

<style>
.host-auth-container {
    min-height: 100vh;
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    padding: 40px 20px;
    display: flex;
    align-items: center;
}

.auth-card {
    background: white;
    border-radius: 15px;
    padding: 40px;
    box-shadow: 0 15px 35px rgba(0,0,0,0.1);
    border: none;
}

.form-control {
    border-radius: 10px;
    padding: 12px 16px;
    border: 2px solid #e2e8f0;
    transition: all 0.3s ease;
}

.form-control:focus {
    border-color: #667eea;
    box-shadow: 0 0 0 0.2rem rgba(102, 126, 234, 0.25);
}

.btn-primary {
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    border: none;
    border-radius: 10px;
    padding: 12px 24px;
    font-weight: 600;
    transition: all 0.3s ease;
}

.btn-primary:hover {
    transform: translateY(-2px);
    box-shadow: 0 8px 25px rgba(102, 126, 234, 0.4);
}

.btn-primary:disabled {
    background: #6c757d;
    transform: none;
    box-shadow: none;
}

.alert {
    border-radius: 10px;
    border: none;
    padding: 15px;
}

.alert-danger {
    background-color: #fee;
    color: #c53030;
}

.text-primary {
    color: #667eea !important;
}

.spinner-border {
    width: 1.5rem;
    height: 1.5rem;
}
</style>
