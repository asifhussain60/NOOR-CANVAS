@page "/host/session-opener"
@page "/host/session-opener/{friendlyToken?}"
@layout EmptyLayout
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Web
@using System.ComponentModel.DataAnnotations
@using System.Net.Http.Json
@using System.Text.Json.Serialization
@inject IHttpClientFactory HttpClientFactory
@inject IJSRuntime JSRuntime
@inject NavigationManager Navigation
@inject ILogger<Host_SessionOpener> Logger

<PageTitle>NOOR Canvas - Host Session Configuration</PageTitle>

<HeadContent>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Playfair+Display:wght@400;700;900&family=Cinzel+Decorative:wght@400;700&family=Inter:wght@400;500;600&family=Poppins:wght@400;600;700&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <style>
        .responsive-form-container {
            width: 100%;
            max-width: 24rem; /* max-w-sm */
            background-color: #FFFFFF;
            border-radius: 1.5rem;
            padding: 1.5rem 2rem;
            gap: 1.5rem;
            box-shadow: 0 25px 50px -12px rgba(0,0,0,0.25);
            border: 1px solid #e5e7eb;
            display: flex;
            flex-direction: column;
        }
        @@media (min-width: 768px) {
            .responsive-form-container { max-width: 32rem; } /* md:max-w-lg */
        }
        @@media (min-width: 1024px) {
            .responsive-form-container { max-width: 42rem; } /* lg:max-w-2xl */
        }
        .two-column-grid {
            display: grid;
            grid-template-columns: 1fr;
            gap: 1.5rem;
        }
        @@media (min-width: 768px) {
            .two-column-grid { grid-template-columns: 1fr 1fr; }
        }
    </style>
</HeadContent>

<!-- Root container - converted from Tailwind -->
<div style="background-color:#F8F5F1;display:flex;align-items:center;justify-content:center;min-height:100vh;padding:1.5rem;font-family:'Inter',sans-serif;">
    
    <!-- Main container - responsive width constraints: max-w-sm md:max-w-lg lg:max-w-2xl -->
    <div class="responsive-form-container"
        
        <!-- Logo -->
        <div style="display:flex;justify-content:center;margin-bottom:1.5rem;margin-top:2rem;">
            <img src="/images/branding/NC-Header.png?v=@DateTime.Now.Ticks" alt="@(Model?.LogoText ?? "NOOR Canvas")" style="max-width:120px;height:120px;border-radius:50%;object-fit:cover;" />
        </div>

        <!-- Title - converted from poppins font-bold text-3xl sm:text-4xl text-[#006400] flex items-center justify-center space-x-2 -->
        <h1 style="font-family:'Poppins',sans-serif;font-weight:700;font-size:1.875rem;color:#006400;display:flex;align-items:center;justify-content:center;gap:0.5rem;margin-bottom:1.5rem;">
            <i class="fa-solid fa-user-tie" style="font-size:2.5rem;color:#006400;"></i>
            <span>Host Session Opener</span>
        </h1>

        <!-- Session Panel - converted from w-full bg-white rounded-2xl gold-border p-6 sm:p-8 space-y-6 shadow-inner text-center -->
        <div style="width:100%;background-color:#FFFFFF;border-radius:1rem;border:2px solid;border-image:linear-gradient(to right, #C5B358, #D4AF37, #C5B358) 1;padding:1.5rem 2rem;gap:1.5rem;box-shadow:inset 0 2px 4px 0 rgba(0,0,0,0.06);text-align:center;display:flex;flex-direction:column;">
            
            <!-- Error message container -->
            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <div style="color:#ef4444;font-size:0.875rem;font-family:'Poppins',sans-serif;margin-bottom:1rem;display:block;">@errorMessage</div>
            }
            
            <!-- Microphone icon - converted from p-4 rounded-full border-4 border-[#006400] mb-4 -->
            <div style="padding:1rem;border-radius:50%;border:4px solid #006400;margin-bottom:1rem;display:inline-flex;align-items:center;justify-content:center;align-self:center;">
                <i class="fa-solid fa-microphone" style="font-size:3.75rem;color:#006400;"></i>
            </div>
            
            <!-- Host Controls Grid - responsive 2-column layout -->
            <div class="two-column-grid" style="width:100%;max-width:32rem;margin:0 auto;">
                
                <!-- Dropdown controls column - converted from space-y-4 -->
                <div style="display:flex;flex-direction:column;gap:1rem;">
                    
                    <!-- Album dropdown - converted from w-full -->
                    <div style="width:100%;">
                        <label for="album-select" style="display:block;font-size:0.875rem;font-weight:500;color:#374151;text-align:left;margin-bottom:0.25rem;">Album</label>
                        <select id="album-select" required @bind="Model!.SelectedAlbum" @bind:after="OnAlbumChanged" 
                                style="width:100%;padding:0.5rem;border:1px solid #d1d5db;border-radius:0.375rem;outline:none;transition:all 0.2s;@(string.IsNullOrEmpty(Model?.SelectedAlbum) ? "color:#9ca3af;" : "color:#1f2937;")">
                            <option value="">Select Album</option>
                            @if (Albums != null)
                            {
                                @foreach (var album in Albums)
                                {
                                    <option value="@album.GroupID">@album.GroupName</option>
                                }
                            }
                        </select>
                    </div>
                    
                    <!-- Category dropdown -->
                    <div style="width:100%;">
                        <label for="category-select" style="display:block;font-size:0.875rem;font-weight:500;color:#374151;text-align:left;margin-bottom:0.25rem;">Category</label>
                        <select id="category-select" required @bind="Model!.SelectedCategory" @bind:after="OnCategoryChanged" disabled="@(string.IsNullOrEmpty(Model?.SelectedAlbum))"
                                style="width:100%;padding:0.5rem;border:1px solid #d1d5db;border-radius:0.375rem;outline:none;transition:all 0.2s;@(string.IsNullOrEmpty(Model?.SelectedCategory) ? "color:#9ca3af;" : "color:#1f2937;")">
                            <option value="">Select Category</option>
                            @if (Categories != null)
                            {
                                @foreach (var category in Categories)
                                {
                                    <option value="@category.CategoryID">@category.CategoryName</option>
                                }
                            }
                        </select>
                    </div>
                    
                    <!-- Session dropdown -->
                    <div style="width:100%;">
                        <label for="session-select" style="display:block;font-size:0.875rem;font-weight:500;color:#374151;text-align:left;margin-bottom:0.25rem;">Session</label>
                        <select id="session-select" required @bind="Model!.SelectedSession" @bind:after="OnSessionChanged" disabled="@(string.IsNullOrEmpty(Model?.SelectedCategory))"
                                style="width:100%;padding:0.5rem;border:1px solid #d1d5db;border-radius:0.375rem;outline:none;transition:all 0.2s;@(string.IsNullOrEmpty(Model?.SelectedSession) ? "color:#9ca3af;" : "color:#1f2937;")">
                            <option value="">Select Session</option>
                            @if (Sessions != null)
                            {
                                @foreach (var session in Sessions)
                                {
                                    <option value="@session.SessionID">@session.SessionName</option>
                                }
                            }
                        </select>
                    </div>
                </div>

                <!-- Host Inputs column - converted from space-y-4 -->
                <div style="display:flex;flex-direction:column;gap:1rem;">
                    
                    <!-- Date input -->
                    <div style="width:100%;">
                        <label for="session-date" style="display:block;font-size:0.875rem;font-weight:500;color:#374151;text-align:left;margin-bottom:0.25rem;">Date</label>
                        <input type="date" id="session-date" required @bind="Model!.SessionDate" 
                               style="width:100%;padding:0.5rem;border:1px solid #d1d5db;border-radius:0.375rem;outline:none;color:#1f2937;">
                    </div>
                    
                    <!-- Time input -->
                    <div style="width:100%;">
                        <label for="session-time" style="display:block;font-size:0.875rem;font-weight:500;color:#374151;text-align:left;margin-bottom:0.25rem;">Start Time (EST)</label>
                        <input type="text" id="session-time" required placeholder="HH:MM AM/PM" @bind="Model!.StartTime" @oninput="FormatTime" 
                               style="width:100%;padding:0.5rem;border:1px solid #d1d5db;border-radius:0.375rem;outline:none;color:#1f2937;">
                    </div>
                    
                    <!-- Duration input -->
                    <div style="width:100%;">
                        <label for="session-duration" style="display:block;font-size:0.875rem;font-weight:500;color:#374151;text-align:left;margin-bottom:0.25rem;">Duration (minutes)</label>
                        <input type="number" id="session-duration" required @bind="Model!.SessionDuration" placeholder="Enter duration" 
                               style="width:100%;padding:0.5rem;border:1px solid #d1d5db;border-radius:0.375rem;outline:none;color:#1f2937;">
                    </div>
                </div>
            </div>

            <!-- Open Session Button -->
            <div style="display:flex;justify-content:center;width:100%;margin-top:1.5rem;">
                <button id="openSessionBtn" @onclick="HandleOpenSession" disabled="@(!IsFormValid() || isLoading)" 
                        style="width:100%;max-width:18rem;font-family:'Inter',sans-serif;font-weight:600;padding:0.75rem 1.5rem;border-radius:9999px;background-color:@(IsFormValid() && !isLoading ? "#006400" : "#9ca3af");color:#FFFFFF;border:none;cursor:@(IsFormValid() && !isLoading ? "pointer" : "not-allowed");box-shadow:0 4px 6px -1px rgba(0,0,0,0.1);display:flex;align-items:center;justify-content:center;gap:0.5rem;transition:all 0.2s;">
                    @if (isLoading)
                    {
                        <div style="width:1rem;height:1rem;border:2px solid #ffffff;border-top:2px solid transparent;border-radius:50%;animation:spin 1s linear infinite;"></div>
                    }
                    else
                    {
                        <i class="fa-solid fa-arrow-right"></i>
                    }
                    <span>@(isLoading ? "Opening..." : "Open Session")</span>
                </button>
            </div>
        </div>
        
        <!-- Session URL Panel - converted from w-full bg-white rounded-2xl gold-border p-6 sm:p-8 space-y-4 shadow-inner -->
        <div style="width:100%;background-color:#FFFFFF;border-radius:1rem;border:2px solid;border-image:linear-gradient(to right, #C5B358, #D4AF37, #C5B358) 1;padding:1.5rem 2rem;gap:1rem;box-shadow:inset 0 2px 4px 0 rgba(0,0,0,0.06);display:flex;flex-direction:column;">
            <h3 style="font-family:'Poppins',sans-serif;font-weight:700;font-size:1.125rem;color:#006400;">Session URL</h3>
            <div style="display:flex;flex-direction:column;align-items:center;justify-content:space-between;gap:0.5rem;">
                <span id="sessionUrl" style="font-family:'Inter',sans-serif;font-size:0.875rem;font-weight:600;color:#111827;word-break:break-all;">@GenerateSessionUrl()</span>
                <button id="copyButton" @onclick="CopyUrlToClipboard" 
                        style="font-family:'Inter',sans-serif;font-weight:600;padding:0.5rem 1rem;border-radius:9999px;background-color:#D4AF37;color:#FFFFFF;border:none;cursor:pointer;box-shadow:0 4px 6px -1px rgba(0,0,0,0.1);display:flex;align-items:center;gap:0.5rem;transition:all 0.2s;">
                    <i class="fa-solid fa-copy"></i>
                    <span>Copy Link</span>
                </button>
            </div>
            <div style="display:flex;justify-content:center;">
                <button id="openWaitingRoomBtn" @onclick="OpenWaitingRoom" disabled="@(!IsFormValid())"
                        style="width:100%;max-width:18rem;font-family:'Inter',sans-serif;font-weight:600;padding:0.75rem 1.5rem;border-radius:9999px;background-color:@(IsFormValid() ? "#006400" : "#9ca3af");color:#FFFFFF;border:none;cursor:@(IsFormValid() ? "pointer" : "not-allowed");box-shadow:0 4px 6px -1px rgba(0,0,0,0.1);display:flex;align-items:center;justify-content:center;gap:0.5rem;margin-top:1rem;transition:all 0.2s;">
                    <i class="fa-solid fa-hourglass-half"></i>
                    <span>Open Waiting Room</span>
                </button>
            </div>
        </div>
    </div>
</div>

<style>
@@keyframes spin {
    to { transform: rotate(360deg); }
}
</style>

@code {
    [Parameter] public string? FriendlyToken { get; set; }
    
    private HostSessionOpenerViewModel? Model { get; set; }
    private List<AlbumInfo>? Albums { get; set; }
    private List<CategoryInfo>? Categories { get; set; }
    private List<SessionInfo>? Sessions { get; set; }
    
    private bool isLoading = false;
    private string errorMessage = "";
    private bool showSessionUrlPanel = false;

    protected override async Task OnInitializedAsync()
    {
        var requestId = Guid.NewGuid().ToString("N")[..8];
        Logger.LogInformation("NOOR-HOST-OPENER: [{RequestId}] Host-SessionOpener OnInitialized - FriendlyToken: {FriendlyToken}", 
            requestId, FriendlyToken ?? "null");

        Model = new HostSessionOpenerViewModel
        {
            LogoText = "NOOR Canvas",
            FriendlyToken = FriendlyToken ?? "",
            SessionDate = DateTime.Today,
            StartTime = "",
            SessionDuration = null,
            SelectedAlbum = "",
            SelectedCategory = "",
            SelectedSession = ""
        };

        // Load albums for dropdown
        await LoadAlbums();
    }

    private async Task LoadAlbums()
    {
        var requestId = Guid.NewGuid().ToString("N")[..8];
        try
        {
            Logger.LogInformation("NOOR-HOST-OPENER: [{RequestId}] Loading albums from KSESSIONS database for token: {Token}", 
                requestId, !string.IsNullOrEmpty(Model?.FriendlyToken) ? Model.FriendlyToken.Substring(0, Math.Min(4, Model.FriendlyToken.Length)) + "..." : "NULL");
            
            if (string.IsNullOrEmpty(Model?.FriendlyToken))
            {
                Logger.LogWarning("NOOR-HOST-OPENER: [{RequestId}] No friendly token available for albums API call", requestId);
                errorMessage = "Authentication token required to load albums.";
                return;
            }

            using var httpClient = HttpClientFactory.CreateClient("default");
            var response = await httpClient.GetAsync($"/api/host/albums?guid={Model.FriendlyToken}");
            
            Logger.LogInformation("NOOR-HOST-OPENER: [{RequestId}] Albums API response - StatusCode: {StatusCode}", 
                requestId, response.StatusCode);
            
            if (response.IsSuccessStatusCode)
            {
                var rawJson = await response.Content.ReadAsStringAsync();
                Logger.LogInformation("NOOR-HOST-OPENER: [{RequestId}] Raw albums JSON: {RawJson}", requestId, rawJson);
                
                var apiAlbums = await response.Content.ReadFromJsonAsync<List<NoorCanvas.Controllers.AlbumData>>();
                Albums = apiAlbums?.Select(a => new AlbumInfo 
                { 
                    GroupID = a.GroupId.ToString(), 
                    GroupName = a.GroupName 
                }).ToList() ?? new List<AlbumInfo>();
                
                Logger.LogInformation("NOOR-HOST-OPENER: [{RequestId}] Successfully loaded {Count} albums from database", 
                    requestId, Albums?.Count ?? 0);
            }
            else
            {
                Logger.LogWarning("NOOR-HOST-OPENER: [{RequestId}] Failed to load albums - HTTP {StatusCode}", 
                    requestId, response.StatusCode);
                errorMessage = "Failed to load albums from database. Please try again.";
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "NOOR-HOST-OPENER: [{RequestId}] Exception loading albums", requestId);
            errorMessage = "Error connecting to database. Please check your connection.";
        }
    }    private async Task OnAlbumChanged()
    {
        var requestId = Guid.NewGuid().ToString("N")[..8];
        var selectedAlbumId = Model!.SelectedAlbum;
        
        Logger.LogInformation("NOOR-HOST-OPENER: [{RequestId}] Album selection changed to: {AlbumId}", requestId, selectedAlbumId);
        
        Model.SelectedCategory = ""; // Reset
        Model.SelectedSession = "";  // Reset
        
        Categories?.Clear();
        Sessions?.Clear();
        
        if (!string.IsNullOrEmpty(selectedAlbumId))
        {
            Logger.LogInformation("NOOR-HOST-OPENER: [{RequestId}] Loading categories for selected album", requestId);
            await LoadCategories(selectedAlbumId);
        }
        else
        {
            Logger.LogInformation("NOOR-HOST-OPENER: [{RequestId}] No album selected - clearing dependent dropdowns", requestId);
        }
        
        StateHasChanged();
    }

    private async Task LoadCategories(string albumId)
    {
        var requestId = Guid.NewGuid().ToString("N")[..8];
        try
        {
            Logger.LogInformation("NOOR-HOST-OPENER: [{RequestId}] Loading categories from KSESSIONS database for album: {AlbumId}", 
                requestId, albumId);
            
            if (string.IsNullOrEmpty(Model?.FriendlyToken))
            {
                Logger.LogWarning("NOOR-HOST-OPENER: [{RequestId}] No friendly token available for categories API call", requestId);
                errorMessage = "Authentication token required to load categories.";
                return;
            }

            using var httpClient = HttpClientFactory.CreateClient("default");
            var response = await httpClient.GetAsync($"/api/host/categories/{albumId}?guid={Model.FriendlyToken}");
            
            Logger.LogInformation("NOOR-HOST-OPENER: [{RequestId}] Categories API response - StatusCode: {StatusCode}", 
                requestId, response.StatusCode);
            
            if (response.IsSuccessStatusCode)
            {
                var rawJson = await response.Content.ReadAsStringAsync();
                Logger.LogInformation("NOOR-HOST-OPENER: [{RequestId}] Raw categories JSON: {RawJson}", requestId, rawJson);
                
                var apiCategories = await response.Content.ReadFromJsonAsync<List<NoorCanvas.Controllers.CategoryData>>();
                Categories = apiCategories?.Select(c => new CategoryInfo 
                { 
                    CategoryID = c.CategoryId.ToString(), 
                    CategoryName = c.CategoryName 
                }).ToList() ?? new List<CategoryInfo>();
                
                Logger.LogInformation("NOOR-HOST-OPENER: [{RequestId}] Successfully loaded {Count} categories from database", 
                    requestId, Categories?.Count ?? 0);
            }
            else
            {
                Logger.LogWarning("NOOR-HOST-OPENER: [{RequestId}] Failed to load categories - HTTP {StatusCode}", 
                    requestId, response.StatusCode);
                errorMessage = "Failed to load categories from database. Please try again.";
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "NOOR-HOST-OPENER: [{RequestId}] Exception loading categories for album {AlbumId}", requestId, albumId);
            errorMessage = "Error connecting to database. Please check your connection.";
        }
    }

    private async Task OnCategoryChanged()
    {
        var requestId = Guid.NewGuid().ToString("N")[..8];
        var selectedCategoryId = Model!.SelectedCategory;
        
        Logger.LogInformation("NOOR-HOST-OPENER: [{RequestId}] Category selection changed to: {CategoryId}", requestId, selectedCategoryId);
        
        Model.SelectedSession = ""; // Reset
        Sessions?.Clear();
        
        if (!string.IsNullOrEmpty(selectedCategoryId))
        {
            Logger.LogInformation("NOOR-HOST-OPENER: [{RequestId}] Loading sessions for selected category", requestId);
            await LoadSessions(selectedCategoryId);
        }
        else
        {
            Logger.LogInformation("NOOR-HOST-OPENER: [{RequestId}] No category selected - clearing sessions dropdown", requestId);
        }
        
        StateHasChanged();
    }

    private async Task LoadSessions(string categoryId)
    {
        var requestId = Guid.NewGuid().ToString("N")[..8];
        try
        {
            Logger.LogInformation("NOOR-HOST-OPENER: [{RequestId}] Loading sessions from KSESSIONS database for category: {CategoryId}", 
                requestId, categoryId);
            
            if (string.IsNullOrEmpty(Model?.FriendlyToken))
            {
                Logger.LogWarning("NOOR-HOST-OPENER: [{RequestId}] No friendly token available for sessions API call", requestId);
                errorMessage = "Authentication token required to load sessions.";
                return;
            }

            using var httpClient = HttpClientFactory.CreateClient("default");
            var response = await httpClient.GetAsync($"/api/host/sessions/{categoryId}?guid={Model.FriendlyToken}");
            
            Logger.LogInformation("NOOR-HOST-OPENER: [{RequestId}] Sessions API response - StatusCode: {StatusCode}", 
                requestId, response.StatusCode);
            
            if (response.IsSuccessStatusCode)
            {
                var rawJson = await response.Content.ReadAsStringAsync();
                Logger.LogInformation("NOOR-HOST-OPENER: [{RequestId}] Raw sessions JSON: {RawJson}", requestId, rawJson);
                
                var apiSessions = await response.Content.ReadFromJsonAsync<List<NoorCanvas.Controllers.SessionData>>();
                Sessions = apiSessions?.Select(s => new SessionInfo 
                { 
                    SessionID = s.SessionId.ToString(), 
                    SessionName = s.SessionName,
                    Title = s.SessionName,
                    Description = "" // SessionData doesn't have Description field
                }).ToList() ?? new List<SessionInfo>();
                
                Logger.LogInformation("NOOR-HOST-OPENER: [{RequestId}] Successfully loaded {Count} sessions from database", 
                    requestId, Sessions?.Count ?? 0);
            }
            else
            {
                Logger.LogWarning("NOOR-HOST-OPENER: [{RequestId}] Failed to load sessions - HTTP {StatusCode}", 
                    requestId, response.StatusCode);
                errorMessage = "Failed to load sessions from database. Please try again.";
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "NOOR-HOST-OPENER: [{RequestId}] Exception loading sessions for category {CategoryId}", requestId, categoryId);
            errorMessage = "Error connecting to database. Please check your connection.";
        }
    }

    private void OnSessionChanged()
    {
        var requestId = Guid.NewGuid().ToString("N")[..8];
        var selectedSessionId = Model!.SelectedSession;
        
        Logger.LogInformation("NOOR-HOST-OPENER: [{RequestId}] Session selection changed to: {SessionId}", requestId, selectedSessionId);
        
        // Log current form state for debugging
        Logger.LogInformation("NOOR-HOST-OPENER: [{RequestId}] Current form state - Album: {Album}, Category: {Category}, Session: {Session}", 
            requestId, Model.SelectedAlbum, Model.SelectedCategory, Model.SelectedSession);
        
        StateHasChanged();
    }

    private void FormatTime(ChangeEventArgs e)
    {
        var value = e.Value?.ToString()?.Trim().ToUpper() ?? string.Empty;
        if (value.Length > 2 && (value.EndsWith("AM") || value.EndsWith("PM")) && value[value.Length - 3] != ' ')
        {
            Model!.StartTime = value.Insert(value.Length - 2, " ");
        }
        else
        {
            Model!.StartTime = value;
        }
    }

    private bool IsFormValid()
    {
        if (Model == null) return false;
        
        if (string.IsNullOrEmpty(Model.SelectedAlbum) || 
            string.IsNullOrEmpty(Model.SelectedCategory) || 
            string.IsNullOrEmpty(Model.SelectedSession) || 
            Model.SessionDate == default || 
            string.IsNullOrEmpty(Model.StartTime) || 
            Model.SessionDuration == null)
        {
            return false;
        }

        // Validate time format
        if (!System.Text.RegularExpressions.Regex.IsMatch(Model.StartTime, @"^(0?[1-9]|1[0-2]):[0-5][0-9]\s?(AM|PM)$", System.Text.RegularExpressions.RegexOptions.IgnoreCase))
        {
            return false;
        }

        return true;
    }

    private async Task HandleOpenSession()
    {
        if (!IsFormValid()) return;
        
        isLoading = true;
        errorMessage = "";
        
        try
        {
            var requestId = Guid.NewGuid().ToString("N")[..8];
            Logger.LogInformation("NOOR-HOST-OPENER: [{RequestId}] Opening session with configuration: Album={Album}, Category={Category}, Session={Session}", 
                requestId, Model!.SelectedAlbum, Model.SelectedCategory, Model.SelectedSession);
            
            // TODO: Associate session with friendly token in database
            await Task.Delay(1000); // Simulate API call
            
            Logger.LogInformation("NOOR-HOST-OPENER: [{RequestId}] Session opened successfully", requestId);
            
            // Show Session URL panel
            showSessionUrlPanel = true;
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "NOOR-HOST-OPENER: Failed to open session");
            errorMessage = "Failed to open session. Please try again.";
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private string GenerateSessionUrl()
    {
        var baseUrl = Navigation.BaseUri.TrimEnd('/');
        return !string.IsNullOrEmpty(Model?.FriendlyToken) 
            ? $"{baseUrl}/user/landing/{Model.FriendlyToken}"
            : $"{baseUrl}/user/landing";
    }

    private async Task CopyUrlToClipboard()
    {
        var url = GenerateSessionUrl();
        await JSRuntime.InvokeVoidAsync("navigator.clipboard.writeText", url);
    }

    private void OpenWaitingRoom()
    {
        if (!IsFormValid()) return;
        
        // Navigate to waiting room as host
        Navigation.NavigateTo($"/session/waiting/{Model?.FriendlyToken}");
    }

    // View Models and Data Classes
    public class HostSessionOpenerViewModel
    {
        public string? LogoText { get; set; }
        
        [Required(ErrorMessage = "Friendly token is required")]
        public string FriendlyToken { get; set; } = "";
        
        public string SelectedAlbum { get; set; } = "";
        public string SelectedCategory { get; set; } = "";
        public string SelectedSession { get; set; } = "";
        
        [Required(ErrorMessage = "Session date is required")]
        public DateTime SessionDate { get; set; } = DateTime.Today;
        
        [Required(ErrorMessage = "Start time is required")]
        public string StartTime { get; set; } = "";
        
        [Required(ErrorMessage = "Duration is required")]
        public int? SessionDuration { get; set; }
    }

    public class AlbumInfo
    {
        public string GroupID { get; set; } = "";
        public string GroupName { get; set; } = "";
    }

    public class CategoryInfo
    {
        public string CategoryID { get; set; } = "";
        public string CategoryName { get; set; } = "";
    }

    public class SessionInfo
    {
        public string SessionID { get; set; } = "";
        public string SessionName { get; set; } = "";
        public string Title { get; set; } = "";
        public string Description { get; set; } = "";
    }
}