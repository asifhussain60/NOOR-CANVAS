@page "/admin"
@page "/admin/login"
@inject IJSRuntime JSRuntime
@inject NavigationManager Navigation
@inject ILogger<AdminDashboard> Logger
@inject HttpClient Http
@inject DialogService DialogService
@using System.Text.Json
@using System.Text

<div class="container-fluid mt-4">
    @if (!isAuthenticated)
    {
        <!-- Admin Login Form -->
        <div class="row justify-content-center">
            <div class="col-md-6">
                <div class="card shadow">
                    <div class="card-header bg-danger text-white">
                        <h4 class="mb-0">
                            <i class="fas fa-shield-alt me-2"></i>
                            Admin Access
                        </h4>
                    </div>
                    <div class="card-body">
                        <div class="form-group mb-3">
                            <label for="adminGuid" class="form-label">Admin GUID</label>
                            <input type="password" 
                                   id="adminGuid" 
                                   class="form-control" 
                                   @bind="adminGuid"
                                   @onkeypress="HandleKeyPress"
                                   placeholder="Enter admin GUID" />
                        </div>
                        
                        @if (!string.IsNullOrEmpty(errorMessage))
                        {
                            <div class="alert alert-danger" role="alert">
                                <i class="fas fa-exclamation-triangle me-2"></i>
                                @errorMessage
                            </div>
                        }
                        
                        <button type="button" 
                                class="btn btn-danger w-100"
                                @onclick="AuthenticateAdmin"
                                disabled="@isLoading">
                            @if (isLoading)
                            {
                                <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                            }
                            else
                            {
                                <i class="fas fa-sign-in-alt me-2"></i>
                            }
                            Access Admin Panel
                        </button>
                    </div>
                </div>
                
                <div class="text-center mt-3">
                    <small class="text-muted">
                        <i class="fas fa-lock me-1"></i>
                        Restricted access - authorized administrators only
                    </small>
                </div>
            </div>
        </div>
    }
    else
    {
        <!-- Admin Dashboard -->
        <div class="row">
            <div class="col-12">
                <div class="d-flex justify-content-between align-items-center mb-4">
                    <h2 class="mb-0">
                        <i class="fas fa-tachometer-alt me-2 text-danger"></i>
                        Admin Dashboard
                    </h2>
                    <div>
                        <span class="badge bg-success me-2">
                            <i class="fas fa-user-shield me-1"></i>
                            Admin
                        </span>
                        <button type="button" class="btn btn-outline-danger btn-sm" @onclick="Logout">
                            <i class="fas fa-sign-out-alt me-1"></i>
                            Logout
                        </button>
                    </div>
                </div>
            </div>
        </div>

        @if (dashboardData != null)
        {
            <!-- Statistics Cards -->
            <div class="row mb-4">
                <div class="col-md-3">
                    <div class="card border-0 shadow-sm">
                        <div class="card-body text-center">
                            <div class="display-6 text-primary mb-2">
                                <i class="fas fa-comments"></i>
                            </div>
                            <h4 class="text-primary mb-1">@dashboardData.Statistics.TotalSessions</h4>
                            <small class="text-muted">Total Sessions</small>
                        </div>
                    </div>
                </div>
                <div class="col-md-3">
                    <div class="card border-0 shadow-sm">
                        <div class="card-body text-center">
                            <div class="display-6 text-success mb-2">
                                <i class="fas fa-play-circle"></i>
                            </div>
                            <h4 class="text-success mb-1">@dashboardData.Statistics.ActiveSessions</h4>
                            <small class="text-muted">Active Sessions</small>
                        </div>
                    </div>
                </div>
                <div class="col-md-3">
                    <div class="card border-0 shadow-sm">
                        <div class="card-body text-center">
                            <div class="display-6 text-info mb-2">
                                <i class="fas fa-users"></i>
                            </div>
                            <h4 class="text-info mb-1">@dashboardData.Statistics.TotalUsers</h4>
                            <small class="text-muted">Total Users</small>
                        </div>
                    </div>
                </div>
                <div class="col-md-3">
                    <div class="card border-0 shadow-sm">
                        <div class="card-body text-center">
                            <div class="display-6 text-warning mb-2">
                                <i class="fas fa-clipboard-check"></i>
                            </div>
                            <h4 class="text-warning mb-1">@dashboardData.Statistics.TotalRegistrations</h4>
                            <small class="text-muted">Registrations</small>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Recent Sessions and Users -->
            <div class="row">
                <div class="col-lg-8">
                    <div class="card shadow-sm">
                        <div class="card-header bg-light">
                            <h5 class="mb-0">
                                <i class="fas fa-list-alt me-2"></i>
                                Recent Sessions
                            </h5>
                        </div>
                        <div class="card-body p-0">
                            @if (dashboardData.RecentSessions.Any())
                            {
                                <div class="table-responsive">
                                    <table class="table table-hover mb-0">
                                        <thead class="table-light">
                                            <tr>
                                                <th>Session</th>
                                                <th>Status</th>
                                                <th>Host</th>
                                                <th>Participants</th>
                                                <th>Created</th>
                                                <th>Actions</th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            @foreach (var session in dashboardData.RecentSessions)
                                            {
                                                <tr>
                                                    <td>
                                                        <strong>@session.Title</strong>
                                                        <br />
                                                        <small class="text-muted">#@session.SessionId</small>
                                                    </td>
                                                    <td>
                                                        <span class="badge @GetStatusBadgeClass(session.Status)">
                                                            @session.Status
                                                        </span>
                                                    </td>
                                                    <td>@session.HostName</td>
                                                    <td>
                                                        <i class="fas fa-users me-1"></i>
                                                        @session.ParticipantCount
                                                    </td>
                                                    <td>
                                                        <small>@session.CreatedAt.ToString("MMM dd, HH:mm")</small>
                                                    </td>
                                                    <td>
                                                        @if (session.Status == "Active")
                                                        {
                                                            <button type="button" 
                                                                    class="btn btn-outline-danger btn-sm"
                                                                    @onclick="() => TerminateSession(session.SessionId)"
                                                                    title="Terminate Session">
                                                                <i class="fas fa-stop"></i>
                                                            </button>
                                                        }
                                                        else
                                                        {
                                                            <small class="text-muted">No actions</small>
                                                        }
                                                    </td>
                                                </tr>
                                            }
                                        </tbody>
                                    </table>
                                </div>
                            }
                            else
                            {
                                <div class="text-center py-4">
                                    <i class="fas fa-inbox fa-3x text-muted mb-3"></i>
                                    <p class="text-muted">No sessions found</p>
                                </div>
                            }
                        </div>
                        <div class="card-footer bg-light">
                            <a href="/admin/sessions" class="btn btn-primary btn-sm">
                                <i class="fas fa-list me-1"></i>
                                View All Sessions
                            </a>
                        </div>
                    </div>
                </div>

                <div class="col-lg-4">
                    <div class="card shadow-sm">
                        <div class="card-header bg-light">
                            <h5 class="mb-0">
                                <i class="fas fa-user-plus me-2"></i>
                                Recent Users
                            </h5>
                        </div>
                        <div class="card-body p-0">
                            @if (dashboardData.RecentUsers.Any())
                            {
                                <div class="list-group list-group-flush">
                                    @foreach (var user in dashboardData.RecentUsers)
                                    {
                                        <div class="list-group-item">
                                            <div class="d-flex justify-content-between align-items-start">
                                                <div class="flex-grow-1">
                                                    <strong>@user.Name</strong>
                                                    <br />
                                                    <small class="text-muted">
                                                        @user.City, @user.Country
                                                    </small>
                                                    <br />
                                                    <small class="text-muted">
                                                        @user.CreatedAt.ToString("MMM dd, HH:mm")
                                                    </small>
                                                </div>
                                                <div>
                                                    @if (user.IsActive)
                                                    {
                                                        <span class="badge bg-success">Active</span>
                                                    }
                                                    else
                                                    {
                                                        <span class="badge bg-secondary">Inactive</span>
                                                    }
                                                </div>
                                            </div>
                                        </div>
                                    }
                                </div>
                            }
                            else
                            {
                                <div class="text-center py-4">
                                    <i class="fas fa-user-slash fa-2x text-muted mb-3"></i>
                                    <p class="text-muted">No users found</p>
                                </div>
                            }
                        </div>
                        <div class="card-footer bg-light">
                            <a href="/admin/users" class="btn btn-info btn-sm">
                                <i class="fas fa-users me-1"></i>
                                Manage Users
                            </a>
                        </div>
                    </div>

                    <!-- System Info -->
                    <div class="card shadow-sm mt-3">
                        <div class="card-header bg-light">
                            <h5 class="mb-0">
                                <i class="fas fa-server me-2"></i>
                                System Info
                            </h5>
                        </div>
                        <div class="card-body">
                            <p class="mb-2">
                                <strong>Uptime:</strong> @dashboardData.Statistics.SystemUptime
                            </p>
                            <p class="mb-2">
                                <strong>Last Updated:</strong> 
                                <small>@dashboardData.LastUpdated.ToString("HH:mm:ss")</small>
                            </p>
                            <button type="button" class="btn btn-outline-primary btn-sm" @onclick="RefreshDashboard">
                                <i class="fas fa-sync-alt me-1"></i>
                                Refresh
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        }
        else if (isLoading)
        {
            <!-- Loading State -->
            <div class="text-center py-5">
                <div class="spinner-border text-primary" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
                <p class="mt-3">Loading dashboard data...</p>
            </div>
        }
    }
</div>

@code {
    private bool isAuthenticated = false;
    private bool isLoading = false;
    private string adminGuid = string.Empty;
    private string sessionToken = string.Empty;
    private string errorMessage = string.Empty;
    private AdminDashboardData? dashboardData;
    
    private AlertDialog alertDialog = null!;
    private ConfirmDialog confirmDialog = null!;

    protected override async Task OnInitializedAsync()
    {
        Logger.LogInformation("NOOR-ADMIN: Admin dashboard page loaded");
        
        // Check for existing session token in localStorage
        var storedToken = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "adminSessionToken");
        if (!string.IsNullOrEmpty(storedToken))
        {
            sessionToken = storedToken;
            await LoadDashboardData();
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // Register dialogs with the service after they are rendered
            DialogService.RegisterAlertDialog(alertDialog);
            DialogService.RegisterConfirmDialog(confirmDialog);
        }
        await base.OnAfterRenderAsync(firstRender);
    }

    private async Task HandleKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await AuthenticateAdmin();
        }
    }

    private async Task AuthenticateAdmin()
    {
        try
        {
            isLoading = true;
            errorMessage = string.Empty;

            Logger.LogInformation("NOOR-ADMIN: Admin authentication attempt");

            var requestContent = new StringContent(
                JsonSerializer.Serialize(new { AdminGuid = adminGuid }),
                Encoding.UTF8,
                "application/json");

            var response = await Http.PostAsync("/api/admin/authenticate", requestContent);
            var responseContent = await response.Content.ReadAsStringAsync();

            var result = JsonSerializer.Deserialize<AdminAuthResponse>(responseContent, new JsonSerializerOptions
            {
                PropertyNameCaseInsensitive = true
            });

            if (result?.Success == true)
            {
                sessionToken = result.SessionToken;
                isAuthenticated = true;
                
                // Store session token in localStorage
                await JSRuntime.InvokeVoidAsync("localStorage.setItem", "adminSessionToken", sessionToken);
                
                Logger.LogInformation("NOOR-ADMIN: Admin authenticated successfully");
                
                // Clear the admin GUID for security
                adminGuid = string.Empty;
                
                // Load dashboard data
                await LoadDashboardData();
            }
            else
            {
                errorMessage = "Invalid admin credentials";
                Logger.LogWarning("NOOR-ADMIN: Admin authentication failed");
            }
        }
        catch (Exception ex)
        {
            errorMessage = "Authentication failed. Please try again.";
            Logger.LogError(ex, "NOOR-ERROR: Admin authentication error");
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task LoadDashboardData()
    {
        try
        {
            isLoading = true;

            var response = await Http.GetAsync($"/api/admin/dashboard?sessionToken={sessionToken}");
            var responseContent = await response.Content.ReadAsStringAsync();
            
            dashboardData = JsonSerializer.Deserialize<AdminDashboardData>(responseContent, new JsonSerializerOptions
            {
                PropertyNameCaseInsensitive = true
            });

            isAuthenticated = true;
            Logger.LogInformation("NOOR-ADMIN: Dashboard data loaded successfully");
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "NOOR-ERROR: Failed to load dashboard data");
            errorMessage = "Failed to load dashboard data";
            await Logout();
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task RefreshDashboard()
    {
        await LoadDashboardData();
    }

    private async Task TerminateSession(long sessionId)
    {
        try
        {
            var confirmed = await DialogService.ShowDangerConfirmAsync(
                $"Are you sure you want to terminate session #{sessionId}? This action cannot be undone.", 
                "Terminate Session");
            
            if (confirmed)
            {
                var response = await Http.PostAsync($"/api/admin/session/{sessionId}/terminate?sessionToken={sessionToken}", null);

                Logger.LogInformation("NOOR-ADMIN: Session {SessionId} terminated", sessionId);
                await JSRuntime.InvokeVoidAsync("alert", "Session terminated successfully");
                
                // Refresh dashboard data
                await LoadDashboardData();
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "NOOR-ERROR: Failed to terminate session");
            await JSRuntime.InvokeVoidAsync("alert", "Failed to terminate session. Please try again.");
        }
    }

    private async Task Logout()
    {
        isAuthenticated = false;
        sessionToken = string.Empty;
        dashboardData = null;
        
        // Clear stored session token
        await JSRuntime.InvokeVoidAsync("localStorage.removeItem", "adminSessionToken");
        
        Logger.LogInformation("NOOR-ADMIN: Admin logged out");
    }

    private string GetStatusBadgeClass(string status)
    {
        return status switch
        {
            "Active" => "bg-success",
            "Created" => "bg-primary",
            "Completed" => "bg-secondary",
            "Terminated" => "bg-danger",
            _ => "bg-light text-dark"
        };
    }

    // Models (should be moved to shared models in production)
    public class AdminAuthResponse
    {
        public bool Success { get; set; }
        public string SessionToken { get; set; } = string.Empty;
        public DateTime ExpiresAt { get; set; }
        public string AdminGuid { get; set; } = string.Empty;
    }

    public class AdminDashboardData
    {
        public AdminStatistics Statistics { get; set; } = new();
        public List<AdminSessionSummary> RecentSessions { get; set; } = new();
        public List<AdminUserSummary> RecentUsers { get; set; } = new();
        public DateTime LastUpdated { get; set; }
    }

    public class AdminStatistics
    {
        public int TotalSessions { get; set; }
        public int ActiveSessions { get; set; }
        public int TotalUsers { get; set; }
        public int TotalRegistrations { get; set; }
        public string SystemUptime { get; set; } = string.Empty;
    }

    public class AdminSessionSummary
    {
        public long SessionId { get; set; }
        public string Title { get; set; } = string.Empty;
        public string Status { get; set; } = string.Empty;
        public int ParticipantCount { get; set; }
        public DateTime CreatedAt { get; set; }
        public string HostName { get; set; } = string.Empty;
    }

    public class AdminUserSummary
    {
        public string UserId { get; set; } = string.Empty;
        public string Name { get; set; } = string.Empty;
        public string City { get; set; } = string.Empty;
        public string Country { get; set; } = string.Empty;
        public DateTime CreatedAt { get; set; }
        public bool IsActive { get; set; }
    }
}

<!-- Dialog Components -->
<AlertDialog @ref="alertDialog" />
<ConfirmDialog @ref="confirmDialog" />
