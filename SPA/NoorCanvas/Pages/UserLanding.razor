@page "/user/landing"
@page "/user/landing/{sessionToken?}"
@page "/landing"
@layout EmptyLayout
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Components.Web
@using System.ComponentModel.DataAnnotations
@using System.Net.Http.Json
@using System.Text.Json
@using System.Text.Json.Serialization

@inject IHttpClientFactory HttpClientFactory
@inject IJSRuntime JSRuntime
@inject NavigationManager Navigation
@inject ILogger<UserLanding> Logger
@inject IConfiguration Configuration
@inject ITestDataService TestDataService
@inject LoadingService LoadingService

<PageTitle>NOOR Canvas - User Authentication</PageTitle>

<HeadContent>
    @* All fonts and CDNs are centralized in Pages/_Host.cshtml *@
</HeadContent>

<div style="background-color:#F8F5F1;display:flex;align-items:center;justify-content:center;min-height:100vh;padding:1.5rem;">
    <div style="width:100%;max-width:35rem;background-color:#FFFFFF;border:1px solid #e5e7eb;box-shadow:0 25px 50px -12px rgba(0,0,0,0.25);border-radius:1.5rem;padding:2rem 3rem;text-align:center;">
        
        <!-- Logo -->
        <div class="noor-canvas-logo" style="display:flex;align-items:center;justify-content:center;text-align:center;margin-bottom:1.5rem;">
            <img src="/images/NoorCanvas.png?v=20250924" 
                 alt="@(Model?.LogoText ?? "NOOR Canvas")" />
        </div>
        
        <!-- Main Content -->
        <div style="display:flex;flex-direction:column;gap:1.5rem;">
            <h1 style="font-size:2.5rem;font-family:'Poppins',sans-serif;font-weight:700;color:#006400;margin:0;">User Authentication</h1>
            <div style="display:flex;flex-direction:column;gap:0.25rem;margin-top:-0.5rem;">
                <p data-testid="session-name" style="font-family:'Inter',sans-serif;font-size:2rem;color:#D4AF37;font-weight:600;margin:0;">@(Model?.SessionName ?? "[Session Name]")</p>
                <p style="font-family:'Inter',sans-serif;font-size:12px;color:grey;font-weight:normal;margin:0;">@(Model?.SessionDescription ?? "[Session Desc]")</p>
            </div>

            <!-- User Authentication Form -->
            <div style="width:100%;background-color:#F8F5F1;border-radius:1rem;border:2px solid;border-image:linear-gradient(to right, #C5B358, #D4AF37, #C5B358) 1;padding:2rem 3rem;text-align:left;display:flex;flex-direction:column;gap:1rem;margin-top:2rem;box-shadow:inset 0 2px 4px 0 rgba(0,0,0,0.06);">
                
                @if (!string.IsNullOrEmpty(Model?.ErrorMessage))
                {
                    <div style="background-color:#FEE2E2;border:1px solid #FECACA;color:#B91C1C;padding:1rem;border-radius:0.5rem;margin-bottom:1rem;text-align:center;">
                        <span>@Model.ErrorMessage</span>
                    </div>
                }
                @if (Model?.ShowTokenPanel == true)
                {
                    <div style="opacity:1;transform:translateY(0);transition:all 0.5s ease-in-out;">
                        <div style="display:flex;flex-direction:column;align-items:center;justify-content:center;">
                            <h3 style="font-family:'Inter',sans-serif;font-weight:700;color:#4B3C2B;font-size:1.5rem;margin-bottom:0.5rem;">ENTER TOKEN</h3>
                            <p style="font-family:'Inter',sans-serif;font-size:0.875rem;color:#706357;margin-top:0.5rem;text-align:center;">Enter your unique token to join the session.</p>
                        </div>
                        <div style="position:relative;margin-top:1rem;">
                            <div style="position:absolute;top:0;left:0;height:100%;display:flex;align-items:center;padding-left:0.75rem;pointer-events:none;">
                                <i class="fa-solid fa-user-lock" style="color:#706357;"></i>
                            </div>
                            <InputText id="token-input"
                                      @bind-Value="Model!.TokenInput" 
                                      @onfocus="ClearError" 
                                      placeholder="Enter your Unique User Token" 
                                      style="display:block;width:100%;padding-left:2.5rem;padding-right:1rem;padding-top:0.5rem;padding-bottom:0.5rem;font-family:'Inter',sans-serif;color:#4B3C2B;border:1px solid #D1D5DB;border-radius:0.75rem;outline:none;text-align:left;"
                                      autocomplete="off" />
                        </div>
                    </div>
                }
                else
                {
                    <div style="opacity:1;transform:translateY(0);transition:all 0.5s ease-in-out;">
                        <div style="display:flex;flex-direction:column;align-items:center;justify-content:center;margin-top:0.5rem;">
                            <h3 style="font-family:'Inter',sans-serif;font-weight:700;color:#4B3C2B;font-size:1.5rem;margin-bottom:0.5rem;">REGISTRATION</h3>
                            <p style="font-family:'Inter',sans-serif;font-size:0.875rem;color:#706357;margin-top:0.5rem;text-align:center;">Please fill out the form to register for this session.</p>
                        </div>
                        
                        <div style="position:relative;margin-top:1rem;">
                            <label style="font-family:'Inter',sans-serif;font-weight:600;color:#4B3C2B;display:block;margin-bottom:0.5rem;">Name</label>
                            <div style="position:absolute;bottom:0;left:0;height:2.5rem;display:flex;align-items:center;padding-left:0.75rem;pointer-events:none;">
                                <i class="fa-solid fa-user" style="color:#706357;"></i>
                            </div>
                            <InputText id="name-input"
                                      @bind-Value="Model!.NameInput" 
                                      @onfocus="ClearError" 
                                      placeholder="Enter your name" 
                                      style="display:block;width:100%;padding-left:2.5rem;padding-right:1rem;padding-top:0.5rem;padding-bottom:0.5rem;font-family:'Inter',sans-serif;color:#4B3C2B;border:1px solid #D1D5DB;border-radius:0.75rem;outline:none;"
                                      autocomplete="off" />
                        </div>
                        
                        <div style="position:relative;margin-top:1rem;">
                            <label style="font-family:'Inter',sans-serif;font-weight:600;color:#4B3C2B;display:block;margin-bottom:0.5rem;">Email Address</label>
                            <div style="position:absolute;bottom:0;left:0;height:2.5rem;display:flex;align-items:center;padding-left:0.75rem;pointer-events:none;">
                                <i class="fa-solid fa-envelope" style="color:#706357;"></i>
                            </div>
                            <InputText @bind-Value="Model!.EmailInput" 
                                      @onfocus="ClearError" 
                                      placeholder="Enter your email" 
                                      style="display:block;width:100%;padding-left:2.5rem;padding-right:1rem;padding-top:0.5rem;padding-bottom:0.5rem;font-family:'Inter',sans-serif;color:#4B3C2B;border:1px solid #D1D5DB;border-radius:0.75rem;outline:none;"
                                      autocomplete="off" />
                        </div>
                        
                        <div style="position:relative;margin-top:1rem;">
                            <label style="font-family:'Inter',sans-serif;font-weight:600;color:#4B3C2B;display:block;margin-bottom:0.5rem;">Country</label>
                            <div style="position:absolute;bottom:0;left:0;height:2.5rem;display:flex;align-items:center;padding-left:0.75rem;pointer-events:none;">
                                <i class="fa-solid fa-globe" style="color:#706357;"></i>
                            </div>
                            <InputSelect @bind-Value="Model!.CountrySelect" 
                                        @onfocus="ClearError" 
                                        disabled="@(Model?.IsLoadingCountries ?? false)"
                                        style="display:block;width:100%;padding-left:2.5rem;padding-right:1rem;padding-top:0.5rem;padding-bottom:0.5rem;font-family:'Inter',sans-serif;color:#4B3C2B;border:1px solid #D1D5DB;border-radius:0.75rem;outline:none;"
                                        autocomplete="off">
                                <option value="">@((Model?.IsLoadingCountries ?? false) ? "Loading countries..." : "Select your country")</option>
                                @if (!(Model?.IsLoadingCountries ?? false))
                                {
                                    @foreach (var country in Countries)
                                    {
                                        <option value="@country.ISO2">@country.CountryName</option>
                                    }
                                }
                            </InputSelect>
                        </div>
                    </div>
                }
            </div>

            <!-- Button -->
            <div style="margin-top:2rem;">
                <button @onclick="HandleButtonClick" 
                        disabled="@Model!.IsLoading"
                        style="width:100%;display:flex;align-items:center;justify-content:center;padding-top:0.75rem;padding-bottom:0.75rem;padding-left:1.5rem;padding-right:1.5rem;border-radius:0.75rem;color:white;font-weight:600;transition:transform 0.2s;transform:scale(1);box-shadow:0 10px 15px -3px rgba(0,100,0,0.4), 0 4px 6px -2px rgba(0,100,0,0.2);background-color:#006400;border:none;cursor:pointer;">
                    @if (Model.IsLoading)
                    {
                        <i class="fa-solid fa-spinner fa-spin" style="margin-right:0.5rem;"></i>
                    }
                    else
                    {
                        <i class="@Model.ButtonIconClass" style="margin-right:0.5rem;"></i>
                    }
                    <span>@Model.ButtonText</span>
                </button>
            </div>
        </div>
    </div>
</div>

@* Debug Panel - Development Only *@
<DebugPanel CurrentViewName="UserLanding" OnEnterTestData="HandleEnterTestData" />

@code {
    // [DEBUG-WORKITEM:hostcanvas:impl] IMPORTANT: This page has TWO PHASES - Token validation phase shows only token input field, 
    // registration phase (after successful token validation) shows name/email/country fields. Both phases are on same page.
    // The registration form fields are INVISIBLE until AFTER a user token is validated successfully. ;CLEANUP_OK
    
    [Parameter] public string? SessionToken { get; set; }
    
    private UserLandingViewModel? Model { get; set; }
    private List<CountryData> Countries { get; set; } = new();
    
    // Helper method to get base URL from configuration
    private string GetBaseUrl()
    {
        // Try to get HTTPS URL from Kestrel configuration, fallback to HTTPS default
        var httpsUrl = Configuration["Kestrel:Endpoints:Https:Url"];
        if (!string.IsNullOrEmpty(httpsUrl))
        {
            Logger.LogInformation("NOOR-USER-LANDING: Using configured HTTPS URL: {HttpsUrl}", httpsUrl);
            return httpsUrl;
        }
        
        // Fallback to default HTTPS port
        Logger.LogWarning("NOOR-USER-LANDING: No HTTPS configuration found, using default https://localhost:9091");
        return "https://localhost:9091";
    }

    protected override async Task OnInitializedAsync()
    {
        var requestId = Guid.NewGuid().ToString("N")[..8];
        Logger.LogInformation("COPILOT-DEBUG: [{RequestId}] UserLanding OnInitialized START - SessionToken: {SessionToken}", 
            requestId, SessionToken ?? "null");

        Model = new UserLandingViewModel
        {
            LogoText = "NOOR Canvas",
            SessionName = "Enter Session Token", // Clear instruction instead of mock loading text
            ShowTokenPanel = true,
            ButtonText = "Submit",
            ButtonIconClass = "fa-solid fa-arrow-right-to-bracket",
            IsLoading = false
        };

        Logger.LogInformation("COPILOT-DEBUG: [{RequestId}] Initial Model state - ShowTokenPanel: {ShowTokenPanel}", 
            requestId, Model.ShowTokenPanel);

        // NOTE: Countries will be loaded AFTER successful token validation (Issue-114 fix)
        // Do NOT load countries here to prevent loading during token entry phase

        // Check for token from route parameter or query parameter
        var token = SessionToken;
        if (string.IsNullOrEmpty(token))
        {
            var uri = new Uri(Navigation.Uri);
            var query = System.Web.HttpUtility.ParseQueryString(uri.Query);
            token = query["token"];
            Logger.LogInformation("COPILOT-DEBUG: [{RequestId}] Token from query parameter: {Token}", 
                requestId, token ?? "null");
        }

        // If session token provided via URL, populate it and load session info
        if (!string.IsNullOrEmpty(token))
        {
            Logger.LogInformation("COPILOT-DEBUG: [{RequestId}] Token found - starting validation for: {Token}", 
                requestId, token);
            
            Model.TokenInput = token;
            await LoadSessionInfoAsync(token, requestId);
            
            Logger.LogInformation("COPILOT-DEBUG: [{RequestId}] After LoadSessionInfoAsync - ShowTokenPanel: {ShowTokenPanel}", 
                requestId, Model.ShowTokenPanel);
        }
        else
        {
            Logger.LogInformation("COPILOT-DEBUG: [{RequestId}] No session token provided, showing token entry panel", 
                requestId);
            Model.SessionName = "Enter Session Token";
        }
        
        Logger.LogInformation("COPILOT-DEBUG: [{RequestId}] UserLanding OnInitialized END - Final ShowTokenPanel: {ShowTokenPanel}", 
            requestId, Model.ShowTokenPanel);
    }
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && Model != null)
        {
            var requestId = Guid.NewGuid().ToString("N")[..8];
            Logger.LogInformation("COPILOT-DEBUG: [{RequestId}] OnAfterRenderAsync - Setting focus based on panel state: {ShowTokenPanel}", 
                requestId, Model.ShowTokenPanel);
                
            try
            {
                if (Model.ShowTokenPanel)
                {
                    // Focus on token input if showing token panel
                    await JSRuntime.InvokeVoidAsync("setTimeout", "() => document.getElementById('token-input')?.focus()", 100);
                    Logger.LogInformation("COPILOT-DEBUG: [{RequestId}] Focus set to token-input", requestId);
                }
                else
                {
                    // Focus on name input if showing registration panel
                    await JSRuntime.InvokeVoidAsync("setTimeout", "() => document.getElementById('name-input')?.focus()", 100);
                    Logger.LogInformation("COPILOT-DEBUG: [{RequestId}] Focus set to name-input", requestId);
                }
            }
            catch (Exception ex)
            {
                Logger.LogError(ex, "COPILOT-DEBUG: [{RequestId}] Error setting focus", requestId);
            }
        }
    }

    /// <summary>
    /// Load session information from API using token validation
    /// </summary>
    private async Task LoadSessionInfoAsync(string token, string requestId)
    {
        try
        {
            Logger.LogInformation("NOOR-DEBUG: [{RequestId}] Calling session validation API for token: {Token}", 
                requestId, token);

            using var httpClient = HttpClientFactory.CreateClient();
            var baseUrl = GetBaseUrl();
            var apiUrl = $"{baseUrl}/api/participant/session/{token}/validate";
            var response = await httpClient.GetAsync(apiUrl);
            
            Logger.LogInformation("NOOR-DEBUG: [{RequestId}] Session validation API response: {StatusCode}", 
                requestId, response.StatusCode);

            if (response.IsSuccessStatusCode)
            {
                var content = await response.Content.ReadAsStringAsync();
                Logger.LogInformation("NOOR-DEBUG: [{RequestId}] Session validation response content: {Content}", 
                    requestId, content);

                var validationResult = System.Text.Json.JsonSerializer.Deserialize<SessionValidationResponse>(content, 
                    new System.Text.Json.JsonSerializerOptions { PropertyNameCaseInsensitive = true });

                if (validationResult?.Valid == true)
                {
                    Logger.LogInformation("NOOR-DEBUG: [{RequestId}] Session validation successful - SessionID: {SessionId}, Title: {Title}, Status: {Status}", 
                        requestId, validationResult.SessionId, validationResult.Session?.Title, validationResult.Session?.Status);

                    if (Model != null)
                    {
                        // ISSUE-124 FIX: Use nested session properties
                        Model.SessionName = validationResult.Session?.Title ?? "Unknown Session";
                        Model.SessionDescription = $"Status: {validationResult.Session?.Status ?? "Unknown"}";
                        
                        Logger.LogInformation("NOOR-DEBUG: [{RequestId}] Updated Model.SessionName to: {SessionName}, SessionDescription to: {SessionDescription}", 
                            requestId, Model.SessionName, Model.SessionDescription);

                        // AUTHENTICATION GATE: Check if session has already started AND user is registered
                        var sessionStatus = validationResult.Session?.Status?.ToLowerInvariant();
                        if (sessionStatus == "active" || sessionStatus == "started" || sessionStatus == "in progress")
                        {
                            // ATOMIC CHECK: Verify registration status with proper synchronization
                            Logger.LogInformation("COPILOT-DEBUG: [{RequestId}] Session already started (Status: {Status}) - performing atomic participant registration check", 
                                requestId, validationResult.Session?.Status);
                            
                            using var authSemaphore = new SemaphoreSlim(1, 1);
                            await authSemaphore.WaitAsync();
                            
                            try
                            {
                                var isRegistered = await CheckParticipantRegistrationAsync(token, requestId);
                                if (isRegistered)
                                {
                                    Logger.LogInformation("[DEBUG-WORKITEM:userlanding:impl:{0}] User already registered - routing to SessionCanvas ;CLEANUP_OK", 
                                        requestId);
                                    Navigation.NavigateTo($"/session/canvas/{token}");
                                    return;
                                }
                                else
                                {
                                    Logger.LogInformation("[DEBUG-WORKITEM:userlanding:impl:{0}] User not registered - must complete registration first ;CLEANUP_OK", 
                                        requestId);
                                    // Continue to registration panel instead of direct navigation
                                }
                            }
                            finally
                            {
                                authSemaphore.Release();
                            }
                        }

                        // ISSUE-114 FIX: For URL-based tokens, automatically switch to registration panel and load countries
                        Logger.LogInformation("COPILOT-DEBUG: [{RequestId}] URL token validated successfully - switching to registration panel", requestId);
                        Model.ShowTokenPanel = false;
                        
                        // [DEBUG-WORKITEM:user:UI] Set button text based on session status
                        if (sessionStatus == "active" || sessionStatus == "started" || sessionStatus == "in progress")
                        {
                            Model.ButtonText = "Join Live Canvas";
                            Model.ButtonIconClass = "fa-solid fa-play";
                            Logger.LogInformation("[DEBUG-WORKITEM:user:UI] Button set to 'Join Live Canvas' for active session", requestId);
                        }
                        else
                        {
                            Model.ButtonText = "Join Waiting Room";
                            Model.ButtonIconClass = "fa-solid fa-hourglass-start";
                            Logger.LogInformation("[DEBUG-WORKITEM:user:UI] Button set to 'Join Waiting Room' for inactive session", requestId);
                        }
                        Model.ErrorMessage = string.Empty;
                        
                        Logger.LogInformation("COPILOT-DEBUG: [{RequestId}] Panel switched - ShowTokenPanel: {ShowTokenPanel}, calling StateHasChanged", 
                            requestId, Model.ShowTokenPanel);
                        
                        // CRITICAL: Force UI update after panel switch during initialization
                        StateHasChanged();
                        
                        // Load countries dropdown after successful URL token validation
                        Logger.LogInformation("COPILOT-DEBUG: [{RequestId}] Loading countries dropdown after URL token validation...", requestId);
                        await LoadCountriesAsync();
                        
                        // Set focus to name input after successful token validation
                        await SetFocusAfterPanelSwitch("name-input", requestId);
                    }
                }
                else
                {
                    Logger.LogWarning("NOOR-DEBUG: [{RequestId}] Session validation failed or returned invalid data", requestId);
                    if (Model != null)
                    {
                        Model.SessionName = "Invalid Session";
                    }
                }
            }
            else
            {
                Logger.LogError("NOOR-DEBUG: [{RequestId}] Session validation API failed with status: {StatusCode}", 
                    requestId, response.StatusCode);
                if (Model != null)
                {
                    Model.SessionName = "Session Not Found";
                }
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "NOOR-DEBUG: [{RequestId}] Exception during session info loading for token: {Token}", 
                requestId, token);
            if (Model != null)
            {
                Model.SessionName = "Error Loading Session";
            }
        }
    }

    private void ClearError()
    {
        if (Model != null)
        {
            Model.ErrorMessage = string.Empty;
        }
    }
    
    private async Task SetFocusAfterPanelSwitch(string elementId, string requestId)
    {
        try
        {
            // Wait for the UI to fully render after StateHasChanged
            await Task.Delay(200);
            await JSRuntime.InvokeVoidAsync("setTimeout", $"() => document.getElementById('{elementId}')?.focus()", 100);
            Logger.LogInformation("COPILOT-DEBUG: [{RequestId}] Focus set to {ElementId} after panel switch", requestId, elementId);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "COPILOT-DEBUG: [{RequestId}] Error setting focus to {ElementId}", requestId, elementId);
        }
    }

    private async Task HandleButtonClick()
    {
        if (Model == null) return;

        var requestId = Guid.NewGuid().ToString("N")[..8];
        Logger.LogInformation("NOOR-DEBUG: [{RequestId}] HandleButtonClick called - ShowTokenPanel: {ShowTokenPanel}, TokenInput: {TokenInput}", 
            requestId, Model.ShowTokenPanel, Model.TokenInput ?? "null");

        Model.IsLoading = true;
        StateHasChanged();

        try
        {
            if (Model.ShowTokenPanel)
            {
                Logger.LogInformation("NOOR-DEBUG: [{RequestId}] Calling HandleTokenValidation", requestId);
                await HandleTokenValidation();
            }
            else
            {
                Logger.LogInformation("NOOR-DEBUG: [{RequestId}] Calling HandleUserRegistration", requestId);
                await HandleUserRegistration();
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "NOOR-DEBUG: [{RequestId}] Error in HandleButtonClick", requestId);
            Model.ErrorMessage = "An unexpected error occurred. Please try again.";
        }
        finally
        {
            Model.IsLoading = false;
            StateHasChanged();
            Logger.LogInformation("NOOR-DEBUG: [{RequestId}] HandleButtonClick completed", requestId);
        }
    }

    private async Task HandleTokenValidation()
    {
        if (Model == null) return;

        // Validate token format
        if (string.IsNullOrWhiteSpace(Model.TokenInput) || 
            Model.TokenInput.Length != 8 || 
            !Model.TokenInput.All(char.IsLetterOrDigit))
        {
            Model.ErrorMessage = "Invalid Token";
            return;
        }

        try
        {
            var requestId = Guid.NewGuid().ToString("N")[..8];
            Logger.LogInformation("NOOR-DEBUG: [{RequestId}] HandleTokenValidation - Validating token: {Token}", 
                requestId, Model.TokenInput);

            // Call the real token validation API
            using var httpClient = HttpClientFactory.CreateClient("default");
            
            // Debug: Log HttpClient configuration
            Logger.LogInformation("NOOR-DEBUG: [{RequestId}] HttpClient BaseAddress: {BaseAddress}", 
                requestId, httpClient.BaseAddress?.ToString() ?? "null");
            
            var apiUrl = $"/api/participant/session/{Model.TokenInput}/validate";
            Logger.LogInformation("NOOR-DEBUG: [{RequestId}] Making API call to: {ApiUrl}", 
                requestId, apiUrl);
                
            var response = await httpClient.GetAsync(apiUrl);
            
            Logger.LogInformation("NOOR-DEBUG: [{RequestId}] Token validation API response: {StatusCode}", 
                requestId, response.StatusCode);

            if (response.IsSuccessStatusCode)
            {
                var content = await response.Content.ReadAsStringAsync();
                Logger.LogInformation("NOOR-DEBUG: [{RequestId}] Token validation response: {Content}", 
                    requestId, content);

                var validationResult = System.Text.Json.JsonSerializer.Deserialize<SessionValidationResponse>(content, 
                    new System.Text.Json.JsonSerializerOptions { PropertyNameCaseInsensitive = true });

                if (validationResult?.Valid == true)
                {
                    Logger.LogInformation("NOOR-DEBUG: [{RequestId}] Token validation successful - SessionID: {SessionId}, Title: {Title}, Status: {Status}", 
                        requestId, validationResult.SessionId, validationResult.Session?.Title, validationResult.Session?.Status);

                    // ISSUE-124 FIX: Update session name and description with nested session data from API
                    Model.SessionName = validationResult.Session?.Title ?? "Unknown Session";
                    Model.SessionDescription = $"Status: {validationResult.Session?.Status ?? "Unknown"}";
                    
                    Logger.LogInformation("NOOR-DEBUG: [{RequestId}] Updated session name to: {SessionName}, description to: {SessionDescription}", 
                        requestId, Model.SessionName, Model.SessionDescription);

                    // AUTHENTICATION GATE: Check if session has already started AND user is registered  
                    var sessionStatus = validationResult.Session?.Status?.ToLowerInvariant();
                    if (sessionStatus == "active" || sessionStatus == "started" || sessionStatus == "in progress")
                    {
                        // Check if user is already registered as participant before allowing direct access
                        Logger.LogInformation("COPILOT-DEBUG: [{RequestId}] Session already started (Status: {Status}) - checking participant registration status", 
                            requestId, validationResult.Session?.Status);
                        
                        var isRegistered = await CheckParticipantRegistrationAsync(Model.TokenInput, requestId);
                        if (isRegistered)
                        {
                            Logger.LogInformation("[DEBUG-WORKITEM:userlanding:impl:{0}] User already registered - routing to SessionCanvas ;CLEANUP_OK", 
                                Guid.NewGuid().ToString("N")[..8]);
                            Navigation.NavigateTo($"/session/canvas/{Model.TokenInput}");
                            return;
                        }
                        else
                        {
                            Logger.LogInformation("[DEBUG-WORKITEM:userlanding:impl:{0}] User not registered - must complete registration first ;CLEANUP_OK", 
                                Guid.NewGuid().ToString("N")[..8]);
                            // Continue to registration panel instead of direct navigation
                        }
                    }

                    // Switch to registration panel
                    Model.ShowTokenPanel = false;
                    
                    // [DEBUG-WORKITEM:user:UI] Set button text based on session status
                    if (sessionStatus == "active" || sessionStatus == "started" || sessionStatus == "in progress")
                    {
                        Model.ButtonText = "Join Live Canvas";
                        Model.ButtonIconClass = "fa-solid fa-play";
                        Logger.LogInformation("[DEBUG-WORKITEM:user:UI] Button set to 'Join Live Canvas' for active session");
                    }
                    else
                    {
                        Model.ButtonText = "Join Waiting Room";
                        Model.ButtonIconClass = "fa-solid fa-hourglass-start";
                        Logger.LogInformation("[DEBUG-WORKITEM:user:UI] Button set to 'Join Waiting Room' for inactive session");
                    }
                    Model.ErrorMessage = string.Empty;
                    
                    Logger.LogInformation("NOOR-DEBUG: [{RequestId}] Successfully switched to registration panel", requestId);

                    // ISSUE-114 FIX: Load countries ONLY after successful token validation
                    Logger.LogInformation("COPILOT-DEBUG: [{RequestId}] Loading countries dropdown after token validation...", requestId);
                    await LoadCountriesAsync();
                    
                    // Set focus to name input after successful manual token validation
                    await SetFocusAfterPanelSwitch("name-input", requestId);
                }
                else
                {
                    Logger.LogWarning("NOOR-DEBUG: [{RequestId}] Token validation returned invalid result", requestId);
                    Model.ErrorMessage = "Invalid token. Please check your token and try again.";
                }
            }
            else
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                Logger.LogWarning("NOOR-USER-LANDING: [{RequestId}] Token validation API failed with status: {StatusCode}", 
                    requestId, response.StatusCode);
                Logger.LogWarning("NOOR-USER-LANDING: [{RequestId}] Error response content: {ErrorContent}", 
                    requestId, errorContent);
                Logger.LogWarning("NOOR-USER-LANDING: [{RequestId}] Response headers: {Headers}", 
                    requestId, string.Join(", ", response.Headers.Select(h => $"{h.Key}: {string.Join(", ", h.Value)}")));
                Model.ErrorMessage = "Invalid token. Please check your token and try again.";
            }
        }
        catch (HttpRequestException httpEx)
        {
            var requestId = Guid.NewGuid().ToString("N")[..8];
            Logger.LogError(httpEx, "NOOR-USER-LANDING: [{RequestId}] HttpRequestException during token validation for token: {Token}", 
                requestId, Model.TokenInput);
            Logger.LogError("NOOR-USER-LANDING: [{RequestId}] HttpRequestException Message: {Message}", 
                requestId, httpEx.Message);
            Model.ErrorMessage = "Network error. Please check your connection and try again.";
        }
        catch (Exception ex)
        {
            var requestId = Guid.NewGuid().ToString("N")[..8];
            Logger.LogError(ex, "NOOR-USER-LANDING: [{RequestId}] EXCEPTION during token validation for token: {Token}", 
                requestId, Model.TokenInput);
            Logger.LogError("NOOR-USER-LANDING: [{RequestId}] Exception Type: {ExceptionType}, Message: {Message}", 
                requestId, ex.GetType().Name, ex.Message);
            Logger.LogError("NOOR-USER-LANDING: [{RequestId}] Stack Trace: {StackTrace}", 
                requestId, ex.StackTrace);
            Model.ErrorMessage = "Unable to validate token. Please try again later.";
        }
    }

    private async Task HandleUserRegistration()
    {
        if (Model == null) return;

        // Validate required fields
        if (string.IsNullOrWhiteSpace(Model.NameInput) || 
            string.IsNullOrWhiteSpace(Model.EmailInput) || 
            string.IsNullOrWhiteSpace(Model.CountrySelect))
        {
            Model.ErrorMessage = "Please fill in all required fields.";
            return;
        }

        // Validate email format
        if (!IsValidEmail(Model.EmailInput))
        {
            Model.ErrorMessage = "Please enter a valid email address.";
            return;
        }

        try
        {
            var requestId = Guid.NewGuid().ToString("N")[..8];
            Logger.LogInformation("NOOR-USER-LANDING: [{RequestId}] Starting participant registration for {Name}", requestId, Model.NameInput);

            // Call the token-based registration API
            var baseUrl = GetBaseUrl();
            using var httpClient = HttpClientFactory.CreateClient("default");
            httpClient.BaseAddress = new Uri(baseUrl);

            // Create registration request using the token directly
            var registrationRequest = new
            {
                Token = Model.TokenInput,
                Name = Model.NameInput,
                Email = Model.EmailInput,
                Country = Model.CountrySelect
            };

            Logger.LogInformation("NOOR-USER-LANDING: [{RequestId}] Sending registration to API - Name: {Name}, Country: {Country}", 
                requestId, registrationRequest.Name, registrationRequest.Country);

            var registrationResponse = await httpClient.PostAsJsonAsync("api/participant/register-with-token", registrationRequest);

            if (!registrationResponse.IsSuccessStatusCode)
            {
                var error = await registrationResponse.Content.ReadAsStringAsync();
                Logger.LogError("NOOR-USER-LANDING: [{RequestId}] Registration failed: {Error}", requestId, error);
                Model.ErrorMessage = "Registration failed. Please try again.";
                return;
            }

            var registrationResult = await registrationResponse.Content.ReadFromJsonAsync<JsonElement>();
            Logger.LogInformation("NOOR-USER-LANDING: [{RequestId}] Registration successful - storing UserGuid for Q&A authentication", requestId);
            
            // Store UserGuid from registration response for SessionCanvas Q&A authentication consistency
            try
            {
                if (registrationResult.TryGetProperty("userGuid", out var userGuidElement) && 
                    userGuidElement.ValueKind != JsonValueKind.Null)
                {
                    var userGuidValue = userGuidElement.GetString();
                    if (!string.IsNullOrEmpty(userGuidValue))
                    {
                        var storageKey = $"noor_user_guid_{Model.TokenInput}";
                        // Store in localStorage as primary source for registered users
                        await JSRuntime.InvokeVoidAsync("localStorage.setItem", storageKey, userGuidValue);
                        // Also store in sessionStorage for tab consistency with SessionCanvas
                        await JSRuntime.InvokeVoidAsync("sessionStorage.setItem", storageKey, userGuidValue);
                        Logger.LogInformation("[DEBUG-WORKITEM:userlanding:USERGUID] UserGuid stored in both localStorage and sessionStorage for authentication consistency: {UserGuid}", userGuidValue);
                    }
                }
                else
                {
                    Logger.LogWarning("UserGuid not found or null in registration response");
                }
            }
            catch (Exception ex)
            {
                Logger.LogWarning(ex, "Failed to extract UserGuid from registration response");
            }

            // [DEBUG-WORKITEM:user:API] Atomic post-registration navigation with registration verification
            Logger.LogInformation("[DEBUG-WORKITEM:user:API] Performing atomic session status and registration check post-registration");
            
            // Use a semaphore to ensure atomic navigation decision
            using var semaphore = new SemaphoreSlim(1, 1);
            await semaphore.WaitAsync();
            
            try
            {
                // First verify registration completed successfully
                var registrationVerified = await CheckParticipantRegistrationAsync(Model.TokenInput, requestId);
                if (!registrationVerified)
                {
                    Logger.LogWarning("[DEBUG-WORKITEM:user:API] Registration verification failed after successful API response");
                    Model.ErrorMessage = "Registration verification failed. Please try again.";
                    return;
                }
                
                // Then check session status for proper routing
                var sessionValidationResponse = await httpClient.GetAsync($"api/participant/session/{Model.TokenInput}/validate");
                
                if (sessionValidationResponse.IsSuccessStatusCode)
                {
                    var sessionContent = await sessionValidationResponse.Content.ReadAsStringAsync();
                    var sessionValidation = System.Text.Json.JsonSerializer.Deserialize<SessionValidationResponse>(sessionContent, 
                        new System.Text.Json.JsonSerializerOptions { PropertyNameCaseInsensitive = true });
                    
                    var sessionStatus = sessionValidation?.Session?.Status?.ToLowerInvariant();
                    if (sessionStatus == "active" || sessionStatus == "started" || sessionStatus == "in progress")
                    {
                        Logger.LogInformation("[DEBUG-WORKITEM:user:UI] Session is active and user registered, routing to SessionCanvas");
                        Navigation.NavigateTo($"/session/canvas/{Model.TokenInput}");
                    }
                    else
                    {
                        Logger.LogInformation("[DEBUG-WORKITEM:user:UI] Session not started but user registered, routing to SessionWaiting");
                        Navigation.NavigateTo($"/session/waiting/{Model.TokenInput}");
                    }
                }
                else
                {
                    // Fallback to waiting room if status check fails
                    Logger.LogWarning("[DEBUG-WORKITEM:user:API] Session status recheck failed, defaulting to waiting room");
                    Navigation.NavigateTo($"/session/waiting/{Model.TokenInput}");
                }
            }
            finally
            {
                semaphore.Release();
            }
        }
        catch (HttpRequestException)
        {
            Model.ErrorMessage = "Network error. Please check your connection and try again.";
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "User registration error");
            Model.ErrorMessage = "Registration failed. Please try again later.";
        }
    }

    private static bool IsValidEmail(string email)
    {
        try
        {
            var addr = new System.Net.Mail.MailAddress(email);
            return addr.Address == email;
        }
        catch
        {
            return false;
        }
    }

    /// <summary>
    /// AUTHENTICATION GATE: Verify if user is registered as participant before allowing session access
    /// Fixes bug where unregistered users could bypass registration requirement
    /// </summary>
    private async Task<bool> CheckParticipantRegistrationAsync(string token, string requestId)
    {
        try
        {
            Logger.LogInformation("[DEBUG-WORKITEM:userlanding:impl:{0}] Checking participant registration status for token: {1} ;CLEANUP_OK", 
                requestId, token);

            using var httpClient = HttpClientFactory.CreateClient("default");
            var participantsUrl = $"/api/participant/session/{token}/participants";
            var response = await httpClient.GetAsync(participantsUrl);

            if (!response.IsSuccessStatusCode)
            {
                Logger.LogWarning("[DEBUG-WORKITEM:userlanding:impl:{0}] Participant check API failed: {1} ;CLEANUP_OK", 
                    requestId, response.StatusCode);
                return false;
            }

            var participantsContent = await response.Content.ReadAsStringAsync();
            var participantsData = System.Text.Json.JsonSerializer.Deserialize<ParticipantsCheckResponse>(participantsContent,
                new System.Text.Json.JsonSerializerOptions { PropertyNameCaseInsensitive = true });

            // Check if any participant matches current browser session (via stored UserGuid)
            var storedUserGuid = await JSRuntime.InvokeAsync<string?>("localStorage.getItem", $"noor_user_guid_{token}");
            
            if (!string.IsNullOrEmpty(storedUserGuid) && participantsData?.Participants != null)
            {
                var isRegistered = participantsData.Participants.Any(p => 
                    string.Equals(p.UserId, storedUserGuid, StringComparison.OrdinalIgnoreCase));
                
                Logger.LogInformation("[DEBUG-WORKITEM:userlanding:impl:{0}] Registration check result: {1} (UserGuid: {2}) ;CLEANUP_OK", 
                    requestId, isRegistered, storedUserGuid);
                
                return isRegistered;
            }

            Logger.LogInformation("[DEBUG-WORKITEM:userlanding:impl:{0}] No stored UserGuid found - user not registered ;CLEANUP_OK", 
                requestId);
            return false;
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "[DEBUG-WORKITEM:userlanding:impl:{0}] Exception during participant registration check ;CLEANUP_OK", 
                requestId);
            return false;
        }
    }

    private async Task LoadCountriesAsync()
    {
        try
        {
            Model!.IsLoadingCountries = true;
            StateHasChanged();
            var requestId = Guid.NewGuid().ToString("N")[..8];
            Logger.LogInformation("COPILOT-DEBUG: [{RequestId}] [COUNTRIES] Loading countries from API...", requestId);
            using var httpClient = HttpClientFactory.CreateClient("default");
            httpClient.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", "demo-token-12345");
            var countriesUrl = $"/api/host/countries?guid={Uri.EscapeDataString(Model?.TokenInput ?? "USERREF001")}";
            Logger.LogInformation("COPILOT-DEBUG: [{RequestId}] [COUNTRIES] GET {Url}", requestId, countriesUrl);
            var response = await httpClient.GetAsync(countriesUrl);
            Logger.LogInformation("COPILOT-DEBUG: [{RequestId}] [COUNTRIES] API response: {StatusCode}", requestId, response.StatusCode);
            if (response.IsSuccessStatusCode)
            {
                Countries = await response.Content.ReadFromJsonAsync<List<CountryData>>() ?? new List<CountryData>();
                Logger.LogInformation("COPILOT-DEBUG: [{RequestId}] [COUNTRIES] Loaded {CountryCount} countries successfully", requestId, Countries.Count);
            }
            else
            {
                Logger.LogWarning("COPILOT-DEBUG: [{RequestId}] [COUNTRIES] Failed to load countries - HTTP {StatusCode}", requestId, response.StatusCode);
                if (Model != null)
                {
                    Model.ErrorMessage = "Failed to load countries from database.";
                }
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "COPILOT-DEBUG: [COUNTRIES] Error loading countries");
            if (Model != null)
            {
                Model.ErrorMessage = "Error loading countries. Please refresh the page.";
            }
        }
        finally
        {
            if (Model != null)
            {
                Model.IsLoadingCountries = false;
                StateHasChanged();
            }
        }
    }

    /// <summary>
    /// Revalidate session status atomically to prevent race conditions
    /// </summary>
    private async Task<(bool isActive, string? status)> RevalidateSessionStatusAsync(string token, string requestId)
    {
        try
        {
            using var httpClient = HttpClientFactory.CreateClient("default");
            var response = await httpClient.GetAsync($"/api/participant/session/{token}/validate");
            
            if (response.IsSuccessStatusCode)
            {
                var content = await response.Content.ReadAsStringAsync();
                var validationResult = System.Text.Json.JsonSerializer.Deserialize<SessionValidationResponse>(content, 
                    new System.Text.Json.JsonSerializerOptions { PropertyNameCaseInsensitive = true });
                
                var sessionStatus = validationResult?.Session?.Status?.ToLowerInvariant();
                var isActive = sessionStatus == "active" || sessionStatus == "started" || sessionStatus == "in progress";
                
                Logger.LogInformation("[DEBUG-WORKITEM:userlanding:revalidation:{0}] Session revalidation result - Status: {1}, IsActive: {2} ;CLEANUP_OK", 
                    requestId, sessionStatus, isActive);
                
                return (isActive, sessionStatus);
            }
            
            Logger.LogWarning("[DEBUG-WORKITEM:userlanding:revalidation:{0}] Session revalidation API failed: {1} ;CLEANUP_OK", 
                requestId, response.StatusCode);
            return (false, null);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "[DEBUG-WORKITEM:userlanding:revalidation:{0}] Exception during session revalidation ;CLEANUP_OK", 
                requestId);
            return (false, null);
        }
    }

    /// <summary>
    /// Handles test data entry for debug panel - Development only
    /// </summary>
    private async Task HandleEnterTestData()
    {
        if (Model == null) return;

        try
        {
            var requestId = Guid.NewGuid().ToString("N")[..8];
            Logger.LogInformation("NOOR-DEBUG-PANEL: [{RequestId}] Entering test data for UserLanding", requestId);

            // Ensure countries are loaded before generating test data
            if (!Countries.Any())
            {
                Logger.LogInformation("NOOR-DEBUG-PANEL: [{RequestId}] Loading countries for test data", requestId);
                await LoadCountriesAsync();
            }

            // Wait a moment for countries to fully load
            if (Countries.Any())
            {
                // Generate superhero test data (name and email only)
                var testData = TestDataService.GenerateUserLandingNameAndEmail();

                // Populate the form fields
                Model.NameInput = testData.name;
                Model.EmailInput = testData.email;

                // Randomly select a country from available dropdown options using ISO2 codes
                var random = new Random();
                var randomCountry = Countries[random.Next(Countries.Count)];
                Model.CountrySelect = randomCountry.ISO2; // Use ISO2 code for dropdown selection

                // Clear any existing error messages
                Model.ErrorMessage = string.Empty;

                Logger.LogInformation("NOOR-DEBUG-PANEL: [{RequestId}] Test data populated - Name: {Name}, Email: {Email}, Country: {CountryName} (ISO2: {ISO2})", 
                    requestId, testData.name, testData.email, randomCountry.CountryName, randomCountry.ISO2);

                StateHasChanged();
            }
            else
            {
                Logger.LogWarning("NOOR-DEBUG-PANEL: [{RequestId}] No countries available for test data", requestId);
                if (Model != null)
                {
                    Model.ErrorMessage = "Countries not loaded. Please wait and try again.";
                    StateHasChanged();
                }
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "NOOR-DEBUG-PANEL: Error populating test data for UserLanding");
            if (Model != null)
            {
                Model.ErrorMessage = "Error generating test data.";
                StateHasChanged();
            }
        }
    }

    public class UserLandingViewModel
    {
        public string? LogoText { get; set; }
        public string? SessionName { get; set; }
        public string? SessionDescription { get; set; }
        public bool ShowTokenPanel { get; set; } = true;
        public string TokenInput { get; set; } = string.Empty;
        public string NameInput { get; set; } = string.Empty;
        public string EmailInput { get; set; } = string.Empty;
        public string CountrySelect { get; set; } = string.Empty;
        public string ErrorMessage { get; set; } = string.Empty;
        public string ButtonText { get; set; } = "Submit";
        public string ButtonIconClass { get; set; } = "fa-solid fa-arrow-right-to-bracket";
        public bool IsLoading { get; set; }
        public bool IsLoadingCountries { get; set; }
    }
    
    public class CountryData
    {
        public int CountryID { get; set; }
        public string CountryName { get; set; } = string.Empty;
        public string ISO2 { get; set; } = string.Empty;
        public string? ISO3 { get; set; }
        public bool IsActive { get; set; }
    }

    /// <summary>
    /// Response model for session validation API - matches actual API response format
    /// </summary>
    public class SessionValidationResponse
    {
        public long SessionId { get; set; }
        public string? Token { get; set; }
        public bool Valid { get; set; }  // Changed from Success to Valid
        public string? Message { get; set; }
        public SessionInfo? Session { get; set; }  // ISSUE-124 FIX: Add nested session object
        public ParticipantInfo? Participant { get; set; }  // Optional: for completeness
    }

    public class SessionInfo
    {
        public long SessionId { get; set; }
        public string? Title { get; set; }  // ISSUE-124 FIX: Nested session title
        public string? Status { get; set; }  // ISSUE-124 FIX: Nested session status
        public string? Description { get; set; }
        public int? ParticipantCount { get; set; }
        public int? MaxParticipants { get; set; }
        public DateTime? StartedAt { get; set; }  // Real KSESSIONS SessionDate
        public DateTime? CreatedAt { get; set; }
        public string? InstructorName { get; set; }  // Database-driven instructor name from KSESSIONS.Speakers
        public DateTime? StartTime { get; set; }  // Real session timing from KSESSIONS database
        public TimeSpan? Duration { get; set; }  // Real duration from API
    }

    public class ParticipantInfo
    {
        public string? JoinUrl { get; set; }
        public int AccessCount { get; set; }
        public DateTime? LastAccessedAt { get; set; }
    }

    /// <summary>
    /// Response model for participant registration check - used by authentication gate
    /// </summary>
    public class ParticipantsCheckResponse
    {
        public int SessionId { get; set; }
        public string? Token { get; set; }
        public int ParticipantCount { get; set; }
        public List<ParticipantCheckData>? Participants { get; set; }
        public string? RequestId { get; set; }
    }

    public class ParticipantCheckData
    {
        public string UserId { get; set; } = "";
        public string Name { get; set; } = "";
        public string Country { get; set; } = "";
        public string Flag { get; set; } = "";
    }


}