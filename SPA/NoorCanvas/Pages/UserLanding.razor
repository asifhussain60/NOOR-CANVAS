@page "/user/landing"
@page "/user/landing/{sessionToken?}"
@layout EmptyLayout
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Components.Web
@using System.ComponentModel.DataAnnotations
@using System.Net.Http.Json
@using System.Text.Json.Serialization
@inject IHttpClientFactory HttpClientFactory
@inject IJSRuntime JSRuntime
@inject NavigationManager Navigation
@inject ILogger<UserLanding> Logger

<PageTitle>NOOR Canvas - User Authentication</PageTitle>

<HeadContent>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Playfair+Display:wght@400;700;900&family=Cinzel+Decorative:wght@400;700&family=Inter:wght@400;500;600&family=Poppins:wght@400;600;700&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
</HeadContent>

<div style="background-color:#F8F5F1;display:flex;align-items:center;justify-content:center;min-height:100vh;padding:1.5rem;">
    <div style="width:100%;max-width:35rem;background-color:#FFFFFF;border:1px solid #e5e7eb;box-shadow:0 25px 50px -12px rgba(0,0,0,0.25);border-radius:1.5rem;padding:2rem 3rem;text-align:center;">
        
        <!-- Logo -->
        <div style="display:flex;align-items:center;justify-content:center;text-align:center;margin-bottom:1.5rem;">
            <img src="/images/branding/NC-Header.png?v=@DateTime.Now.Ticks" 
                 alt="@(Model?.LogoText ?? "NOOR Canvas")" 
                 style="max-width:150px;height:auto;margin:0 auto;" />
        </div>
        
        <!-- Main Content -->
        <div style="display:flex;flex-direction:column;gap:1.5rem;">
            <h1 style="font-size:3rem;font-family:'Poppins',sans-serif;font-weight:700;color:#006400;margin:0;">User Authentication</h1>
            <div style="display:flex;flex-direction:column;gap:0.25rem;margin-top:-0.5rem;">
                <p style="font-family:'Inter',sans-serif;font-size:2rem;color:#D4AF37;font-weight:600;margin:0;">@(Model?.SessionName ?? "[Session Name]")</p>
                <p style="font-family:'Inter',sans-serif;font-size:12px;color:grey;font-weight:normal;margin:0;">@(Model?.SessionDescription ?? "[Session Desc]")</p>
            </div>

            <!-- User Authentication Form -->
            <div style="width:100%;background-color:#F8F5F1;border-radius:1rem;border:2px solid;border-image:linear-gradient(to right, #C5B358, #D4AF37, #C5B358) 1;padding:2rem 3rem;text-align:left;display:flex;flex-direction:column;gap:1rem;margin-top:2rem;box-shadow:inset 0 2px 4px 0 rgba(0,0,0,0.06);">
                
                @if (!string.IsNullOrEmpty(Model?.ErrorMessage))
                {
                    <div style="background-color:#FEE2E2;border:1px solid #FECACA;color:#B91C1C;padding:1rem;border-radius:0.5rem;margin-bottom:1rem;text-align:center;">
                        <span>@Model.ErrorMessage</span>
                    </div>
                }
                @if (Model?.ShowTokenPanel == true)
                {
                    <div style="opacity:1;transform:translateY(0);transition:all 0.5s ease-in-out;">
                        <div style="display:flex;flex-direction:column;align-items:center;justify-content:center;">
                            <h3 style="font-family:'Inter',sans-serif;font-weight:700;color:#4B3C2B;font-size:1.5rem;margin-bottom:0.5rem;">ENTER TOKEN</h3>
                            <p style="font-family:'Inter',sans-serif;font-size:0.875rem;color:#706357;margin-top:0.5rem;text-align:center;">Enter your unique token to join the session.</p>
                        </div>
                        <div style="position:relative;margin-top:1rem;">
                            <div style="position:absolute;top:0;left:0;height:100%;display:flex;align-items:center;padding-left:0.75rem;pointer-events:none;">
                                <i class="fa-solid fa-user-lock" style="color:#706357;"></i>
                            </div>
                            <InputText @bind-Value="Model!.TokenInput" 
                                      @onfocus="ClearError" 
                                      placeholder="Enter your Unique User Token" 
                                      style="display:block;width:100%;padding-left:2.5rem;padding-right:1rem;padding-top:0.5rem;padding-bottom:0.5rem;font-family:'Inter',sans-serif;color:#4B3C2B;border:1px solid #D1D5DB;border-radius:0.75rem;outline:none;text-align:left;"
                                      autocomplete="off" />
                        </div>
                    </div>
                }
                else
                {
                    <div style="opacity:1;transform:translateY(0);transition:all 0.5s ease-in-out;">
                        <div style="display:flex;flex-direction:column;align-items:center;justify-content:center;margin-top:0.5rem;">
                            <h3 style="font-family:'Inter',sans-serif;font-weight:700;color:#4B3C2B;font-size:1.5rem;margin-bottom:0.5rem;">REGISTRATION</h3>
                            <p style="font-family:'Inter',sans-serif;font-size:0.875rem;color:#706357;margin-top:0.5rem;text-align:center;">Please fill out the form to register for this session.</p>
                        </div>
                        
                        <div style="position:relative;margin-top:1rem;">
                            <label style="font-family:'Inter',sans-serif;font-weight:600;color:#4B3C2B;display:block;margin-bottom:0.5rem;">Name</label>
                            <div style="position:absolute;bottom:0;left:0;height:2.5rem;display:flex;align-items:center;padding-left:0.75rem;pointer-events:none;">
                                <i class="fa-solid fa-user" style="color:#706357;"></i>
                            </div>
                            <InputText @bind-Value="Model!.NameInput" 
                                      @onfocus="ClearError" 
                                      placeholder="Enter your name" 
                                      style="display:block;width:100%;padding-left:2.5rem;padding-right:1rem;padding-top:0.5rem;padding-bottom:0.5rem;font-family:'Inter',sans-serif;color:#4B3C2B;border:1px solid #D1D5DB;border-radius:0.75rem;outline:none;"
                                      autocomplete="off" />
                        </div>
                        
                        <div style="position:relative;margin-top:1rem;">
                            <label style="font-family:'Inter',sans-serif;font-weight:600;color:#4B3C2B;display:block;margin-bottom:0.5rem;">Email Address</label>
                            <div style="position:absolute;bottom:0;left:0;height:2.5rem;display:flex;align-items:center;padding-left:0.75rem;pointer-events:none;">
                                <i class="fa-solid fa-envelope" style="color:#706357;"></i>
                            </div>
                            <InputText @bind-Value="Model!.EmailInput" 
                                      @onfocus="ClearError" 
                                      placeholder="Enter your email" 
                                      style="display:block;width:100%;padding-left:2.5rem;padding-right:1rem;padding-top:0.5rem;padding-bottom:0.5rem;font-family:'Inter',sans-serif;color:#4B3C2B;border:1px solid #D1D5DB;border-radius:0.75rem;outline:none;"
                                      autocomplete="off" />
                        </div>
                        
                        <div style="position:relative;margin-top:1rem;">
                            <label style="font-family:'Inter',sans-serif;font-weight:600;color:#4B3C2B;display:block;margin-bottom:0.5rem;">Country</label>
                            <div style="position:absolute;bottom:0;left:0;height:2.5rem;display:flex;align-items:center;padding-left:0.75rem;pointer-events:none;">
                                <i class="fa-solid fa-globe" style="color:#706357;"></i>
                            </div>
                            <InputSelect @bind-Value="Model!.CountrySelect" 
                                        @onfocus="ClearError" 
                                        style="display:block;width:100%;padding-left:2.5rem;padding-right:1rem;padding-top:0.5rem;padding-bottom:0.5rem;font-family:'Inter',sans-serif;color:#4B3C2B;border:1px solid #D1D5DB;border-radius:0.75rem;outline:none;"
                                        autocomplete="off">
                                <option value="">Select your country</option>
                                <option value="US">United States</option>
                                <option value="CA">Canada</option>
                                <option value="UK">United Kingdom</option>
                                <option value="AU">Australia</option>
                                <option value="DE">Germany</option>
                                <option value="FR">France</option>
                                <option value="JP">Japan</option>
                                <option value="IN">India</option>
                                <option value="BR">Brazil</option>
                                <option value="MX">Mexico</option>
                            </InputSelect>
                        </div>
                    </div>
                }
            </div>

            <!-- Button -->
            <div style="margin-top:2rem;">
                <button @onclick="HandleButtonClick" 
                        disabled="@Model!.IsLoading"
                        style="width:100%;display:flex;align-items:center;justify-content:center;padding-top:0.75rem;padding-bottom:0.75rem;padding-left:1.5rem;padding-right:1.5rem;border-radius:0.75rem;color:white;font-weight:600;transition:transform 0.2s;transform:scale(1);box-shadow:0 10px 15px -3px rgba(0,100,0,0.4), 0 4px 6px -2px rgba(0,100,0,0.2);background-color:#006400;border:none;cursor:pointer;">
                    @if (Model.IsLoading)
                    {
                        <i class="fa-solid fa-spinner fa-spin" style="margin-right:0.5rem;"></i>
                    }
                    else
                    {
                        <i class="@Model.ButtonIconClass" style="margin-right:0.5rem;"></i>
                    }
                    <span>@Model.ButtonText</span>
                </button>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter] public string? SessionToken { get; set; }
    
    private UserLandingViewModel? Model { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var requestId = Guid.NewGuid().ToString("N")[..8];
        Logger.LogInformation("NOOR-DEBUG: [{RequestId}] UserLanding OnInitialized - SessionToken: {SessionToken}", 
            requestId, SessionToken ?? "null");

        Model = new UserLandingViewModel
        {
            LogoText = "NOOR Canvas",
            SessionName = "[Loading Session...]", // Dynamic session name to be loaded
            ShowTokenPanel = true,
            ButtonText = "Submit",
            ButtonIconClass = "fa-solid fa-arrow-right-to-bracket",
            IsLoading = false
        };

        // If session token provided via URL, populate it and load session info
        if (!string.IsNullOrEmpty(SessionToken))
        {
            Logger.LogInformation("NOOR-DEBUG: [{RequestId}] Loading session info for token: {Token}", 
                requestId, SessionToken);
            
            Model.TokenInput = SessionToken;
            await LoadSessionInfoAsync(SessionToken, requestId);
        }
        else
        {
            Logger.LogInformation("NOOR-DEBUG: [{RequestId}] No session token provided, using default session name", 
                requestId);
            Model.SessionName = "Islamic Art & Calligraphy Session"; // Fallback for no token
        }
    }

    /// <summary>
    /// Load session information from API using token validation
    /// </summary>
    private async Task LoadSessionInfoAsync(string token, string requestId)
    {
        try
        {
            Logger.LogInformation("NOOR-DEBUG: [{RequestId}] Calling session validation API for token: {Token}", 
                requestId, token);

            using var httpClient = HttpClientFactory.CreateClient();
            var apiUrl = $"https://localhost:9091/api/participant/session/{token}/validate";
            var response = await httpClient.GetAsync(apiUrl);
            
            Logger.LogInformation("NOOR-DEBUG: [{RequestId}] Session validation API response: {StatusCode}", 
                requestId, response.StatusCode);

            if (response.IsSuccessStatusCode)
            {
                var content = await response.Content.ReadAsStringAsync();
                Logger.LogInformation("NOOR-DEBUG: [{RequestId}] Session validation response content: {Content}", 
                    requestId, content);

                var validationResult = System.Text.Json.JsonSerializer.Deserialize<SessionValidationResponse>(content, 
                    new System.Text.Json.JsonSerializerOptions { PropertyNameCaseInsensitive = true });

                if (validationResult?.Valid == true && validationResult.Session != null)
                {
                    Logger.LogInformation("NOOR-DEBUG: [{RequestId}] Session validation successful - SessionID: {SessionId}, Title: {Title}", 
                        requestId, validationResult.Session.SessionId, validationResult.Session.Title);

                    if (Model != null)
                    {
                        Model.SessionName = validationResult.Session.Title ?? "Unknown Session";
                        Model.SessionDescription = validationResult.Session.Description ?? "Session description not available";
                        
                        Logger.LogInformation("NOOR-DEBUG: [{RequestId}] Updated Model.SessionName to: {SessionName}, SessionDescription to: {SessionDescription}", 
                            requestId, Model.SessionName, Model.SessionDescription);
                    }
                }
                else
                {
                    Logger.LogWarning("NOOR-DEBUG: [{RequestId}] Session validation failed or returned invalid data", requestId);
                    if (Model != null)
                    {
                        Model.SessionName = "Invalid Session";
                    }
                }
            }
            else
            {
                Logger.LogError("NOOR-DEBUG: [{RequestId}] Session validation API failed with status: {StatusCode}", 
                    requestId, response.StatusCode);
                if (Model != null)
                {
                    Model.SessionName = "Session Not Found";
                }
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "NOOR-DEBUG: [{RequestId}] Exception during session info loading for token: {Token}", 
                requestId, token);
            if (Model != null)
            {
                Model.SessionName = "Error Loading Session";
            }
        }
    }

    private void ClearError()
    {
        if (Model != null)
        {
            Model.ErrorMessage = string.Empty;
        }
    }

    private async Task HandleButtonClick()
    {
        if (Model == null) return;

        Model.IsLoading = true;
        StateHasChanged();

        try
        {
            if (Model.ShowTokenPanel)
            {
                await HandleTokenValidation();
            }
            else
            {
                await HandleUserRegistration();
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error in HandleButtonClick");
            Model.ErrorMessage = "An unexpected error occurred. Please try again.";
        }
        finally
        {
            Model.IsLoading = false;
            StateHasChanged();
        }
    }

    private async Task HandleTokenValidation()
    {
        if (Model == null) return;

        // Validate token format
        if (string.IsNullOrWhiteSpace(Model.TokenInput) || 
            Model.TokenInput.Length != 8 || 
            !Model.TokenInput.All(char.IsLetterOrDigit))
        {
            Model.ErrorMessage = "Invalid Token";
            return;
        }

        try
        {
            var requestId = Guid.NewGuid().ToString("N")[..8];
            Logger.LogInformation("NOOR-DEBUG: [{RequestId}] HandleTokenValidation - Validating token: {Token}", 
                requestId, Model.TokenInput);

            // Call the real token validation API
            using var httpClient = HttpClientFactory.CreateClient();
            var response = await httpClient.GetAsync($"/api/participant/session/{Model.TokenInput}/validate");
            
            Logger.LogInformation("NOOR-DEBUG: [{RequestId}] Token validation API response: {StatusCode}", 
                requestId, response.StatusCode);

            if (response.IsSuccessStatusCode)
            {
                var content = await response.Content.ReadAsStringAsync();
                Logger.LogInformation("NOOR-DEBUG: [{RequestId}] Token validation response: {Content}", 
                    requestId, content);

                var validationResult = System.Text.Json.JsonSerializer.Deserialize<SessionValidationResponse>(content, 
                    new System.Text.Json.JsonSerializerOptions { PropertyNameCaseInsensitive = true });

                if (validationResult?.Valid == true && validationResult.Session != null)
                {
                    Logger.LogInformation("NOOR-DEBUG: [{RequestId}] Token validation successful - SessionID: {SessionId}, Title: {Title}", 
                        requestId, validationResult.Session.SessionId, validationResult.Session.Title);

                    // Update session name and description with actual data from API
                    Model.SessionName = validationResult.Session.Title ?? "Unknown Session";
                    Model.SessionDescription = validationResult.Session.Description ?? "Session description not available";
                    
                    Logger.LogInformation("NOOR-DEBUG: [{RequestId}] Updated session name to: {SessionName}, description to: {SessionDescription}", 
                        requestId, Model.SessionName, Model.SessionDescription);

                    // Switch to registration panel
                    Model.ShowTokenPanel = false;
                    Model.ButtonText = "Join Waiting Room";
                    Model.ButtonIconClass = "fa-solid fa-hourglass-start";
                    Model.ErrorMessage = string.Empty;
                    
                    Logger.LogInformation("NOOR-DEBUG: [{RequestId}] Successfully switched to registration panel", requestId);
                }
                else
                {
                    Logger.LogWarning("NOOR-DEBUG: [{RequestId}] Token validation returned invalid result", requestId);
                    Model.ErrorMessage = "Invalid token. Please check your token and try again.";
                }
            }
            else
            {
                Logger.LogWarning("NOOR-DEBUG: [{RequestId}] Token validation API failed with status: {StatusCode}", 
                    requestId, response.StatusCode);
                Model.ErrorMessage = "Invalid token. Please check your token and try again.";
            }
        }
        catch (HttpRequestException)
        {
            Model.ErrorMessage = "Network error. Please check your connection and try again.";
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Token validation error");
            Model.ErrorMessage = "Unable to validate token. Please try again later.";
        }
    }

    private async Task HandleUserRegistration()
    {
        if (Model == null) return;

        // Validate required fields
        if (string.IsNullOrWhiteSpace(Model.NameInput) || 
            string.IsNullOrWhiteSpace(Model.EmailInput) || 
            string.IsNullOrWhiteSpace(Model.CountrySelect))
        {
            Model.ErrorMessage = "Please fill in all required fields.";
            return;
        }

        // Validate email format
        if (!IsValidEmail(Model.EmailInput))
        {
            Model.ErrorMessage = "Please enter a valid email address.";
            return;
        }

        try
        {
            // TODO: Replace with actual user registration API call
            // var registrationResult = await UserService.RegisterUserAsync(new UserRegistrationRequest
            // {
            //     Token = Model.TokenInput,
            //     Name = Model.NameInput,
            //     Email = Model.EmailInput,
            //     Country = Model.CountrySelect
            // });

            // Simulate API call for now
            await Task.Delay(1500);

            // Navigate to waiting room
            Navigation.NavigateTo($"/session/waiting/{Model.TokenInput}");
        }
        catch (HttpRequestException)
        {
            Model.ErrorMessage = "Network error. Please check your connection and try again.";
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "User registration error");
            Model.ErrorMessage = "Registration failed. Please try again later.";
        }
    }

    private static bool IsValidEmail(string email)
    {
        try
        {
            var addr = new System.Net.Mail.MailAddress(email);
            return addr.Address == email;
        }
        catch
        {
            return false;
        }
    }

    public class UserLandingViewModel
    {
        public string? LogoText { get; set; }
        public string? SessionName { get; set; }
        public string? SessionDescription { get; set; }
        public bool ShowTokenPanel { get; set; } = true;
        public string TokenInput { get; set; } = string.Empty;
        public string NameInput { get; set; } = string.Empty;
        public string EmailInput { get; set; } = string.Empty;
        public string CountrySelect { get; set; } = string.Empty;
        public string ErrorMessage { get; set; } = string.Empty;
        public string ButtonText { get; set; } = "Submit";
        public string ButtonIconClass { get; set; } = "fa-solid fa-arrow-right-to-bracket";
        public bool IsLoading { get; set; }
    }

    /// <summary>
    /// Response model for session validation API
    /// </summary>
    public class SessionValidationResponse
    {
        public bool Valid { get; set; }
        public int SessionId { get; set; }
        public string? Token { get; set; }
        public DateTime? ExpiresAt { get; set; }
        public SessionInfo? Session { get; set; }
        public ParticipantInfo? Participant { get; set; }
        public string? RequestId { get; set; }
    }

    public class SessionInfo
    {
        public int SessionId { get; set; }
        public string? Title { get; set; }
        public string? Description { get; set; }
        public string? Status { get; set; }
        public int ParticipantCount { get; set; }
        public int? MaxParticipants { get; set; }
        public DateTime? StartedAt { get; set; }
        public DateTime? CreatedAt { get; set; }
    }

    public class ParticipantInfo
    {
        public string? JoinUrl { get; set; }
        public int AccessCount { get; set; }
        public DateTime? LastAccessedAt { get; set; }
    }
}