@page "/host/{friendlyToken?}"
@page "/"
@page "/host/landing"
@layout EmptyLayout
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Web
@using System.ComponentModel.DataAnnotations
@using System.Net.Http.Json
@using System.Text.Json.Serialization
@using NoorCanvas.Controllers
@inject IHttpClientFactory HttpClientFactory
@inject IJSRuntime JSRuntime
@inject NavigationManager Navigation
@inject ILogger<HostLanding> Logger
@inject LoadingService LoadingService

<PageTitle>NOOR Canvas - Host Authentication</PageTitle>

<HeadContent>
    @* All fonts and CDNs are centralized in Pages/_Host.cshtml *@
</HeadContent>

<!-- Root container from mock -->
<div style="background-color:#F8F5F1;display:flex;align-items:center;justify-content:center;min-height:100vh;padding:1.5rem;font-family:'Inter',sans-serif;">
    
    <!-- Main card container from mock -->
    <div style="width:100%;max-width:28rem;background-color:#FFFFFF;border-radius:1.5rem;padding:2rem;box-shadow:0 25px 50px -12px rgba(0,0,0,0.25);border:1px solid #E5E7EB;text-align:center;">
    @* Adjusted max-width from 35rem to 28rem and padding from 2rem 3rem to 2rem to match mock exactly *@
        
        <!-- Logo -->
        <div class="noor-canvas-logo" style="display:flex;align-items:center;justify-content:center;text-align:center;margin-bottom:1.5rem;">
            <img src="/images/NoorCanvas.png?v=20250924" alt="@(Model?.LogoText ?? "NOOR Canvas")" />
        </div>

        <!-- Title Section from mock -->
        <h1 style="font-size:2.25rem;font-family:'Poppins',sans-serif;font-weight:700;color:#006400;margin-bottom:2rem;">
            Host Authentication
        </h1>

        <!-- Host Authentication Card from mock -->
        <div style="width:100%;background-color:#F8F5F1;border-radius:1rem;border:2px solid #C5B358;padding:2rem;text-align:left;margin-top:2rem;box-shadow:inset 0 2px 4px 0 rgba(0,0,0,0.06);">
            
            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <div style="background-color:#FEE2E2;border:1px solid #FECACA;color:#B91C1C;padding:1rem;border-radius:0.5rem;margin-bottom:1rem;text-align:center;">
                    <span>@errorMessage</span>
                </div>
            }
            
            <!-- Icon and title section from mock -->
            <div style="display:flex;flex-direction:column;align-items:center;justify-content:center;text-align:center;">
                
                <!-- Icon circle from mock -->
                <div style="background-color:white;padding:2rem;border-radius:50%;box-shadow:0 4px 6px -1px rgba(0,0,0,0.1),0 2px 4px -1px rgba(0,0,0,0.06);">
                    <i class="fa-solid fa-people-arrows" style="font-size:3rem;color:#006400;"></i>
                </div>
                
                <!-- Session Title and Description from mock -->
                <h3 style="font-size:1.5rem;font-family:'Inter',sans-serif;font-weight:700;color:#4B3C2B;margin-top:1.5rem;margin-bottom:0;">HOST SESSION</h3>
                <p style="font-family:'Inter',sans-serif;font-size:0.875rem;color:#706357;margin-top:0.5rem;margin-bottom:0;">Guided Islamic Learning</p>
            </div>

            <!-- Input Section from mock -->
            <div style="position:relative;margin-top:1rem;">
                
                <!-- Label from mock -->
                <p style="font-family:'Inter',sans-serif;font-weight:600;color:#4B3C2B;margin-bottom:0.5rem;">
                    Enter Your Host Authentication Token
                </p>
                
                <!-- Input container with icon -->
                <div style="position:relative;">
                    <!-- Icon from mock -->
                    <div style="position:absolute;top:50%;left:0.75rem;transform:translateY(-50%);pointer-events:none;">
                        <i class="fa-solid fa-key" style="color:#706357;"></i>
                    </div>
                    
                    <!-- Input field adapted from mock -->
                    <InputText @bind-Value="Model!.FriendlyToken" 
                               placeholder="8 CHAR TOKEN"
                               disabled="@isLoading"
                               autocomplete="off"
                               maxlength="8"
                               @oninput="OnTokenInput"
                               @onkeypress="OnKeyPress"
                               style="display:block;width:100%;padding:0.5rem 0.5rem 0.5rem 2.5rem;font-family:'Inter',sans-serif;color:#4B3C2B;border:1px solid #D1D5DB;border-radius:0.75rem;outline:none;transition:border-color 0.3s ease,box-shadow 0.3s ease;text-align:center;text-transform:uppercase;"
                               @onfocus="@(() => SetFocusStyle(true))"
                               @onblur="@(() => SetFocusStyle(false))" />
                </div>
                
                <!-- Help text from mock -->
                <p style="font-family:'Inter',sans-serif;font-size:0.75rem;color:#706357;margin-top:0.5rem;">
                    Get your Host GUID from the HostProvisioner tool or system administrator
                </p>
            </div>
        </div>
        
        <!-- User Registration Link Display (shown when session has user token) -->
        @if (!string.IsNullOrEmpty(UserToken))
        {
            <div style="margin-top:2rem;width:100%;background-color:#F0F9FF;border-radius:1rem;border:1px solid #3B82F6;padding:1.5rem;text-align:left;">
                <h4 style="display:flex;align-items:center;justify-content:center;gap:0.5rem;font-weight:600;font-size:1rem;color:#3B82F6;margin-bottom:1rem;text-align:center;">
                    <i class="fa-solid fa-link" style="color:#3B82F6;"></i>
                    <span>User Registration Link</span>
                </h4>
                <div style="background-color:white;border-radius:0.5rem;padding:0.75rem;border:1px solid #E2E8F0;">
                    <div style="display:flex;align-items:center;justify-content:space-between;gap:0.5rem;">
                        <input type="text" 
                               value="https://localhost:9091/user/landing/@UserToken" 
                               readonly
                               style="flex:1;background:transparent;border:none;color:#374151;font-size:0.875rem;font-family:monospace;outline:none;text-align:center;"
                               id="userLinkInput" />
                        <button onclick="copyUserLink()" 
                                style="padding:0.375rem 0.75rem;background-color:#3B82F6;color:white;border:none;border-radius:0.375rem;font-size:0.75rem;cursor:pointer;transition:all 0.2s;font-family:'Inter',sans-serif;font-weight:500;"
                                onmouseover="this.style.backgroundColor='#2563EB'"
                                onmouseout="this.style.backgroundColor='#3B82F6'">
                            <i class="fa-solid fa-copy"></i> Copy
                        </button>
                    </div>
                </div>
                <p style="font-family:'Inter',sans-serif;font-size:0.75rem;color:#706357;margin-top:0.5rem;margin-bottom:0;text-align:center;">
                    Share this link with session participants for easy registration
                </p>
            </div>
        }
        
        <!-- Button from mock -->
        <div style="margin-top:2rem;">
            <button @onclick="HandleAuthentication" 
                    disabled="@(isLoading || string.IsNullOrWhiteSpace(Model?.FriendlyToken))"
                    style="width:100%;display:flex;align-items:center;justify-content:center;padding:0.75rem 1.5rem;border-radius:0.75rem;color:white;font-weight:600;background-color:#006400;border:none;cursor:@(isLoading || string.IsNullOrWhiteSpace(Model?.FriendlyToken) ? "not-allowed" : "pointer");opacity:@(isLoading || string.IsNullOrWhiteSpace(Model?.FriendlyToken) ? "0.6" : "1");transition:transform 0.2s ease;box-shadow:0 10px 15px -3px rgba(0,100,0,0.4),0 4px 6px -2px rgba(0,100,0,0.2);font-family:'Inter',sans-serif;">
                
                @if (isLoading)
                {
                    <div style="border:2px solid transparent;border-top:2px solid white;border-radius:50%;width:1rem;height:1rem;animation:spin 1s linear infinite;margin-right:0.5rem;"></div>
                    <span>Authenticating...</span>
                }
                else
                {
                    <i class="fa-solid fa-arrow-right" style="margin-right:0.5rem;"></i>
                    <span>Access Host Control Panel</span>
                }
            </button>
        </div>




    </div>
</div>

<style>
@@keyframes spin {
    to { transform: rotate(360deg); }
}
</style>

@code {
    [Parameter] public string? FriendlyToken { get; set; }
    [Parameter] public HostLandingViewModel? Model { get; set; }
    
    private bool isLoading = false;
    private string errorMessage = "";
    
    // User token for generating user landing URL
    private string? UserToken { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var requestId = Guid.NewGuid().ToString("N")[..8];
        Logger.LogInformation("NOOR-HOST-ROUTE: [{RequestId}] HostLanding component initialized - Route: {CurrentUrl}, FriendlyToken: {FriendlyToken}", 
            requestId, Navigation.Uri, FriendlyToken ?? "null");
        
        Logger.LogInformation("NOOR-HOST: [{RequestId}] HostLanding OnInitialized - FriendlyToken: {FriendlyToken}", 
            requestId, FriendlyToken ?? "null");

        Model ??= new HostLandingViewModel
        {
            LogoText = "NOOR Canvas",
            FriendlyToken = FriendlyToken ?? "", // Use friendly token from URL parameter
            SessionName = null // Will be loaded if token provided
        };

        // If friendly token provided via URL, load session info and automatically proceed to authentication
        if (!string.IsNullOrEmpty(FriendlyToken))
        {
            Logger.LogInformation("NOOR-HOST: [{RequestId}] Loading session info for friendly token: {Token}", 
                requestId, FriendlyToken);
            
            await LoadSessionInfoAsync(FriendlyToken, requestId);
            
            // AUTO-VALIDATION: If token is present in URL and field, automatically proceed to authentication
            if (!string.IsNullOrEmpty(Model.FriendlyToken))
            {
                Logger.LogInformation("NOOR-HOST: [{RequestId}] Auto-validation: Token present in URL and field, proceeding with automatic authentication", 
                    requestId);
                
                // Brief delay for UI feedback, then auto-authenticate
                await Task.Delay(1000); 
                await HandleAuthentication();
            }
        }
        else
        {
            Logger.LogInformation("NOOR-HOST: [{RequestId}] No friendly token provided, using default session info", requestId);
            Model.SessionName = "Host Authentication Required"; // Fallback for no token
        }
    }

    /// <summary>
    /// Load session information from API using friendly token validation
    /// </summary>
    private async Task LoadSessionInfoAsync(string friendlyToken, string requestId)
    {
        try
        {
            Logger.LogInformation("NOOR-HOST: [{RequestId}] Calling session validation API for FriendlyToken: {Token}", 
                requestId, friendlyToken);

            using var httpClient = HttpClientFactory.CreateClient();
            
            // Use friendly token API endpoint
            string apiUrl = $"https://localhost:9091/api/host/token/{friendlyToken}/validate";
            
            Logger.LogInformation("NOOR-HOST: [{RequestId}] API URL: {ApiUrl}", requestId, apiUrl);
            var response = await httpClient.GetAsync(apiUrl);
            
            Logger.LogInformation("NOOR-HOST: [{RequestId}] Session validation API response: {StatusCode}", 
                requestId, response.StatusCode);

            if (response.IsSuccessStatusCode)
            {
                var content = await response.Content.ReadAsStringAsync();
                Logger.LogInformation("NOOR-HOST: [{RequestId}] Session validation response content: {Content}", 
                    requestId, content);

                var validationResult = System.Text.Json.JsonSerializer.Deserialize<HostSessionValidationResponse>(content, 
                    new System.Text.Json.JsonSerializerOptions { PropertyNameCaseInsensitive = true });

                if (validationResult?.Valid == true && validationResult.Session != null)
                {
                    Logger.LogInformation("NOOR-HOST: [{RequestId}] Session validation successful - SessionID: {SessionId}, Title: {Title}", 
                        requestId, validationResult.Session.SessionId, validationResult.Session.Title);

                    if (Model != null)
                    {
                        Model.SessionName = validationResult.Session.Title ?? "Unknown Session";
                        
                        Logger.LogInformation("NOOR-HOST: [{RequestId}] Updated Model.SessionName to: {SessionName}", 
                            requestId, Model.SessionName);
                    }
                    
                    // Load UserToken for session - get from session mapping
                    await LoadUserTokenAsync(validationResult.SessionId.ToString(), requestId);
                }
                else
                {
                    Logger.LogWarning("NOOR-HOST: [{RequestId}] Session validation failed or returned invalid data", requestId);
                    errorMessage = "Invalid Token";
                    if (Model != null)
                    {
                        Model.SessionName = "Host Authentication Required";
                    }
                }
            }
            else
            {
                Logger.LogError("NOOR-HOST: [{RequestId}] Session validation API failed with status: {StatusCode}", 
                    requestId, response.StatusCode);
                errorMessage = "Invalid Token";
                if (Model != null)
                {
                    Model.SessionName = "Host Authentication Required";
                }
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "NOOR-HOST: [{RequestId}] Exception during session info loading for FriendlyToken: {Token}", 
                requestId, friendlyToken);
            errorMessage = "Invalid Token";
            if (Model != null)
            {
                Model.SessionName = "Host Authentication Required";
            }
        }
    }

    private async Task HandleAuthentication()
    {
        if (string.IsNullOrWhiteSpace(Model?.FriendlyToken))
        {
            errorMessage = "Invalid Token";
            return;
        }

        isLoading = true;
        errorMessage = "";
        
        var requestId = Guid.NewGuid().ToString("N")[..8];
        Logger.LogInformation("NOOR-HOST: [{RequestId}] Host authentication attempt with FriendlyToken: {Token}", 
            requestId, Model.FriendlyToken);
        
        try
        {
            await JSRuntime.InvokeVoidAsync("console.log", $"NOOR-HOST: [{requestId}] Authentication initiated");

            // Validate friendly token format (8 characters, alphanumeric)
            if (Model.FriendlyToken.Length != 8 || !Model.FriendlyToken.All(c => char.IsLetterOrDigit(c)))
            {
                errorMessage = "Invalid Token";
                Logger.LogWarning("NOOR-HOST: [{RequestId}] Invalid friendly token format provided", requestId);
                return;
            }

            // Load session information for user feedback before authentication
            Logger.LogInformation("NOOR-HOST: [{RequestId}] Loading session info before authentication for better UX", requestId);
            await LoadSessionInfoAsync(Model.FriendlyToken, requestId);
            StateHasChanged(); // Update UI with session info
            await Task.Delay(500); // Brief pause to show updated session info

            // For friendly tokens, use the token validation endpoint instead of authentication endpoint
            Logger.LogInformation("NOOR-HOST: [{RequestId}] Using token validation for friendly token authentication", requestId);
            using var httpClient = HttpClientFactory.CreateClient();
            httpClient.BaseAddress = new Uri(Navigation.BaseUri);

            // Call the friendly token validation endpoint
            var response = await httpClient.GetAsync($"/api/host/token/{Model.FriendlyToken}/validate");
            
            Logger.LogInformation("NOOR-HOST: [{RequestId}] Token validation API response: {StatusCode}", 
                requestId, response.StatusCode);
            
            if (response.StatusCode == System.Net.HttpStatusCode.NotFound)
            {
                errorMessage = "Invalid Token";
                Logger.LogWarning("NOOR-HOST: [{RequestId}] Token validation failed - token not found", requestId);
                return;
            }
            
            if (!response.IsSuccessStatusCode)
            {
                errorMessage = "Authentication service unavailable. Please try again later.";
                Logger.LogError("NOOR-HOST: [{RequestId}] Token validation service error - status: {StatusCode}", 
                    requestId, response.StatusCode);
                return;
            }
            
            // Parse token validation response
            var validationResponse = await response.Content.ReadFromJsonAsync<HostSessionValidationResponse>();
            
            Logger.LogInformation("NOOR-HOST: [{RequestId}] Token validation response parsed - Valid: {Valid}, SessionId: {SessionId}", 
                requestId, validationResponse?.Valid, validationResponse?.SessionId);
            
            if (validationResponse?.Valid == true)
            {
                Logger.LogInformation("NOOR-HOST: [{RequestId}] Token validation successful", requestId);
                
                // Load session information if available
                if (validationResponse.Session != null)
                {
                    Model.SessionName = validationResponse.Session.Title;
                    
                    Logger.LogInformation("NOOR-HOST: [{RequestId}] Updated session info from validation response - Name: {SessionName}", 
                        requestId, Model.SessionName);
                    
                    StateHasChanged(); // Update UI with new session info
                    await Task.Delay(1500); // Brief delay to show updated info
                }
                
                Logger.LogInformation("NOOR-HOST: [{RequestId}] Redirecting to session opener with SessionId: {SessionId} and Token: {Token}", 
                    requestId, validationResponse.SessionId, Model.FriendlyToken);
                
                // Navigate to Host-SessionOpener with the friendly token
                Navigation.NavigateTo($"/host/session-opener/{Model.FriendlyToken}");
            }
            else
            {
                errorMessage = "Invalid Token";
                Logger.LogWarning("NOOR-HOST: [{RequestId}] Token validation failed - token not valid", requestId);
            }
        }
        catch (HttpRequestException ex)
        {
            errorMessage = "Network error. Please check your connection and try again.";
            Logger.LogError(ex, "NOOR-HOST-ERROR: [{RequestId}] Network error during host authentication", requestId);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "NOOR-HOST-ERROR: [{RequestId}] Unexpected error during host authentication", requestId);
            errorMessage = "An unexpected error occurred. Please try again.";
        }
        finally
        {
            isLoading = false;
        }
    }

    /// <summary>
    /// Load UserToken for the session to display user registration link
    /// </summary>
    private async Task LoadUserTokenAsync(string sessionId, string requestId)
    {
        try
        {
            Logger.LogInformation("NOOR-HOST: [{RequestId}] Loading user token for session: {SessionId}", requestId, sessionId);

            using var httpClient = HttpClientFactory.CreateClient();
            httpClient.BaseAddress = new Uri(Navigation.BaseUri);
            
            // Use the token validation endpoint to get session info including user token
            var response = await httpClient.GetAsync($"/api/host/token/{Model?.FriendlyToken}/validate");
            
            if (response.IsSuccessStatusCode)
            {
                var content = await response.Content.ReadAsStringAsync();
                
                // Parse the JSON response to extract the user token from session data
                using var document = System.Text.Json.JsonDocument.Parse(content);
                
                if (document.RootElement.TryGetProperty("session", out var sessionElement))
                {
                    // Look for userToken in the session object (it's coming from canvas.Sessions.UserToken)
                    if (sessionElement.TryGetProperty("userToken", out var userTokenElement) && 
                        !userTokenElement.ValueEquals("null"))
                    {
                        UserToken = userTokenElement.GetString();
                        if (!string.IsNullOrEmpty(UserToken))
                        {
                            Logger.LogInformation("NOOR-HOST: [{RequestId}] Successfully loaded user token for session {SessionId}: {UserToken}", 
                                requestId, sessionId, UserToken);
                            await InvokeAsync(StateHasChanged); // Update UI to show the user link
                        }
                    }
                    else
                    {
                        Logger.LogWarning("NOOR-HOST: [{RequestId}] No user token found in session data for session {SessionId}", 
                            requestId, sessionId);
                    }
                }
                else
                {
                    Logger.LogWarning("NOOR-HOST: [{RequestId}] No session data found in validation response for session {SessionId}", 
                        requestId, sessionId);
                }
            }
            else
            {
                Logger.LogWarning("NOOR-HOST: [{RequestId}] Failed to load user token - status: {StatusCode}", 
                    requestId, response.StatusCode);
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "NOOR-HOST: [{RequestId}] Exception loading user token for session {SessionId}", 
                requestId, sessionId);
        }
    }

    private void SetFocusStyle(bool focused)
    {
        // This method handles focus styling through CSS :focus pseudo-class
        // No need for dynamic style manipulation as CSS handles it
    }

    private void OnTokenInput(ChangeEventArgs e)
    {
        if (Model != null && e.Value != null)
        {
            var input = e.Value.ToString() ?? "";
            // Limit to 8 characters and convert to uppercase
            if (input.Length <= 8)
            {
                Model.FriendlyToken = input.ToUpperInvariant();
            }
            else
            {
                Model.FriendlyToken = input.Substring(0, 8).ToUpperInvariant();
            }
        }
    }

    private async Task OnKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter" && !isLoading && !string.IsNullOrWhiteSpace(Model?.FriendlyToken))
        {
            await HandleAuthentication();
        }
    }

    public class HostLandingViewModel
    {
        public string? LogoText { get; set; }

        [Required(ErrorMessage = "Friendly token is required")]
        [StringLength(8, MinimumLength = 8, ErrorMessage = "Token must be exactly 8 characters")]
        public string FriendlyToken { get; set; } = "";

        public string? SessionName { get; set; }
    }

    /// <summary>
    /// Response model for host session validation API
    /// </summary>
    public class HostSessionValidationResponse
    {
        public bool Valid { get; set; }
        public int SessionId { get; set; }
        public string? HostGuid { get; set; }
        public HostSessionInfo? Session { get; set; }
        public string? RequestId { get; set; }
    }

    /// <summary>
    /// Response model for user token API
    /// </summary>
    public class UserTokenResponse
    {
        public string? UserToken { get; set; }
        public int SessionId { get; set; }
        public bool IsActive { get; set; }
        public DateTime? ExpiresAt { get; set; }
    }
}

<script>
    // Copy User Landing Link Function
    window.copyUserLink = function() {
        const input = document.getElementById('userLinkInput');
        if (input) {
            input.select();
            input.setSelectionRange(0, 99999); // For mobile devices

            // Try using modern clipboard API first
            if (navigator.clipboard && window.isSecureContext) {
                navigator.clipboard.writeText(input.value).then(() => {
                    console.log('NOOR-HOST-LANDING: User link copied to clipboard');
                    showCopyFeedback();
                }).catch(err => {
                    console.error('NOOR-HOST-LANDING: Failed to copy with clipboard API:', err);
                    // Fallback to execCommand
                    document.execCommand('copy');
                    showCopyFeedback();
                });
            } else {
                // Fallback for older browsers
                document.execCommand('copy');
                showCopyFeedback();
            }
        }
    };

    function showCopyFeedback() {
        // Get the copy button by finding it in the DOM
        const copyButton = document.querySelector('button[onclick="copyUserLink()"]');
        if (copyButton) {
            const originalText = copyButton.innerHTML;
            const originalBgColor = copyButton.style.backgroundColor;
            
            copyButton.innerHTML = '<i class="fa-solid fa-check"></i> Copied!';
            copyButton.style.backgroundColor = '#059669';
            
            setTimeout(() => {
                copyButton.innerHTML = originalText;
                copyButton.style.backgroundColor = originalBgColor;
            }, 2000);
        }
    }
</script>
