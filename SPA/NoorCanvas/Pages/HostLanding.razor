@page "/host/landing"
@page "/host/{friendlyToken?}"
@page "/"
@page "/landing"
@layout EmptyLayout
@using Microsoft.AspNetCore.Components
@using System.ComponentModel.DataAnnotations
@using System.Net.Http.Json
@using System.Text.Json.Serialization
@using NoorCanvas.Controllers
@inject IHttpClientFactory HttpClientFactory
@inject IJSRuntime JSRuntime
@inject NavigationManager Navigation
@inject ILogger<HostLanding> Logger

<PageTitle>NOOR Canvas - Host Authentication</PageTitle>

<HeadContent>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Playfair+Display:wght@400;700;900&family=Cinzel+Decorative:wght@400;700&family=Inter:wght@400;500;600&family=Poppins:wght@400;600;700&display=swap" rel="stylesheet">
</HeadContent>

<!-- Root container from mock -->
<div style="background-color:#F8F5F1;display:flex;align-items:center;justify-content:center;min-height:100vh;padding:1.5rem;font-family:'Inter',sans-serif;">
    
    <!-- Main card container from mock -->
    <div style="width:100%;max-width:35rem;background-color:#FFFFFF;border-radius:1.5rem;padding:2rem 3rem;box-shadow:0 25px 50px -12px rgba(0,0,0,0.25);border:1px solid #E5E7EB;text-align:center;">
        
        <!-- Logo -->
        <div class="noor-canvas-logo" style="display:flex;align-items:center;justify-content:center;text-align:center;margin-bottom:1.5rem;">
            <img src="/images/branding/NC-Header.png?v=@DateTime.Now.Ticks" alt="@(Model?.LogoText ?? "NOOR Canvas")" style="max-width:150px;height:auto;margin:0 auto;" />
        </div>

        <!-- Title Section from mock -->
        <h1 style="font-size:2.25rem;font-family:'Poppins',sans-serif;font-weight:700;color:#006400;margin-bottom:2rem;">
            Host Authentication
        </h1>

        <!-- Host Authentication Card from mock -->
        <div style="width:100%;background-color:#F8F5F1;border-radius:1rem;border:2px solid;border-image:linear-gradient(to right, #C5B358, #D4AF37, #C5B358) 1;padding:2rem 3rem;text-align:left;margin-top:2rem;box-shadow:inset 0 2px 4px 0 rgba(0,0,0,0.06);">
            
            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <div style="background-color:#FEE2E2;border:1px solid #FECACA;color:#B91C1C;padding:1rem;border-radius:0.5rem;margin-bottom:1rem;text-align:center;">
                    <span>@errorMessage</span>
                </div>
            }
            
            <!-- Icon and title section from mock -->
            <div style="display:flex;flex-direction:column;align-items:center;justify-content:center;text-align:center;">
                
                <!-- Icon circle from mock -->
                <div style="background-color:white;padding:2rem;border-radius:50%;box-shadow:0 4px 6px -1px rgba(0,0,0,0.1),0 2px 4px -1px rgba(0,0,0,0.06);">
                    <i class="fa-solid fa-people-arrows" style="font-size:3rem;color:#D4AF37;"></i>
                </div>
                
                <!-- Session Title -->
                <h3 style="font-size:1.5rem;font-family:'Inter',sans-serif;font-weight:700;color:#4B3C2B;margin-top:1.5rem;margin-bottom:0.5rem;text-align:center;">
                    @if (!string.IsNullOrEmpty(Model?.SessionName))
                    {
                        @Model.SessionName
                    }
                    else
                    {
                        <span style="color:#706357;">HOST SESSION</span>
                    }
                </h3>
            </div>

            <!-- Input Section from mock -->
            <div style="position:relative;margin-top:1rem;">
                
                <!-- Label from mock -->
                <p style="font-family:'Inter',sans-serif;font-weight:600;color:#4B3C2B;margin-bottom:0.5rem;">
                    Enter Your Host Authentication Token
                </p>
                <p style="font-family:'Inter',sans-serif;font-size:0.75rem;color:#706357;margin-bottom:0.75rem;">
                    Get your Host GUID from the HostProvisioner tool or system
                </p>
                
                <!-- Input container with icon -->
                <div style="position:relative;">
                    <!-- Icon from mock -->
                    <div style="position:absolute;top:50%;left:0.75rem;transform:translateY(-50%);pointer-events:none;">
                        <i class="fa-solid fa-key" style="color:#706357;"></i>
                    </div>
                    
                    <!-- Input field adapted from mock -->
                    <InputText @bind-Value="Model!.FriendlyToken" 
                               placeholder="4LE7I9MI"
                               disabled="@isLoading"
                               style="display:block;width:100%;padding:0.5rem 0.5rem 0.5rem 2.5rem;font-family:'Inter',sans-serif;color:#4B3C2B;border:1px solid #D1D5DB;border-radius:0.75rem;outline:none;transition:border-color 0.3s ease,box-shadow 0.3s ease;"
                               @onfocus="@(() => SetFocusStyle(true))"
                               @onblur="@(() => SetFocusStyle(false))" />
                </div>
                
                <!-- Help text from mock -->
                <p style="font-family:'Inter',sans-serif;font-size:0.75rem;color:#706357;margin-top:0.5rem;">
                    Get your 8-character friendly token from the HostProvisioner tool or system administrator
                </p>
            </div>
        </div>
        
        <!-- Button from mock -->
        <div style="margin-top:2rem;">
            <button @onclick="HandleAuthentication" 
                    disabled="@(isLoading || string.IsNullOrWhiteSpace(Model?.FriendlyToken))"
                    style="width:100%;display:flex;align-items:center;justify-content:center;padding:0.75rem 1.5rem;border-radius:0.75rem;color:white;font-weight:600;background-color:#006400;border:none;cursor:@(isLoading || string.IsNullOrWhiteSpace(Model?.FriendlyToken) ? "not-allowed" : "pointer");opacity:@(isLoading || string.IsNullOrWhiteSpace(Model?.FriendlyToken) ? "0.6" : "1");transition:transform 0.2s ease;box-shadow:0 10px 15px -3px rgba(0,100,0,0.4),0 4px 6px -2px rgba(0,100,0,0.2);font-family:'Inter',sans-serif;">
                
                @if (isLoading)
                {
                    <div style="border:2px solid transparent;border-top:2px solid white;border-radius:50%;width:1rem;height:1rem;animation:spin 1s linear infinite;margin-right:0.5rem;"></div>
                    <span>Authenticating...</span>
                }
                else
                {
                    <i class="fa-solid fa-arrow-right" style="margin-right:0.5rem;"></i>
                    <span>Access Host Control Panel</span>
                }
            </button>
        </div>




    </div>
</div>

<style>
@@keyframes spin {
    to { transform: rotate(360deg); }
}
</style>

@code {
    [Parameter] public string? FriendlyToken { get; set; }
    [Parameter] public HostLandingViewModel? Model { get; set; }
    
    private bool isLoading = false;
    private string errorMessage = "";

    protected override async Task OnInitializedAsync()
    {
        var requestId = Guid.NewGuid().ToString("N")[..8];
        Logger.LogInformation("NOOR-HOST: [{RequestId}] HostLanding OnInitialized - FriendlyToken: {FriendlyToken}", 
            requestId, FriendlyToken ?? "null");

        Model ??= new HostLandingViewModel
        {
            LogoText = "NOOR Canvas",
            FriendlyToken = FriendlyToken ?? "", // Use friendly token from URL parameter
            SessionName = null // Will be loaded if token provided
        };

        // If friendly token provided via URL, load session info
        if (!string.IsNullOrEmpty(FriendlyToken))
        {
            Logger.LogInformation("NOOR-HOST: [{RequestId}] Loading session info for friendly token: {Token}", 
                requestId, FriendlyToken);
            
            await LoadSessionInfoAsync(FriendlyToken, requestId);
        }
        else
        {
            Logger.LogInformation("NOOR-HOST: [{RequestId}] No friendly token provided, using default session info", requestId);
            Model.SessionName = "Host Authentication Required"; // Fallback for no token
        }
    }

    /// <summary>
    /// Load session information from API using friendly token validation
    /// </summary>
    private async Task LoadSessionInfoAsync(string friendlyToken, string requestId)
    {
        try
        {
            Logger.LogInformation("NOOR-HOST: [{RequestId}] Calling session validation API for FriendlyToken: {Token}", 
                requestId, friendlyToken);

            using var httpClient = HttpClientFactory.CreateClient();
            
            // Use friendly token API endpoint
            string apiUrl = $"https://localhost:9091/api/host/token/{friendlyToken}/validate";
            
            Logger.LogInformation("NOOR-HOST: [{RequestId}] API URL: {ApiUrl}", requestId, apiUrl);
            var response = await httpClient.GetAsync(apiUrl);
            
            Logger.LogInformation("NOOR-HOST: [{RequestId}] Session validation API response: {StatusCode}", 
                requestId, response.StatusCode);

            if (response.IsSuccessStatusCode)
            {
                var content = await response.Content.ReadAsStringAsync();
                Logger.LogInformation("NOOR-HOST: [{RequestId}] Session validation response content: {Content}", 
                    requestId, content);

                var validationResult = System.Text.Json.JsonSerializer.Deserialize<HostSessionValidationResponse>(content, 
                    new System.Text.Json.JsonSerializerOptions { PropertyNameCaseInsensitive = true });

                if (validationResult?.Valid == true && validationResult.Session != null)
                {
                    Logger.LogInformation("NOOR-HOST: [{RequestId}] Session validation successful - SessionID: {SessionId}, Title: {Title}", 
                        requestId, validationResult.Session.SessionId, validationResult.Session.Title);

                    if (Model != null)
                    {
                        Model.SessionName = validationResult.Session.Title ?? "Unknown Session";
                        
                        Logger.LogInformation("NOOR-HOST: [{RequestId}] Updated Model.SessionName to: {SessionName}", 
                            requestId, Model.SessionName);
                    }
                }
                else
                {
                    Logger.LogWarning("NOOR-HOST: [{RequestId}] Session validation failed or returned invalid data", requestId);
                    errorMessage = "Invalid Token";
                    if (Model != null)
                    {
                        Model.SessionName = "Host Authentication Required";
                    }
                }
            }
            else
            {
                Logger.LogError("NOOR-HOST: [{RequestId}] Session validation API failed with status: {StatusCode}", 
                    requestId, response.StatusCode);
                errorMessage = "Invalid Token";
                if (Model != null)
                {
                    Model.SessionName = "Host Authentication Required";
                }
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "NOOR-HOST: [{RequestId}] Exception during session info loading for FriendlyToken: {Token}", 
                requestId, friendlyToken);
            errorMessage = "Invalid Token";
            if (Model != null)
            {
                Model.SessionName = "Host Authentication Required";
            }
        }
    }

    private async Task HandleAuthentication()
    {
        if (string.IsNullOrWhiteSpace(Model?.FriendlyToken))
        {
            errorMessage = "Invalid Token";
            return;
        }

        isLoading = true;
        errorMessage = "";
        
        var requestId = Guid.NewGuid().ToString("N")[..8];
        Logger.LogInformation("NOOR-HOST: [{RequestId}] Host authentication attempt with FriendlyToken: {Token}", 
            requestId, Model.FriendlyToken);
        
        try
        {
            await JSRuntime.InvokeVoidAsync("console.log", $"NOOR-HOST: [{requestId}] Authentication initiated");

            // Validate friendly token format (8 characters, alphanumeric)
            if (Model.FriendlyToken.Length != 8 || !Model.FriendlyToken.All(c => char.IsLetterOrDigit(c)))
            {
                errorMessage = "Invalid Token";
                Logger.LogWarning("NOOR-HOST: [{RequestId}] Invalid friendly token format provided", requestId);
                return;
            }

            // Load session information for user feedback before authentication
            Logger.LogInformation("NOOR-HOST: [{RequestId}] Loading session info before authentication for better UX", requestId);
            await LoadSessionInfoAsync(Model.FriendlyToken, requestId);
            StateHasChanged(); // Update UI with session info
            await Task.Delay(500); // Brief pause to show updated session info

            Logger.LogInformation("NOOR-HOST: [{RequestId}] Calling authentication API", requestId);
            using var httpClient = HttpClientFactory.CreateClient();
            httpClient.BaseAddress = new Uri(Navigation.BaseUri);

            var authRequest = new HostAuthRequest { HostGuid = Model.FriendlyToken };
            var response = await httpClient.PostAsJsonAsync("/api/host/authenticate", authRequest);
            
            Logger.LogInformation("NOOR-HOST: [{RequestId}] Authentication API response: {StatusCode}", 
                requestId, response.StatusCode);
            
            if (response.IsSuccessStatusCode)
            {
                var authResponse = await response.Content.ReadFromJsonAsync<HostAuthResponse>();
                
                if (authResponse?.Success == true)
                {
                    Logger.LogInformation("NOOR-HOST: [{RequestId}] Authentication successful", requestId);
                    
                    // Load session information if available
                    if (authResponse.Session != null)
                    {
                        Model.SessionName = authResponse.Session.Title;
                        
                        Logger.LogInformation("NOOR-HOST: [{RequestId}] Updated session info from auth response - Name: {SessionName}", 
                            requestId, Model.SessionName);
                        
                        StateHasChanged(); // Update UI with new session info
                        await Task.Delay(1500); // Brief delay to show updated info
                    }
                    
                    Logger.LogInformation("NOOR-HOST: [{RequestId}] Redirecting to dashboard with SessionId: {SessionId}", 
                        requestId, authResponse.SessionId);
                    
                    // Always redirect with session token, sessionId comes from authentication response
                    if (authResponse.SessionId > 0)
                    {
                        Navigation.NavigateTo($"/host/dashboard?token={authResponse.SessionToken}&sessionId={authResponse.SessionId}");
                    }
                    else
                    {
                        Navigation.NavigateTo($"/host/dashboard?token={authResponse.SessionToken}");
                    }
                }
                else
                {
                    errorMessage = "Invalid Token";
                    Logger.LogWarning("NOOR-HOST: [{RequestId}] Authentication failed - invalid credentials", requestId);
                }
            }
            else if (response.StatusCode == System.Net.HttpStatusCode.Unauthorized)
            {
                errorMessage = "Invalid Token";
                Logger.LogWarning("NOOR-HOST: [{RequestId}] Authentication failed - unauthorized", requestId);
            }
            else
            {
                errorMessage = "Authentication service unavailable. Please try again later.";
                Logger.LogError("NOOR-HOST: [{RequestId}] Authentication service error - status: {StatusCode}", 
                    requestId, response.StatusCode);
            }
        }
        catch (HttpRequestException ex)
        {
            errorMessage = "Network error. Please check your connection and try again.";
            Logger.LogError(ex, "NOOR-HOST-ERROR: [{RequestId}] Network error during host authentication", requestId);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "NOOR-HOST-ERROR: [{RequestId}] Unexpected error during host authentication", requestId);
            errorMessage = "An unexpected error occurred. Please try again.";
        }
        finally
        {
            isLoading = false;
        }
    }



    private void SetFocusStyle(bool focused)
    {
        // This method handles focus styling through CSS :focus pseudo-class
        // No need for dynamic style manipulation as CSS handles it
    }

    public class HostLandingViewModel
    {
        public string? LogoText { get; set; }

        [Required(ErrorMessage = "Friendly token is required")]
        public string FriendlyToken { get; set; } = "";

        public string? SessionName { get; set; }
    }

    /// <summary>
    /// Response model for host session validation API
    /// </summary>
    public class HostSessionValidationResponse
    {
        public bool Valid { get; set; }
        public int SessionId { get; set; }
        public string? HostGuid { get; set; }
        public HostSessionInfo? Session { get; set; }
        public string? RequestId { get; set; }
    }
}
