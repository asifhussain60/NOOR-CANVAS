@page "/"
@page "/landing"
@layout EmptyLayout
@using Microsoft.AspNetCore.Components
@using System.Net.Http.Json
@using System.Text.Json.Serialization
@inject IJSRuntime JSRuntime
@inject NavigationManager Navigation
@inject ILogger<HostLanding> Logger
@inject DialogService DialogService
@inject IHttpClientFactory HttpClientFactory

<PageTitle>NOOR Canvas - Host Authentication</PageTitle>
<HeadContent>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Playfair+Display:wght@400;700;900&family=Cinzel+Decorative:wght@400;700&family=Inter:wght@400;500;600&family=Poppins:wght@400;600;700&display=swap" rel="stylesheet">
</HeadContent>

<div class="noor-layout-wrapper">
    <div class="noor-page-container">
        <div class="noor-main-card">
            <!-- NOOR Canvas Branding Header - Moved inside card -->
            <div class="nc-branding-header">
                <img src="/images/branding/NC-Header.png?v=@DateTime.Now.Ticks&force=@Guid.NewGuid()" alt="NOOR Canvas - Real-time Islamic Content Sharing Platform" class="nc-logo-resized" style="background: transparent !important;" />
            </div>
            
            <!-- Header Title -->
            <h1 class="noor-title-large poppins" style="color: #006400 !important;">Host Authentication</h1>

            <!-- Host Session Inner Card -->
            <div class="noor-inner-card">
                <!-- Icon -->
                <div class="noor-icon-container">
                    <div class="noor-icon-circle">
                        <i class="fa-solid fa-user-lock noor-icon-large"></i>
                    </div>
                </div>
                
                <!-- Title -->
                <h2 class="noor-card-title inter">HOST SESSION</h2>
                
                <!-- Description -->
                <p class="noor-card-description inter">Manage Islamic learning sessions with interactive tools</p>

                <!-- Form Section -->
                <div class="noor-form-section" style="text-align: left;">
                    <label class="noor-form-label inter">Enter Your Host Authentication Token</label>
                    <div class="noor-input-group">
                        <div class="noor-input-icon">
                            <i class="fa-solid fa-key"></i>
                        </div>
                        <input type="text"
                               id="hostGuid"
                               class="noor-input inter"
                               placeholder="Enter your Host GUID Token"
                               @bind="hostGuid" />
                    </div>
                    <p class="noor-help-text inter">Get your Host GUID from the HostProvisioner tool or system administrator</p>
                </div>
            </div>

            <!-- Authentication Button -->
            <button class="noor-btn-primary" @onclick="() => HandleHostAccess()">
                Access Host Control Panel
            </button>
        </div>
    </div>
</div>

    <!-- Authentication Forms (Initially Hidden) -->
    <div class="auth-section" id="auth-section" style="display: none;">
        <div class="container">
            <div class="row justify-content-center">
                <div class="col-lg-6">
                    <!-- Manage Session -->
                    <div id="host-auth" style="display: none;">
                        <div class="auth-card">
                            <h4><i class="fas fa-key"></i> Manage Session</h4>
                            <p>Enter Your Token</p>
                            <form @onsubmit="AuthenticateHost" @onsubmit:preventDefault="true">
                                <div class="mb-3">
                                    <label class="form-label">Host GUID</label>
                                    <input type="text" class="form-control" @bind="hostGuid" 
                                           placeholder="Enter your Host GUID" required />
                                    <div class="form-text">
                                        Copy and Paste For Ease
                                    </div>
                                </div>
                                <button type="submit" class="btn btn-primary w-100" disabled="@isLoading">
                                    @if (isLoading)
                                    {
                                        <span class="spinner-border spinner-border-sm me-2"></span>
                                    }
                                    Access Dashboard
                                </button>
                            </form>
                        </div>
                    </div>

                    <!-- Phase 3.6: Participant Authentication removed for host-only UX -->
                </div>
            </div>
        </div>
    </div>

@code {
    // Single-Step Host Authentication State Management
    private string selectedRole = "host"; // Always host in single-step design
    private string hostGuid = "";
    private string errorMessage = "";
    private bool isLoading = false;
    
    private AlertDialog alertDialog = null!;
    private ConfirmDialog confirmDialog = null!;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // Register dialogs with the service after they are rendered
            DialogService.RegisterAlertDialog(alertDialog);
            DialogService.RegisterConfirmDialog(confirmDialog);
            
            Logger.LogInformation("NOOR-INFO: HostLanding page rendered for new visitor");
            await JSRuntime.InvokeVoidAsync("NoorLogger.info", "HOST-LANDING", "HostLanding page loaded", new { timestamp = DateTime.UtcNow });

            // Add CSS debug logging for Issue-64 and Issue-92
            await JSRuntime.InvokeVoidAsync("console.log", "üé® NOOR-CSS-DEBUG: HostLanding page rendered - Issue-64 debugging");
            
            // Issue-92 CSS debugging - Mock comparison
            await JSRuntime.InvokeVoidAsync("eval", @"
                setTimeout(() => {
                    const title = document.querySelector('.noor-title-large');
                    if (title) {
                        const styles = getComputedStyle(title);
                        console.log('üéØ ISSUE-92 DEBUG: Title color:', styles.color, 'Expected: rgb(0, 100, 0)');
                        console.log('üéØ ISSUE-92 DEBUG: Title font-size:', styles.fontSize, 'Expected: 48px or 64px');
                        console.log('üéØ ISSUE-92 DEBUG: Title font-weight:', styles.fontWeight);
                        console.log('üéØ ISSUE-92 DEBUG: Title classes:', title.className);
                    }
                    
                    const card = document.querySelector('.noor-main-card');
                    if (card) {
                        console.log('üéØ ISSUE-92 DEBUG: Card dimensions:', card.getBoundingClientRect());
                    }
                    
                    const innerCard = document.querySelector('.noor-inner-card');
                    if (innerCard) {
                        const innerStyles = getComputedStyle(innerCard);
                        console.log('üéØ ISSUE-92 DEBUG: Inner card border:', innerStyles.border);
                        console.log('üéØ ISSUE-92 DEBUG: Inner card border-radius:', innerStyles.borderRadius);
                    }
                }, 100);
            ");
            
            // Issue-75 & Issue-76 Debug Logging: Logo and Card Sizing Changes
            await JSRuntime.InvokeVoidAsync("console.log", "üìè NOOR-SIZING-DEBUG Issue-75: Logo increased to 280px height (was 160px) - LARGE and prominent");
            await JSRuntime.InvokeVoidAsync("console.log", "üìè NOOR-SIZING-DEBUG Issue-76: Cards reduced by 30% - min-width: 266px (was 380px), max-width: 336px (was 480px)");
            await JSRuntime.InvokeVoidAsync("console.log", "üìè NOOR-SIZING-DEBUG: Button content height reduced to 196px (was 280px), padding reduced to 2.1rem/1.4rem");
            
            // Log actual element sizes for verification
            await JSRuntime.InvokeVoidAsync("eval", @"
                setTimeout(() => {
                    const logo = document.querySelector('.noor-main-logo');
                    const cards = document.querySelectorAll('.noor-card-wide');
                    if (logo) {
                        console.log('üìê NOOR-ACTUAL-SIZE Logo:', {
                            computedHeight: getComputedStyle(logo).height,
                            actualHeight: logo.offsetHeight + 'px',
                            naturalHeight: logo.naturalHeight + 'px (original image)',
                            width: logo.offsetWidth + 'px'
                        });
                    }
                    if (cards.length > 0) {
                        cards.forEach((card, index) => {
                            console.log(`üìê NOOR-ACTUAL-SIZE Card ${index + 1}:`, {
                                width: card.offsetWidth + 'px',
                                height: card.offsetHeight + 'px',
                                computedMinWidth: getComputedStyle(card).minWidth,
                                computedMaxWidth: getComputedStyle(card).maxWidth
                            });
                        });
                    }
                }, 1000);
            ");
        }
    }

    private async Task SelectRole(string role)
    {
        selectedRole = role;
        Logger.LogInformation("NOOR-INFO: User selected role: {Role}", role);
        await JSRuntime.InvokeVoidAsync("NoorLogger.info", "ROLE-SELECTION", $"User selected role: {role}", new { role });

        // Show authentication section and specific form
        await JSRuntime.InvokeVoidAsync("eval", "document.getElementById('auth-section').style.display = 'block';");
        
        if (role == "host")
        {
            await JSRuntime.InvokeVoidAsync("eval", "document.getElementById('host-auth').style.display = 'block'; document.getElementById('participant-auth').style.display = 'none';");
        }
        else
        {
            await JSRuntime.InvokeVoidAsync("eval", "document.getElementById('participant-auth').style.display = 'block'; document.getElementById('host-auth').style.display = 'none';");
        }

        // Smooth scroll to auth section
        await JSRuntime.InvokeVoidAsync("eval", "document.getElementById('auth-section').scrollIntoView({ behavior: 'smooth' });");
    }

    private async Task AuthenticateHost()
    {
        if (string.IsNullOrWhiteSpace(hostGuid))
            return;

        isLoading = true;
        Logger.LogInformation("NOOR-INFO: Host authentication attempt with GUID: {HostGuid}", hostGuid.Substring(0, 8) + "...");
        
        try
        {
            await JSRuntime.InvokeVoidAsync("NoorLogger.info", "HOST-AUTH", "Host authentication initiated", new { guidPreview = hostGuid.Substring(0, 8) + "..." });

            // ‚úÖ LIVE API: Implement actual GUID validation against backend
            // Accept both standard GUID format and base64 hash format
            bool isValidFormat = Guid.TryParse(hostGuid, out Guid guid) || IsBase64String(hostGuid);
            
            if (isValidFormat)
            {
                using var httpClient = HttpClientFactory.CreateClient("default");
                var request = new { HostGuid = hostGuid };
                var response = await httpClient.PostAsJsonAsync("/api/host/authenticate", request);
                
                if (response.IsSuccessStatusCode)
                {
                    var authResponse = await response.Content.ReadFromJsonAsync<HostAuthResponse>();
                    if (authResponse?.Success == true)
                    {
                        Logger.LogInformation("NOOR-SUCCESS: Host GUID authenticated successfully, redirecting to session manager");
                        await JSRuntime.InvokeVoidAsync("NoorLogger.info", "HOST-AUTH", "Host authentication successful", new { hostGuid = guid });
                        Navigation.NavigateTo($"/host/session-manager?guid={guid}");
                        return;
                    }
                }
                
                Logger.LogWarning("NOOR-WARNING: Host authentication failed - Invalid credentials");
                errorMessage = "Invalid Host GUID. Please check your credentials.";
                await JSRuntime.InvokeVoidAsync("NoorLogger.error", "HOST-AUTH", "Authentication failed", new { reason = "Invalid credentials" });
            }
            else
            {
                Logger.LogWarning("NOOR-WARNING: Invalid Host GUID format: {HostGuid}", hostGuid);
                await JSRuntime.InvokeVoidAsync("NoorLogger.error", "HOST-AUTH", "Invalid GUID format", new { hostGuid });
                await DialogService.ShowErrorAsync("Invalid GUID format. Please check your Host GUID and try again.", "Authentication Error");
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "NOOR-ERROR: Host authentication failed");
            await JSRuntime.InvokeVoidAsync("NoorLogger.error", "HOST-AUTH", "Authentication failed", new { error = ex.Message });
            await DialogService.ShowErrorAsync("Authentication failed. Please try again.", "Authentication Error");
        }
        finally
        {
            isLoading = false;
        }
    }

    // Phase 3.6: Participant methods removed - users access via /user/{token} URLs

    // API Response Models
    public class HostAuthResponse
    {
        [JsonPropertyName("success")]
        public bool Success { get; set; }
        
        [JsonPropertyName("sessionToken")]
        public string SessionToken { get; set; } = string.Empty;
        
        [JsonPropertyName("expiresAt")]
        public DateTime ExpiresAt { get; set; }
        
        [JsonPropertyName("hostGuid")]
        public string HostGuid { get; set; } = string.Empty;
    }

    public class SessionValidationResponse
    {
        public bool IsValid { get; set; }
        public string SessionId { get; set; } = string.Empty;
        public string Status { get; set; } = string.Empty;
        public DateTime? ExpiresAt { get; set; }
    }

    // ShowHostForm method removed - single-step process no longer needs form transitions

    // Phase 3.6: ShowParticipantForm method removed - replaced by direct /user/{token} routing

    // Enhanced Interactive Card Handlers
    private async Task HandleHostAccess()
    {
        // Call existing authentication method
        await AuthenticateHost();
    }

    // Phase 3.6: HandleSessionJoin method removed - users access via /user/{token} URLs

    private static bool IsBase64String(string s)
    {
        if (string.IsNullOrWhiteSpace(s)) return false;
        
        try
        {
            // Check if it's a valid base64 string
            Convert.FromBase64String(s);
            // Additional check: base64 strings typically end with = or == for padding
            return s.Length % 4 == 0 && System.Text.RegularExpressions.Regex.IsMatch(s, @"^[a-zA-Z0-9+/]*={0,3}$");
        }
        catch
        {
            return false;
        }
    }

    // GetCardClasses method removed - single-step process no longer needs card animations
}

<style>

/* Font Families */
.nc-inter {
    font-family: 'Inter', sans-serif;
}

.nc-playfair {
    font-family: 'Playfair Display', serif;
}

.nc-cinzel-decorative {
    font-family: 'Cinzel Decorative', serif;
}

.nc-poppins {
    font-family: 'Poppins', sans-serif;
}

/* Main Layout - Centered like the mock */
.nc-landing-wrapper {
    background-color: #F8F5F1;
    min-height: 100vh;
    display: flex;
    align-items: center;
    justify-content: center;
    padding: 1.5rem;
}

.nc-landing-body {
    width: 100%;
    max-width: 32rem; /* Match mock: max-w-sm sm:max-w-md md:max-w-lg */
    display: flex;
    flex-direction: column;
    align-items: center;
}

/* Branding Header - Added above mock content */
.nc-branding-header {
    text-align: center;
    margin-bottom: 2rem;
    width: 100%;
}

.nc-logo-resized {
    height: 300px;
    width: auto;
    max-width: 100%;
    display: block;
    margin: 0 auto;
    background: transparent !important;
}

/* Card Container - Match mock exactly */
.nc-card-container {
    width: 100%;
    background-color: #FFFFFF;
    border-radius: 1.5rem; /* rounded-3xl from mock */
    padding: 2rem 3rem; /* p-8 sm:p-12 from mock */
    box-shadow: 0 25px 50px -12px rgba(0, 0, 0, 0.25); /* shadow-2xl shadow-gray-400 from mock */
    border: 1px solid #E5E7EB; /* border-gray-200 from mock */
}

/* Heading - Match mock: text-4xl mb-8 - CRITICAL: Must be green! */
.nc-heading,
h1.nc-heading,
.nc-card-container .nc-heading,
.noor-host-auth-title-green {
    font-size: 2.25rem !important; /* text-4xl */
    font-weight: 700 !important; /* font-bold */
    color: #006400 !important; /* Green to match mock exactly - OVERRIDE ANY OTHER CSS */
    margin-bottom: 2rem; /* mb-8 */
    text-align: center;
}

/* Ultra-specific selector to override ANY global CSS */
h1.nc-heading.nc-poppins.noor-host-auth-title-green {
    color: #006400 !important; /* FORCE GREEN - NO EXCEPTIONS */
}

/* Session Card - Match mock: rounded-3xl p-6 sm:p-8 mb-8 */
.nc-session-card {
    position: relative;
    width: 100%;
    border-radius: 1.5rem; /* rounded-3xl */
    padding: 2rem 3rem; /* p-8 sm:p-12 to match mock exactly */
    margin-top: 2rem; /* mt-8 to match mock */
    margin-bottom: 0; /* Remove mb-8 */
    text-align: center;
    overflow: hidden;
    border: 2px solid #D4AF37; /* Exact gold border from mock */
    background-color: #F8F5F1; /* Match mock background */
}

.nc-session-bg {
    /* Removed rotated background - not in mock */
    display: none;
}

.nc-session-content {
    position: relative;
    z-index: 10;
}

.nc-icon-circle {
    display: flex;
    align-items: center;
    justify-content: center;
    width: 6rem; /* Slightly larger to match mock */
    height: 6rem;
    margin: 0 auto 1.5rem; /* mb-6 spacing */
    background-color: white; /* White background to match mock */
    border-radius: 50%;
    box-shadow: 0 4px 6px -2px rgba(0, 0, 0, 0.1); /* shadow-md from mock */
}

.nc-session-title {
    font-size: 1.5rem;
    font-weight: 600;
    color: #4B3C2B;
    margin-bottom: 0.5rem;
}

.nc-session-desc {
    font-size: 0.875rem;
    color: #706357;
}

/* Button Styles - Match mock exactly */
.nc-primary-btn {
    width: 100%;
    display: flex;
    align-items: center;
    justify-content: center;
    padding: 0.75rem 1.5rem; /* py-3 px-6 */
    border-radius: 0.75rem; /* rounded-xl */
    color: white;
    font-weight: 600; /* font-semibold */
    background-color: #006400; /* bg-[#006400] */
    border: none;
    cursor: pointer;
    transition: transform 0.2s ease;
    box-shadow: 0 10px 15px -3px rgba(0, 100, 0, 0.4), 0 4px 6px -2px rgba(0, 100, 0, 0.2); /* shadow-green */
    margin-top: 2rem; /* mt-8 */
}

.nc-primary-btn:hover {
    transform: scale(1.05);
}

.nc-primary-btn svg {
    width: 1.25rem;
    height: 1.25rem;
}

/* Input Section - Match mock exactly */
.nc-input-section {
    width: 100%;
    margin-top: 1.5rem; /* space-y-6 spacing */
    text-align: left;
}

.nc-input-label {
    font-size: 0.875rem; /* text-sm */
    font-weight: 500; /* font-medium */
    color: #4B3C2B;
    margin-bottom: 1rem; /* space-y-4 */
}

.nc-input-container {
    position: relative;
    margin-bottom: 1rem;
}

.nc-input-icon {
    position: absolute;
    top: 50%;
    left: 0.75rem; /* pl-3 */
    transform: translateY(-50%);
    pointer-events: none;
    z-index: 10;
}

.nc-input-field {
    display: block;
    width: 100%;
    padding: 0.5rem 0.5rem 0.5rem 2.5rem; /* pl-10 pr-4 py-2 */
    color: #4B3C2B;
    border: 1px solid #D1D5DB; /* border-gray-300 */
    border-radius: 0.75rem; /* rounded-xl */
    font-size: 1rem;
    transition: border-color 0.3s ease, box-shadow 0.3s ease;
}

.nc-input-field:focus {
    outline: none;
    border-color: #D4AF37; /* focus:border-[#D4AF37] */
    box-shadow: 0 0 0 3px rgba(212, 175, 55, 0.1); /* focus:ring-[#D4AF37] */
}

.nc-input-help {
    font-size: 0.75rem; /* text-xs */
    color: #706357;
    margin-top: 0.25rem;
}

/* Responsive Design - Applied via main class */

/* Utility Classes */
.nc-p-0 {
    padding: 0;
}

.text-gray-600 {
    color: #4B5563;
}

.mb-6 {
    margin-bottom: 1.5rem;
}

.text-lg {
    font-size: 1.125rem;
}

.w-full {
    width: 100%;
}

.w-5 {
    width: 1.25rem;
}

.h-5 {
    height: 1.25rem;
}

.text-left {
    text-align: left;
}

.me-2 {
    margin-right: 0.5rem;
}

.mr-2 {
    margin-right: 0.5rem;
}

.text-blue-500 {
    color: #3B82F6;
}

.py-3 {
    padding-top: 0.75rem;
    padding-bottom: 0.75rem;
}

.text-gray-500 {
    color: #6B7280;
}

.mt-2 {
    margin-top: 0.5rem;
}

.d-block {
    display: block;
}

/* Legacy styles for existing auth section (if needed) */
.auth-section {
    padding: 60px 0;
    background: rgba(255,255,255,0.1);
}

.auth-card {
    background: white;
    border-radius: 15px;
    padding: 40px;
    box-shadow: 0 10px 30px rgba(0,0,0,0.1);
}

.form-control {
    border-radius: 8px;
    border: 2px solid #e9ecef;
    padding: 12px 15px;
    transition: border-color 0.3s ease;
}

.form-control:focus {
    border-color: #006400;
    box-shadow: 0 0 0 0.2rem rgba(0, 100, 0, 0.25);
}
</style>

<script>
// NOOR Canvas Card Animation System
window.NoorCardAnimator = {
    expandCard: function(activeCardId, inactiveCardId) {
        console.log('üöÄ NOOR-CARD-DEBUG: ========== EXPAND CARD START ==========');
        console.log('üéØ NOOR-CARD-DEBUG: Target - Active:', activeCardId, 'Inactive:', inactiveCardId);
        
        const activeCard = document.getElementById(activeCardId);
        const inactiveCard = document.getElementById(inactiveCardId);
        
        console.log('üîç NOOR-CARD-DEBUG: Element lookup results:', {
            activeCardFound: !!activeCard,
            inactiveCardFound: !!inactiveCard,
            activeCardElement: activeCard,
            inactiveCardElement: inactiveCard
        });
        
        if (activeCard && inactiveCard) {
            // Log current state before changes
            console.log('üìã NOOR-CARD-DEBUG: BEFORE - Active classes:', activeCard.classList.toString());
            console.log('üìã NOOR-CARD-DEBUG: BEFORE - Inactive classes:', inactiveCard.classList.toString());
            console.log('üìã NOOR-CARD-DEBUG: BEFORE - Inactive computed display:', window.getComputedStyle(inactiveCard).display);
            
            // Add expanded class to active card
            activeCard.classList.add('noor-card-expanded');
            console.log('‚úÖ NOOR-CARD-DEBUG: Added noor-card-expanded to', activeCardId);
            
            // Add hidden class to inactive card (now uses display:none)
            inactiveCard.classList.add('noor-card-hidden');
            console.log('‚úÖ NOOR-CARD-DEBUG: Added noor-card-hidden to', inactiveCardId);
            
            // Force a reflow to ensure styles are applied
            inactiveCard.offsetHeight;
            
            // Log state after changes
            console.log('üìã NOOR-CARD-DEBUG: AFTER - Active classes:', activeCard.classList.toString());
            console.log('üìã NOOR-CARD-DEBUG: AFTER - Inactive classes:', inactiveCard.classList.toString());
            
            // Check computed styles with delay to ensure CSS has processed
            setTimeout(() => {
                const inactiveStyles = window.getComputedStyle(inactiveCard);
                console.log('üîç NOOR-CARD-DEBUG: FINAL - Inactive computed display:', inactiveStyles.display);
                console.log('üîç NOOR-CARD-DEBUG: FINAL - Inactive visibility:', inactiveStyles.visibility);
                console.log('üîç NOOR-CARD-DEBUG: FINAL - Inactive opacity:', inactiveStyles.opacity);
                console.log('üîç NOOR-CARD-DEBUG: FINAL - Inactive offsetWidth:', inactiveCard.offsetWidth);
                console.log('üîç NOOR-CARD-DEBUG: FINAL - Inactive offsetHeight:', inactiveCard.offsetHeight);
                
                // Check if element is actually hidden
                const isHidden = inactiveStyles.display === 'none' || inactiveCard.offsetWidth === 0;
                console.log('üéØ NOOR-CARD-DEBUG: Is inactive card truly hidden?', isHidden);
                
                if (!isHidden) {
                    console.error('‚ùå NOOR-CARD-DEBUG: CRITICAL - Card is not hidden despite display:none class!');
                    console.error('‚ùå NOOR-CARD-DEBUG: CSS Rule investigation needed');
                }
            }, 100);
            
            // Optional: Add focus to the input in active card
            setTimeout(() => {
                const input = activeCard.querySelector('input');
                if (input) {
                    input.focus();
                    console.log('ÔøΩ NOOR-CARD-DEBUG: Input focused in active card');
                }
            }, 200);
            
            console.log('‚úÖ NOOR Canvas: Card animation complete - Expanded:', activeCardId, 'Hidden:', inactiveCardId);
        } else {
            console.error('‚ùå NOOR-CARD-DEBUG: CRITICAL - Cards not found!', { 
                activeCardId, 
                inactiveCardId, 
                activeCard: !!activeCard, 
                inactiveCard: !!inactiveCard 
            });
        }
        console.log('üèÅ NOOR-CARD-DEBUG: ========== EXPAND CARD END ==========');
    },
    
    resetCards: function() {
        const hostCard = document.getElementById('host-card');
        const participantCard = document.getElementById('participant-card');
        
        if (hostCard && participantCard) {
            // Remove all animation classes
            hostCard.classList.remove('noor-card-expanded', 'noor-card-hidden');
            participantCard.classList.remove('noor-card-expanded', 'noor-card-hidden');
            
            console.log('NOOR Canvas: Cards reset to default state');
        }
    }
};

// Initialize on page load
document.addEventListener('DOMContentLoaded', function() {
    console.log('NOOR Canvas: Card animation system initialized');
});
</script>

<!-- Dialog Components -->
<AlertDialog @ref="alertDialog" />
<ConfirmDialog @ref="confirmDialog" />