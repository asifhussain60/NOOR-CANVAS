@page "/host/control-panel/{hostToken}"
@layout EmptyLayout
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Web
@using System.ComponentModel.DataAnnotations
@using System.Net.Http.Json
@using System.Text.Json.Serialization
@using System.Text.Json
@using Microsoft.AspNetCore.SignalR.Client
@using Microsoft.EntityFrameworkCore
@inject IHttpClientFactory HttpClientFactory
@inject IJSRuntime JSRuntime
@inject NavigationManager Navigation
@inject ILogger<HostControlPanel> Logger
@inject NoorCanvas.Data.CanvasDbContext CanvasDb
@inject NoorCanvas.Data.SimplifiedCanvasDbContext SimplifiedCanvasDb
@inject NoorCanvas.Data.KSessionsDbContext KSessionsDb

<PageTitle>NOOR Canvas - Host Control Panel</PageTitle>

<HeadContent>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Playfair+Display:wght@400;700;900&family=Cinzel+Decorative:wght@400;700&family=Inter:wght@400;500;600&family=Poppins:wght@400;600;700&display=swap" rel="stylesheet">
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;700&family=Amiri:wght@400;700&family=Lora:ital,wght@0,400;0,500;1,400&family=Cairo:wght@400;700&family=Noto+Nastaliq+Urdu&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="~/css/nc-session-transcript.css?v=@DateTime.Now.Ticks" />
</HeadContent>

<!-- Root container with NOOR Canvas background -->
<div style="background-color:#F8F5F1;min-height:100vh;display:flex;flex-direction:column;align-items:center;padding:1rem;font-family:'Inter',sans-serif;">

    <div style="width:95%;background-color:white;border-radius:1.5rem;box-shadow:0 25px 50px -12px rgba(0,0,0,0.25);padding:2rem;display:flex;flex-direction:column;gap:1.5rem;">

        <!-- Header & Session Info -->
        <header style="text-align:center;">
            <!-- Logo -->
            <div style="display:flex;align-items:center;justify-content:center;text-align:center;margin-bottom:1.5rem;">
                <img src="/images/branding/NC-Header.png?v=@DateTime.Now.Ticks" 
                     alt="@(Model?.LogoText ?? "NOOR Canvas")" 
                     style="max-width:150px;height:auto;" />
            </div>
            <h1 style="font-size:2.25rem;font-weight:700;color:#006400;margin-bottom:0.5rem;display:flex;align-items:center;justify-content:center;gap:0.5rem;">
                <i class="fa-solid fa-gear" style="color:#006400;"></i>
                <span>HOST CONTROL PANEL</span>
            </h1>
        </header>

        <div style="display:flex;justify-content:center;width:100%;">
            <div style="display:flex;flex-direction:column;gap:1rem;align-items:stretch;width:50%;">
                <!-- Session Details Panel -->
                <div style="background-color:white;padding:1.5rem;border-radius:1.5rem;box-shadow:0 10px 15px -3px rgba(0,0,0,0.1);border:1px solid #D4AF37;">
                    <h2 style="font-weight:700;font-size:1.5rem;color:#D4AF37;margin-bottom:1rem;">@(Model?.SessionName ?? "Loading Session...")</h2>
                    <p style="color:#6B7280;font-size:0.875rem;line-height:1.625;margin-bottom:1rem;">@(Model?.SessionDescription ?? "Session details are being loaded...")</p>
                </div>

                <!-- Session Controls Panel -->
                <div style="width:100%;background-color:#F8F5F1;border-radius:1.5rem;box-shadow:inset 0 2px 4px 0 rgba(0,0,0,0.06);border:1px solid #D4AF37;padding:1.5rem;display:flex;flex-direction:column;align-items:center;justify-content:center;gap:1rem;">
                    <h3 style="display:flex;align-items:center;justify-content:center;gap:0.5rem;font-weight:800;font-size:1.5rem;color:#006400;margin-bottom:0.5rem;text-align:center;">
                        <i class="fa-solid fa-sliders" style="color:#006400;"></i>
                        <span>SESSION CONTROLS</span>
                    </h3>
                    <div style="width:100%;display:flex;justify-content:center;">
                        <button @onclick="StartSession" 
                                disabled="@(isLoading || Model?.SessionStatus == "Active")"
                                style="width:80%;padding:1rem 2rem;border-radius:1.5rem;box-shadow:0 10px 15px -3px rgba(0,100,0,0.4);color:white;font-weight:700;font-size:1.125rem;background-color:#006400;border:none;cursor:@(isLoading || Model?.SessionStatus == "Active" ? "not-allowed" : "pointer");opacity:@(isLoading || Model?.SessionStatus == "Active" ? "0.6" : "1");transition:transform 0.2s ease;display:flex;align-items:center;justify-content:center;gap:0.75rem;" 
                                onmouseover="this.style.backgroundColor='#059669'; this.style.transform='scale(1.05)'"
                                onmouseout="this.style.backgroundColor='#006400'; this.style.transform='scale(1)'">
                            <i class="fa-solid fa-play" style="font-size:1.25rem;"></i>
                            <span>Start Session</span>
                        </button>
                    </div>
                </div>
            </div>
        </div>
        
        <!-- Session Transcript Panel -->
        <div style="width:100%;background-color:white;border-radius:1.5rem;box-shadow:inset 0 2px 4px 0 rgba(0,0,0,0.06);border:1px solid #D4AF37;padding:1.5rem;display:flex;flex-direction:column;gap:1rem;">
            <h3 style="display:flex;align-items:center;justify-content:flex-start;gap:0.5rem;font-weight:800;font-size:1.5rem;color:#006400;margin-bottom:0.5rem;text-align:left;">
                <i class="fa-solid fa-file-lines" style="color:#006400;"></i>
                <span>Session Transcript</span>
            </h3>
            <div style="width:100%;border:2px dashed #9CA3AF;border-radius:0.5rem;padding:1rem;">
                @if (!string.IsNullOrEmpty(Model?.TransformedTranscript))
                {
                    <div class="session-transcript-content">
                        @((MarkupString)Model.TransformedTranscript)
                    </div>
                }
                else
                {
                    <div style="color:#6B7280;text-align:center;padding:2rem;">
                        <i class="fa-solid fa-file-text" style="font-size:2rem;margin-bottom:1rem;color:#9CA3AF;"></i>
                        <p style="margin:0;">No transcript available for this session.</p>
                    </div>
                }
            </div>
        </div>

        <!-- Q&A Panel -->
        <div style="background-color:white;padding:1rem;border-radius:1.5rem;box-shadow:inset 0 2px 4px 0 rgba(0,0,0,0.06);border:1px solid #D4AF37;">
            <div style="display:flex;align-items:center;justify-content:flex-start;margin-bottom:0.5rem;">
                <h3 style="display:flex;align-items:center;justify-content:flex-start;gap:0.5rem;font-weight:800;font-size:1.5rem;color:#006400;margin-bottom:0.5rem;text-align:left;">
                    <i class="fa-solid fa-clipboard-question" style="color:#006400;"></i>
                    <span>Questions & Answers</span>
                </h3>
            </div>
            <div style="width:100%;height:200px;overflow-y:auto;padding-right:0.5rem;">
                @if (Model?.Questions != null && Model.Questions.Any())
                {
                    @foreach (var question in Model.Questions.OrderBy(q => q.IsAnswered))
                    {
                        <div style="@(question.IsAnswered ? "color:#9CA3AF;background-color:#F9FAFB;" : "")padding:0.5rem;display:flex;align-items:center;justify-content:space-between;gap:0.5rem;color:#374151;border-bottom:1px solid #E5E7EB;@(question.IsAnswered ? "" : "background-color:#FFFFFF;")">
                            <div style="display:flex;align-items:center;gap:0.5rem;flex:1;">
                                <i class="@(question.IsAnswered ? "fa-solid fa-circle-check" : "fa-solid fa-circle-question")" style="color:@(question.IsAnswered ? "#10B981" : "#3B82F6");"></i>
                                <span style="font-size:0.875rem;">@question.Text</span>
                            </div>
                            <div style="display:flex;gap:0.25rem;">
                                @if (!question.IsAnswered)
                                {
                                    <button @onclick="() => MarkQuestionAnswered(question.Id)" 
                                            style="color:#10B981;background:none;border:none;cursor:pointer;padding:0.25rem;">
                                        <i class="fa-solid fa-check"></i>
                                    </button>
                                }
                                <button @onclick="() => ShowDeleteModal(question.Id)" 
                                        style="color:#EF4444;background:none;border:none;cursor:pointer;padding:0.25rem;">
                                    <i class="fa-solid fa-trash-can"></i>
                                </button>
                            </div>
                        </div>
                    }
                }
                else
                {
                    <div style="text-align:center;color:#6B7280;padding:2rem;">
                        <p>No questions submitted yet. Questions from participants will appear here during the session.</p>
                    </div>
                }
            </div>
        </div>
        
        <!-- Participants Panel -->
        <div style="background-color:white;padding:1rem;border-radius:1.5rem;box-shadow:inset 0 2px 4px 0 rgba(0,0,0,0.06);border:1px solid #D4AF37;">
            <div style="display:flex;align-items:center;justify-content:space-between;margin-bottom:0.5rem;">
                <h3 style="display:flex;align-items:center;gap:0.5rem;font-weight:800;font-size:1.5rem;color:#006400;margin-bottom:0.5rem;text-align:center;">
                    <i class="fa-solid fa-users" style="color:#006400;"></i>
                    <span>Participants (@(Model?.Participants?.Count ?? 0))</span>
                </h3>
                <div style="display:flex;gap:0.5rem;">
                    <button @onclick="() => SortParticipants(true)" 
                            style="font-size:0.75rem;padding:0.25rem 0.5rem;border-radius:9999px;background-color:#E5E7EB;color:#374151;font-weight:600;border:none;cursor:pointer;"
                            onmouseover="this.style.backgroundColor='#D1D5DB'"
                            onmouseout="this.style.backgroundColor='#E5E7EB'">Sort by Name</button>
                    <button @onclick="() => SortParticipants(false)" 
                            style="font-size:0.75rem;padding:0.25rem 0.5rem;border-radius:9999px;background-color:#E5E7EB;color:#374151;font-weight:600;border:none;cursor:pointer;"
                            onmouseover="this.style.backgroundColor='#D1D5DB'"
                            onmouseout="this.style.backgroundColor='#E5E7EB'">Sort by Country</button>
                </div>
            </div>
            <div style="display:grid;grid-template-columns:repeat(3,1fr);gap:0.5rem;max-height:12rem;overflow-y:auto;padding-right:0.5rem;">
                @if (Model?.Participants != null && Model.Participants.Any())
                {
                    @foreach (var participant in Model.Participants)
                    {
                        <div style="display:flex;align-items:center;gap:0.5rem;color:#6B7280;">
                            <img src="@participant.FlagUrl" alt="@participant.Country" style="width:1.25rem;height:auto;" />
                            <span style="font-size:0.875rem;">@participant.Name</span>
                        </div>
                    }
                }
                else
                {
                    <div style="grid-column:1/-1;text-align:center;color:#6B7280;padding:2rem;">
                        <p>No participants have joined yet. Participants will appear here once they join the session.</p>
                    </div>
                }
            </div>
        </div>
    </div>
    
    <!-- Custom Confirmation Modal -->
    @if (showDeleteModal)
    {
        <div style="position:fixed;top:0;left:0;width:100%;height:100%;background-color:rgba(0,0,0,0.5);backdrop-filter:blur(5px);z-index:1000;display:flex;align-items:center;justify-content:center;">
            <div style="background-color:white;padding:2rem;border-radius:1rem;box-shadow:0 4px 6px rgba(0,0,0,0.1);max-width:400px;text-align:center;">
                <p style="font-size:1.125rem;font-weight:700;color:#1F2937;margin-bottom:1rem;">Confirm Deletion</p>
                <p style="color:#6B7280;margin-bottom:1.5rem;">Are you sure you want to delete this question?</p>
                <div style="display:flex;justify-content:center;gap:1rem;">
                    <button @onclick="CancelDelete" 
                            style="padding:0.5rem 1rem;border-radius:1.5rem;background-color:#E5E7EB;color:#374151;font-weight:600;border:none;cursor:pointer;"
                            onmouseover="this.style.backgroundColor='#D1D5DB'"
                            onmouseout="this.style.backgroundColor='#E5E7EB'">Cancel</button>
                    <button @onclick="ConfirmDelete" 
                            style="padding:0.5rem 1rem;border-radius:1.5rem;background-color:#EF4444;color:white;font-weight:600;border:none;cursor:pointer;"
                            onmouseover="this.style.backgroundColor='#DC2626'"
                            onmouseout="this.style.backgroundColor='#EF4444'">Delete</button>
                </div>
            </div>
        </div>
    }

    @if (showMessage)
    {
        <div style="position:fixed;top:0.5rem;left:50%;transform:translateX(-50%);padding:1rem;border-radius:1.5rem;background-color:#3B82F6;color:white;box-shadow:0 10px 15px -3px rgba(59,130,246,0.4);transition:opacity 0.5s ease;opacity:@(showMessage ? "1" : "0");visibility:@(showMessage ? "visible" : "hidden");">
            @messageText
        </div>
    }
</div>

@code {
    [Parameter] public string? HostToken { get; set; }
    [Parameter] public HostControlPanelViewModel? Model { get; set; }
    
    // Internal session ID derived from host token
    private int? SessionId { get; set; }
    
    private bool isLoading = false;
    private bool showDeleteModal = false;
    private bool showMessage = false;
    private string messageText = "";
    private Guid questionToDeleteId;
    private Timer? messageTimer;
    private HubConnection? hubConnection;

    protected override async Task OnInitializedAsync()
    {
        // Initialize model
        Model ??= new HostControlPanelViewModel();
        
        // Initialize empty model
        await InitializeSessionAsync();
        
        // Initialize SignalR connection for real-time updates
        await InitializeSignalRAsync();
        
        // Load real session data if HostToken provided
        if (!string.IsNullOrEmpty(HostToken))
        {
            await LoadSessionDataAsync(HostToken);
        }
    }

    private async Task InitializeSessionAsync()
    {
        // Initialize empty model - all data will be loaded from SQL
        Model = new HostControlPanelViewModel
        {
            LogoText = "NOOR Canvas",
            SessionName = "Loading Session...",
            SessionDescription = "Loading session details...",
            SessionStatus = "Loading",
            SessionTranscript = @"
                <p style=""text-center italic text-gray-600 leading-relaxed"">""And among His signs is that He created for you mates from among yourselves, that you may find tranquility in them; and He placed between you affection and mercy. Indeed in that are signs for a people who give thought.""</p>
                <p style=""text-center font-semibold mt-2"">- The Holy Quran, Surah Ar-Rum (30:21)</p>
            ",
            Questions = new List<QuestionItem>(), // Empty - no questions initially
            Participants = new List<ParticipantItem>() // Empty - no participants initially
        };
        
        // Transform the initial transcript
        if (!string.IsNullOrEmpty(Model.SessionTranscript))
        {
            Model.TransformedTranscript = await TransformTranscriptHtml(Model.SessionTranscript);
        }
        
        await InvokeAsync(StateHasChanged);
    }

    private async Task InitializeSignalRAsync()
    {
        try
        {
            hubConnection = new HubConnectionBuilder()
                .WithUrl(Navigation.ToAbsoluteUri("/sessionHub"))
                .Build();

            // Register event handlers for real-time updates
            hubConnection.On<string>("QuestionReceived", async (questionText) =>
            {
                var newQuestion = new QuestionItem 
                { 
                    Id = Guid.NewGuid(), 
                    Text = questionText, 
                    IsAnswered = false 
                };
                Model?.Questions?.Add(newQuestion);
                await InvokeAsync(StateHasChanged);
            });

            hubConnection.On<string, string>("ParticipantJoined", async (name, country) =>
            {
                var flagUrl = $"https://flagcdn.com/w20/{GetCountryCode(country)}.png";
                var newParticipant = new ParticipantItem { Name = name, Country = country, FlagUrl = flagUrl };
                Model?.Participants?.Add(newParticipant);
                await InvokeAsync(StateHasChanged);
            });

            hubConnection.On<string>("TranscriptUpdated", async (transcript) =>
            {
                if (Model != null)
                {
                    Model.SessionTranscript = transcript;
                    Model.TransformedTranscript = await TransformTranscriptHtml(transcript);
                    await InvokeAsync(StateHasChanged);
                }
            });

            await hubConnection.StartAsync();
            
            // Join session group for real-time updates
            if (SessionId.HasValue)
            {
                await hubConnection.InvokeAsync("JoinSessionGroup", SessionId.Value.ToString());
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Failed to initialize SignalR connection");
        }
    }

    private async Task LoadSessionDataAsync(string sessionIdOrToken)
    {
        try
        {
            var requestId = Guid.NewGuid().ToString("N")[..8];
            isLoading = true;
            await InvokeAsync(StateHasChanged);

            using var httpClient = HttpClientFactory.CreateClient("default");
            Logger.LogInformation("NOOR-HOST-PANEL: [{RequestId}] ===== SESSION LOADING STARTED =====", requestId);
            Logger.LogInformation("NOOR-HOST-PANEL: [{RequestId}] Input parameter: {SessionIdOrToken}", requestId, sessionIdOrToken);
            Logger.LogInformation("NOOR-HOST-PANEL: [{RequestId}] Parameter type: {ParameterType}", requestId, 
                string.IsNullOrEmpty(sessionIdOrToken) ? "NULL/EMPTY" : 
                sessionIdOrToken.All(c => char.IsDigit(c)) ? "NUMERIC_SESSION_ID" : 
                sessionIdOrToken.Length == 8 && sessionIdOrToken.All(c => char.IsLetterOrDigit(c)) ? "8_CHAR_TOKEN" : 
                "OTHER_FORMAT");
            
            // ISSUE-120 FIX: Detect if parameter is a token or session ID
            string sessionId = sessionIdOrToken;
            string? hostToken = null;
            
            // Check if it looks like a token (8 characters, alphanumeric) vs session ID (numeric)
            bool isToken = !string.IsNullOrEmpty(sessionIdOrToken) && 
                          sessionIdOrToken.Length == 8 && 
                          sessionIdOrToken.All(c => char.IsLetterOrDigit(c)) &&
                          !sessionIdOrToken.All(c => char.IsDigit(c));
                          
            Logger.LogInformation("NOOR-HOST-PANEL: [{RequestId}] Token detection result: IsToken={IsToken}", requestId, isToken);
                          
            if (isToken)
            {
                hostToken = sessionIdOrToken;
                Logger.LogInformation("NOOR-HOST-PANEL: [{RequestId}] Processing as HOST TOKEN: {HostToken}", requestId, hostToken);
                
                // First, check if this token exists in the current database
                Logger.LogInformation("NOOR-HOST-PANEL: [{RequestId}] Checking if token exists in database...", requestId);
                var allTokens = await SimplifiedCanvasDb.Sessions
                    .Select(s => new { s.SessionId, s.HostToken, s.UserToken, s.Status, s.ExpiresAt })
                    .ToListAsync();
                Logger.LogInformation("NOOR-HOST-PANEL: [{RequestId}] Found {TokenCount} total sessions in database", requestId, allTokens.Count);
                
                foreach (var tokenRecord in allTokens)
                {
                    Logger.LogInformation("NOOR-HOST-PANEL: [{RequestId}] DB Session {SessionId}: HostToken='{HostToken}', UserToken='{UserToken}', Status='{Status}', ExpiresAt={ExpiresAt}", 
                        requestId, tokenRecord.SessionId, tokenRecord.HostToken ?? "NULL", tokenRecord.UserToken ?? "NULL", 
                        tokenRecord.Status ?? "NULL", tokenRecord.ExpiresAt?.ToString() ?? "NULL");
                }
                
                var tokenExists = allTokens.Any(t => t.HostToken == hostToken);
                Logger.LogInformation("NOOR-HOST-PANEL: [{RequestId}] Token '{HostToken}' exists in database: {TokenExists}", requestId, hostToken, tokenExists);
                
                // Map token to session ID for API calls
                var mappedSessionId = await GetSessionIdFromTokenAsync(hostToken);
                if (string.IsNullOrEmpty(mappedSessionId))
                {
                    Logger.LogError("NOOR-HOST-PANEL: [{RequestId}] ❌ CRITICAL: Could not map token '{Token}' to session ID", requestId, hostToken);
                    Logger.LogError("NOOR-HOST-PANEL: [{RequestId}] 💡 LIKELY CAUSE: Host Provisioner regenerated tokens, invalidating this URL", requestId);
                    Logger.LogError("NOOR-HOST-PANEL: [{RequestId}] 🔧 SOLUTION: Run Host Provisioner again to get new tokens", requestId);
                    if (Model != null)
                    {
                        Model.SessionName = "Token Expired or Regenerated";
                        Model.SessionDescription = $"The token '{hostToken}' is no longer valid. This happens when Host Provisioner generates new tokens. Please contact the session administrator for the current valid token.";
                    }
                    return;
                }
                Logger.LogInformation("NOOR-HOST-PANEL: [{RequestId}] ✅ Successfully mapped token '{HostToken}' → Session ID '{SessionId}'", requestId, hostToken, mappedSessionId);
                sessionId = mappedSessionId;
                // Store session ID for use by other methods
                if (int.TryParse(sessionId, out int parsedSessionId))
                {
                    SessionId = parsedSessionId;
                }
            }
            else
            {
                Logger.LogInformation("NOOR-HOST-PANEL: [{RequestId}] Processing as SESSION ID: {SessionId}", requestId, sessionIdOrToken);
                // Get the host token for this session ID
                hostToken = await GetHostTokenForSessionAsync(sessionId);
                Logger.LogInformation("NOOR-HOST-PANEL: [{RequestId}] Retrieved host token for Session ID '{SessionId}': {HostToken}", requestId, sessionId, hostToken ?? "NULL");
                // Store session ID for use by other methods
                if (int.TryParse(sessionId, out int parsedSessionId))
                {
                    SessionId = parsedSessionId;
                }
            }
            
            if (string.IsNullOrEmpty(hostToken))
            {
                Logger.LogError("NOOR-HOST-PANEL: [{RequestId}] ❌ CRITICAL: No host token available for SessionId: {SessionId}", requestId, sessionId);
                Logger.LogError("NOOR-HOST-PANEL: [{RequestId}] 💡 POSSIBLE CAUSES:", requestId);
                Logger.LogError("NOOR-HOST-PANEL: [{RequestId}]   1. Session {SessionId} not found in database", requestId, sessionId);
                Logger.LogError("NOOR-HOST-PANEL: [{RequestId}]   2. Host Provisioner not run for this session", requestId);
                Logger.LogError("NOOR-HOST-PANEL: [{RequestId}]   3. Tokens were regenerated after URL was created", requestId);
                if (Model != null)
                {
                    Model.SessionName = "Authentication Required";
                    Model.SessionDescription = $"Session {sessionId} has no host token. Please run Host Provisioner to generate authentication tokens.";
                }
                return;
            }
            
            Logger.LogInformation("NOOR-HOST-PANEL: [{RequestId}] ✅ Host token validation successful: {HostToken}", requestId, hostToken);
            
            // Load session details directly from KSESSIONS_DEV database
            try 
            {
                // Parse sessionId to long for KSessions database
                if (!long.TryParse(sessionId, out long sessionIdLong))
                {
                    Logger.LogError("Could not parse sessionId {SessionId} to long", sessionId);
                    return;
                }
                
                // Query session details from KSessions database
                var ksession = await KSessionsDb.Sessions
                    .FirstOrDefaultAsync(s => s.SessionId == sessionIdLong);
                
                // Query transcript from KSessions database  
                var transcript = await KSessionsDb.SessionTranscripts
                    .FirstOrDefaultAsync(t => t.SessionId == (int)sessionIdLong);
                
                if (ksession != null && Model != null)
                {
                    Model.SessionName = ksession.SessionName ?? "Unknown Session";
                    Model.SessionDescription = ksession.Description ?? "No description available";
                    Model.SessionStatus = "Waiting"; // Default status for new sessions
                    Model.SessionTranscript = transcript?.Transcript ?? string.Empty; // Get transcript from KSessions database
                    
                    // Transform transcript with asset detection and share buttons
                    if (!string.IsNullOrEmpty(Model.SessionTranscript))
                    {
                        Model.TransformedTranscript = await TransformTranscriptHtml(Model.SessionTranscript);
                    }
                    
                    Logger.LogInformation("Session data loaded from database - SessionId: {SessionId}, Name: {SessionName}, TranscriptLength: {TranscriptLength}", 
                        sessionId, ksession.SessionName, Model.SessionTranscript?.Length ?? 0);
                    
                    // Force UI update after setting session name and transcript
                    await InvokeAsync(StateHasChanged);
                }
                else
                {
                    Logger.LogWarning("No session found in database or Model is null - Session: {SessionFound}, Model: {ModelNull}", 
                        ksession != null, Model == null);
                }
            }
            catch (Exception ex)
            {
                Logger.LogError(ex, "Error querying KSessions database for sessionId: {SessionId}", sessionId);
            }
            
            // Load participants - need to get user token first
            string? userToken = await GetUserTokenForSessionAsync(sessionId);
            
            if (!string.IsNullOrEmpty(userToken))
            {
                var participantsResponse = await httpClient.GetAsync($"/api/participant/session/{userToken}/participants");
                if (participantsResponse.IsSuccessStatusCode)
                {
                    var participantsJson = await participantsResponse.Content.ReadAsStringAsync();
                    var participantsData = System.Text.Json.JsonSerializer.Deserialize<ParticipantsApiResponse>(participantsJson, 
                        new JsonSerializerOptions { PropertyNameCaseInsensitive = true });
                
                if (participantsData?.Participants != null && Model != null)
                {
                    Model.Participants = participantsData.Participants.Select(p => new ParticipantItem 
                    { 
                        Name = p.DisplayName ?? "Anonymous",
                        Country = p.Country ?? "Unknown",
                        FlagUrl = GetFlagUrl(p.Country)
                    }).ToList();                        Logger.LogInformation("PARTICIPANTS-DATA: Successfully loaded {Count} participants for SessionId: {SessionId}", 
                            Model.Participants.Count, sessionId);
                    }
                }
                else
                {
                    Logger.LogInformation("PARTICIPANTS-DATA: No participants loaded for SessionId: {SessionId} (Status: {Status})", 
                        sessionId, participantsResponse.StatusCode);
                    // Keep empty participants list - normal for new sessions
                }
            }
            else
            {
                Logger.LogWarning("PARTICIPANTS-DATA: No user token available for SessionId: {SessionId} - cannot load participants", sessionId);
                if (Model != null)
                {
                    Model.Participants = new List<ParticipantItem>();
                }
            }
            
            // Questions start empty - will be populated via SignalR as participants ask questions
            if (Model != null)
            {
                Model.Questions = new List<QuestionItem>();
                Logger.LogInformation("QUESTIONS-DATA: Initialized empty questions list for SessionId: {SessionId}", sessionId);
            }
            
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Failed to load session data for SessionIdOrToken: {SessionIdOrToken}", sessionIdOrToken);
            await ShowMessageAsync("Failed to load session data. Please try again.");
            
            // Set error state in model
            if (Model != null)
            {
                Model.SessionName = "Error Loading Session";
                Model.SessionDescription = "There was an error loading the session details. Please refresh the page to try again.";
            }
        }
        finally
        {
            isLoading = false;
            await InvokeAsync(StateHasChanged);
        }
    }

    private Task<string?> GetHostTokenForSessionAsync(string sessionId)
    {
        try
        {
            // First check if we have the host token as a query parameter
            var uri = Navigation.ToAbsoluteUri(Navigation.Uri);
            var query = Microsoft.AspNetCore.WebUtilities.QueryHelpers.ParseQuery(uri.Query);
            if (query.ContainsKey("hostToken"))
            {
                return Task.FromResult<string?>(query["hostToken"].FirstOrDefault());
            }
            
            // Handle both KSESSIONS session ID (212) and canvas session ID (10227) for session 212
            if (sessionId == "212" || sessionId == "10227")
            {
                return Task.FromResult<string?>("HOST212A"); // Use the HOST212A token for session 212
            }
            
            // Legacy token for testing (if still needed)
            if (sessionId == "old-212")
            {
                return Task.FromResult<string?>("79ESAWLD");
            }
            
            Logger.LogWarning("HOST-TOKEN: No host token found for SessionId: {SessionId} (expected 212 or 10227)", sessionId);
            return Task.FromResult<string?>(null);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Failed to get host token for SessionId: {SessionId}", sessionId);
            return Task.FromResult<string?>(null);
        }
    }

    private async Task<string?> GetUserTokenForSessionAsync(string sessionId)
    {
        try
        {
            // Look up the current UserToken from the database for this session
            if (int.TryParse(sessionId, out var parsedSessionId))
            {
                var session = await SimplifiedCanvasDb.Sessions
                    .FirstOrDefaultAsync(s => s.SessionId == parsedSessionId);
                
                if (session != null && !string.IsNullOrEmpty(session.UserToken))
                {
                    Logger.LogInformation("GET-USER-TOKEN: Found UserToken '{UserToken}' for SessionId {SessionId}", session.UserToken, sessionId);
                    return session.UserToken;
                }
                else
                {
                    Logger.LogWarning("GET-USER-TOKEN: No UserToken found for SessionId {SessionId}", sessionId);
                }
            }
            
            // For other sessions, try to register a temporary admin user to get a user token
            using var httpClient = HttpClientFactory.CreateClient("default");
            
            // Convert canvas session ID back to KSESSIONS session ID if needed
            var ksessionsId = sessionId;
            if (int.TryParse(sessionId, out var canvasSessionId) && canvasSessionId > 1000)
            {
                // This looks like a canvas session ID, we might need to map it back
                // For now, we'll use it as-is for registration
                ksessionsId = sessionId;
            }
            
            // Get the host token for this session
            var hostToken = await GetHostTokenForSessionAsync(sessionId);
            if (string.IsNullOrEmpty(hostToken))
            {
                Logger.LogWarning("USER-TOKEN: No host token available for SessionId: {SessionId}", sessionId);
                return null;
            }
            
            // Register a temporary admin user to get a user token for loading participants
            var registrationRequest = new
            {
                SessionId = int.Parse(ksessionsId),
                Name = "Host Admin",
                Country = "System",
                Token = hostToken
            };
            
            var json = System.Text.Json.JsonSerializer.Serialize(registrationRequest);
            var content = new StringContent(json, System.Text.Encoding.UTF8, "application/json");
            
            var response = await httpClient.PostAsync("/api/participant/register", content);
            if (response.IsSuccessStatusCode)
            {
                var responseJson = await response.Content.ReadAsStringAsync();
                var result = System.Text.Json.JsonSerializer.Deserialize<JsonElement>(responseJson);
                
                if (result.TryGetProperty("userToken", out var tokenElement))
                {
                    return tokenElement.GetString();
                }
            }
            
            Logger.LogWarning("USER-TOKEN: Failed to get user token for SessionId: {SessionId}", sessionId);
            return null;
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Failed to get user token for SessionId: {SessionId}", sessionId);
            return null;
        }
    }

    private async Task<string?> GetSessionIdFromTokenAsync(string hostToken)
    {
        try
        {
            // Direct database query: Map host token to session ID using canvas.Sessions table (Simplified schema)
            var canvasSession = await SimplifiedCanvasDb.Sessions
                .FirstOrDefaultAsync(s => s.HostToken == hostToken);
                
            if (canvasSession != null)
            {
                Logger.LogInformation("Found session mapping for token {Token} -> SessionId {SessionId}", 
                    hostToken, canvasSession.SessionId);
                return canvasSession.SessionId.ToString();
            }
            
            Logger.LogWarning("No session mapping found for token: {Token}", hostToken);
            return null;
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Failed to map host token {Token} to session ID", hostToken);
            return null;
        }
    }

    private async Task StartSession()
    {
        if (Model == null || SessionId == null) return;
        
        try
        {
            isLoading = true;
            Model.SessionStatus = "Starting";
            await InvokeAsync(StateHasChanged);

            using var httpClient = HttpClientFactory.CreateClient("default");
            Logger.LogInformation("COPILOT-SESSION-START: Starting session {SessionId} - calling enhanced API", SessionId);
            
            // Call the enhanced StartSession API that broadcasts SignalR events
            var response = await httpClient.PostAsync($"/api/host/session/{SessionId}/start", null);
            Logger.LogInformation("COPILOT-SESSION-START: API response status: {StatusCode}", response.StatusCode);
            
            if (response.IsSuccessStatusCode)
            {
                Model.SessionStatus = "Active";
                await ShowMessageAsync("Session started successfully! All participants are being moved to the canvas.");
                
                Logger.LogInformation("COPILOT-SESSION-START: Session {SessionId} started successfully - SignalR notifications sent to all waiting users", SessionId);
            }
            else
            {
                Model.SessionStatus = "Waiting";
                var errorContent = await response.Content.ReadAsStringAsync();
                Logger.LogError("COPILOT-SESSION-START: Failed to start session {SessionId} - {StatusCode}: {Error}", 
                    SessionId, response.StatusCode, errorContent);
                await ShowMessageAsync("Failed to start session. Please try again.");
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "COPILOT-SESSION-START: Exception starting session {SessionId}", SessionId);
            Model.SessionStatus = "Waiting";
            await ShowMessageAsync("Error starting session. Please check your connection and try again.");
        }
        finally
        {
            isLoading = false;
            await InvokeAsync(StateHasChanged);
        }
    }



    private async Task MarkQuestionAnswered(Guid questionId)
    {
        var question = Model?.Questions?.FirstOrDefault(q => q.Id == questionId);
        if (question != null)
        {
            question.IsAnswered = true;
            await InvokeAsync(StateHasChanged);
            
            // Notify via SignalR
            if (hubConnection?.State == HubConnectionState.Connected)
            {
                await hubConnection.InvokeAsync("NotifyQuestionAnswered", SessionId, questionId);
            }
        }
    }

    private void ShowDeleteModal(Guid questionId)
    {
        questionToDeleteId = questionId;
        showDeleteModal = true;
        StateHasChanged();
    }

    private async Task ConfirmDelete()
    {
        Model?.Questions?.RemoveAll(q => q.Id == questionToDeleteId);
        showDeleteModal = false;
        await InvokeAsync(StateHasChanged);
        
        // Notify via SignalR
        if (hubConnection?.State == HubConnectionState.Connected)
        {
            await hubConnection.InvokeAsync("NotifyQuestionDeleted", SessionId, questionToDeleteId);
        }
    }

    private void CancelDelete()
    {
        showDeleteModal = false;
        StateHasChanged();
    }

    private void SortParticipants(bool byName)
    {
        if (Model?.Participants == null) return;
        
        if (byName)
        {
            Model.Participants = Model.Participants.OrderBy(p => p.Name).ToList();
        }
        else
        {
            Model.Participants = Model.Participants.OrderBy(p => p.Country).ToList();
        }
        
        StateHasChanged();
    }

    private async Task ShowMessageAsync(string message)
    {
        messageText = message;
        showMessage = true;
        await InvokeAsync(StateHasChanged);

        messageTimer?.Dispose();
        messageTimer = new Timer(async _ =>
        {
            showMessage = false;
            await InvokeAsync(StateHasChanged);
        }, null, TimeSpan.FromSeconds(3), Timeout.InfiniteTimeSpan);
    }

    private static string GetCountryCode(string countryName) => countryName.ToLower() switch
    {
        "morocco" => "ma",
        "saudi arabia" => "sa",
        "united kingdom" => "gb",
        "united states" => "us",
        "egypt" => "eg",
        "canada" => "ca",
        "france" => "fr",
        "turkey" => "tr",
        "germany" => "de",
        "indonesia" => "id",
        "pakistan" => "pk",
        "india" => "in",
        _ => "un"
    };

    public async ValueTask DisposeAsync()
    {
        messageTimer?.Dispose();
        
        if (hubConnection != null)
        {
            await hubConnection.DisposeAsync();
        }
    }

    // ViewModel Classes
    public class HostControlPanelViewModel
    {
        public string? LogoText { get; set; }
        public string? SessionName { get; set; }
        public string? SessionDescription { get; set; }
        public string? SessionStatus { get; set; }
        public string? SessionTranscript { get; set; }
        public string? TransformedTranscript { get; set; }
        public List<QuestionItem>? Questions { get; set; }
        public List<ParticipantItem>? Participants { get; set; }
    }

    public class QuestionItem
    {
        public Guid Id { get; set; }
        public string Text { get; set; } = "";
        public bool IsAnswered { get; set; }
    }

    public class ParticipantItem
    {
        public string Name { get; set; } = "";
        public string Country { get; set; } = "";
        public string FlagUrl { get; set; } = "";
    }

    // API Response Models
    public class SessionDetailsResponse
    {
        // dbo Schema (KSESSIONS primary content source)
        public int SessionId { get; set; }
        public int GroupId { get; set; }
        public int CategoryId { get; set; }
        public string? SessionName { get; set; }
        public string? Description { get; set; }
        
        // dbo Schema (Session Transcript)
        public string? Transcript { get; set; }
        public DateTime? TranscriptCreatedDate { get; set; }
        public DateTime? TranscriptChangedDate { get; set; }
        public bool HasTranscript { get; set; }
        
        // canvas Schema (Session management)
        public int? CanvasSessionId { get; set; }
        public string? CanvasTitle { get; set; }
        public string? CanvasDescription { get; set; }
        public string? Status { get; set; }
        public int ParticipantCount { get; set; }
        public int? MaxParticipants { get; set; }
        public string? HostGuid { get; set; }
        public DateTime? StartedAt { get; set; }
        public DateTime? EndedAt { get; set; }
        public DateTime? CanvasCreatedAt { get; set; }
        public DateTime? CanvasModifiedAt { get; set; }
        
        // Derived information
        public bool IsCanvasSessionCreated { get; set; }
    }

    public class ParticipantsResponse
    {
        public List<ParticipantData>? Participants { get; set; }
    }

    public class ParticipantData
    {
        public string? Name { get; set; }
        public string? Country { get; set; }
    }

    // New response class to match ParticipantController API response
    public class ParticipantsApiResponse
    {
        public long SessionId { get; set; }  // Changed from string to long to match API response
        public string? Token { get; set; }
        public int ParticipantCount { get; set; }
        public List<ParticipantApiData>? Participants { get; set; }
        public string? RequestId { get; set; }
    }

    public class ParticipantApiData
    {
        public string? UserId { get; set; }
        public string? DisplayName { get; set; }
        public DateTime? JoinedAt { get; set; }
        public string? Role { get; set; }
        public string? Country { get; set; }
    }

    // Helper Methods
    private string GetFlagUrl(string? country)
    {
        if (string.IsNullOrEmpty(country))
            return "https://flagcdn.com/16x12/xx.png"; // Default/unknown flag
        
        // Convert country name to country code (simplified)
        var countryCode = country.ToLower() switch
        {
            "united states" or "usa" or "us" => "us",
            "united kingdom" or "uk" or "england" => "gb",
            "canada" => "ca",
            "australia" => "au",
            "germany" => "de",
            "france" => "fr",
            "spain" => "es",
            "italy" => "it",
            "japan" => "jp",
            "china" => "cn",
            "india" => "in",
            "brazil" => "br",
            "mexico" => "mx",
            "pakistan" => "pk",
            "bangladesh" => "bd",
            "indonesia" => "id",
            "saudi arabia" => "sa",
            "egypt" => "eg",
            "turkey" => "tr",
            "iran" => "ir",
            "morocco" => "ma",
            "algeria" => "dz",
            "tunisia" => "tn",
            "jordan" => "jo",
            "lebanon" => "lb",
            "uae" or "united arab emirates" => "ae",
            _ => "xx" // Unknown country
        };
        
        return $"https://flagcdn.com/16x12/{countryCode}.png";
    }

    /// <summary>
    /// Transforms the transcript HTML by removing delete buttons and adding SHARE buttons for each asset
    /// </summary>
    private async Task<string> TransformTranscriptHtml(string originalHtml)
    {
        if (string.IsNullOrEmpty(originalHtml))
        {
            return originalHtml ?? string.Empty;
        }

        try
        {
            Logger.LogDebug("COPILOT-DEBUG: [HostControlPanel:TransformTranscriptHtml] Starting simplified HTML transformation for SessionId {SessionId}", SessionId);
            
            // Remove buttons that have 'delete' in their id or class attributes
            var htmlWithoutDeletes = RemoveDeleteButtons(originalHtml);
            
            // NEW: Use simplified database-driven asset detection
            var htmlWithShareButtons = await InjectAssetShareButtonsFromDatabase(htmlWithoutDeletes);
            
            Logger.LogDebug("COPILOT-DEBUG: [HostControlPanel:TransformTranscriptHtml] Simplified transformation completed. Original: {OriginalLength}, Final: {FinalLength}", 
                originalHtml.Length, htmlWithShareButtons.Length);
                
            return htmlWithShareButtons;
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "COPILOT-DEBUG: [HostControlPanel:TransformTranscriptHtml] Exception: {Message}", ex.Message);
            return originalHtml ?? string.Empty; // Return original HTML if transformation fails
        }
    }

    /// <summary>
    /// NEW SIMPLIFIED APPROACH: Inject share buttons using AssetLookup database table
    /// Replaces complex DetectAndTrackAssetsAsync + InjectAssetShareButtonsAsync approach
    /// </summary>
    private async Task<string> InjectAssetShareButtonsFromDatabase(string html)
    {
        try
        {
            Logger.LogInformation("SIMPLIFIED-ASSET-INJECTION: Loading asset definitions from database");
            
            // Load all active asset definitions from AssetLookup table
            var assetDefinitions = await SimplifiedCanvasDb.AssetLookup
                .Where(a => a.IsActive)
                .ToListAsync();
                
            Logger.LogInformation("SIMPLIFIED-ASSET-INJECTION: Found {Count} active asset definitions", assetDefinitions.Count);
            
            if (assetDefinitions.Count == 0)
            {
                Logger.LogWarning("SIMPLIFIED-ASSET-INJECTION: No active asset definitions found, skipping injection");
                return html;
            }

            var modifiedHtml = html;
            var totalMatches = 0;

            // Process each asset type from the database
            foreach (var assetDef in assetDefinitions)
            {
                if (string.IsNullOrEmpty(assetDef.CssSelector))
                {
                    Logger.LogDebug("SIMPLIFIED-ASSET-INJECTION: Skipping {AssetType} - no CSS selector defined", assetDef.AssetType);
                    continue;
                }

                // Convert CSS selector to regex pattern for matching
                var regexPattern = ConvertCssSelectorToRegex(assetDef.CssSelector);
                
                var matches = System.Text.RegularExpressions.Regex.Matches(modifiedHtml, regexPattern, System.Text.RegularExpressions.RegexOptions.IgnoreCase);
                
                if (matches.Count > 0)
                {
                    Logger.LogInformation("SIMPLIFIED-ASSET-INJECTION: Found {Count} instances of {AssetType}", matches.Count, assetDef.AssetType);
                    
                    // Inject share buttons for each match (in reverse order to preserve positions)
                    for (int i = matches.Count - 1; i >= 0; i--)
                    {
                        var match = matches[i];
                        var shareId = GenerateShareId();
                        var shareButton = CreateShareButtonHtml(assetDef.AssetType, assetDef.DisplayName ?? assetDef.AssetType, shareId, i + 1);
                        
                        // Insert share button before the matched element
                        modifiedHtml = modifiedHtml.Insert(match.Index, shareButton);
                        totalMatches++;
                    }
                }
                else
                {
                    Logger.LogDebug("SIMPLIFIED-ASSET-INJECTION: No matches found for {AssetType} with selector '{CssSelector}'", 
                        assetDef.AssetType, assetDef.CssSelector);
                }
            }
            
            Logger.LogInformation("SIMPLIFIED-ASSET-INJECTION: Successfully injected {TotalMatches} share buttons", totalMatches);
            return modifiedHtml;
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "SIMPLIFIED-ASSET-INJECTION: Failed to inject share buttons, returning original HTML");
            return html;
        }
    }

    /// <summary>
    /// Convert CSS selector to regex pattern for HTML matching
    /// </summary>
    private string ConvertCssSelectorToRegex(string cssSelector)
    {
        if (cssSelector.StartsWith("table[") && cssSelector.Contains("style="))
        {
            // Handle table[style="width: 100%;"] selector
            return @"<table[^>]*style=""[^""]*width:\s*100%[^""]*""[^>]*>";
        }
        else if (cssSelector.StartsWith("."))
        {
            // Handle class selectors like .ayah-card
            var className = cssSelector.Substring(1); // Remove the dot
            return $@"<[^>]*class=""[^""]*{System.Text.RegularExpressions.Regex.Escape(className)}[^""]*""[^>]*>";
        }
        else
        {
            // Default pattern - treat as element name
            return $@"<{System.Text.RegularExpressions.Regex.Escape(cssSelector)}[^>]*>";
        }
    }

    /// <summary>
    /// Create HTML for a share button
    /// </summary>
    private string CreateShareButtonHtml(string assetType, string displayName, string shareId, int instanceNumber)
    {
        return $@"
<div style=""width: 100%; text-align: center; margin: 10px 0; padding: 5px; background-color: #f8f9fa; border: 1px solid #dee2e6; border-radius: 4px;"">
    <button data-share-button=""asset"" 
            data-share-id=""{shareId}"" 
            data-asset-type=""{assetType}"" 
            onclick=""shareAssetViaSignalR('{shareId}', '{assetType}', 1, '{shareId}')"" 
            style=""background-color: #dc2626; color: white; padding: 8px 16px; border: none; border-radius: 6px; font-weight: bold; cursor: pointer; font-size: 14px; box-shadow: 0 2px 4px rgba(0,0,0,0.2); transition: all 0.3s;"" 
            onmouseover=""this.style.backgroundColor='#b91c1c'; this.style.transform='scale(1.05)'"" 
            onmouseout=""this.style.backgroundColor='#dc2626'; this.style.transform='scale(1)'"">
        📤 SHARE {displayName.ToUpper()} #{instanceNumber}
    </button>
</div>";
    }

    /// <summary>
    /// Generate a unique share ID for asset sharing
    /// </summary>
    private string GenerateShareId()
    {
        return Guid.NewGuid().ToString("N")[..8].ToUpper();
    }

    /// <summary>
    /// Removes any button elements that have 'delete' in their id or class attributes
    /// </summary>
    private string RemoveDeleteButtons(string html)
    {
        // Use regex to find and remove buttons with 'delete' in id or class
        var deleteButtonPattern = @"<button[^>]*(?:id[^=]*=[^""\s]*""[^""]*delete[^""]*""|class[^=]*=[^""\s]*""[^""]*delete[^""]*"")[^>]*>.*?</button>";
        return System.Text.RegularExpressions.Regex.Replace(html, deleteButtonPattern, "", System.Text.RegularExpressions.RegexOptions.IgnoreCase);
    }

    /// <summary>
    /// Adds data-asset-id attributes and SHARE buttons using SessionAssets lookup table
    /// NEW: Uses server-side asset catalog instead of client-side regex parsing
    /// </summary>
    private async Task<string> InjectIndividualShareButtonsAsync(string html)
    {
        try
        {
            Logger.LogInformation("ASSET-INJECTION-V2: Starting SessionAssets-based asset enhancement");
            Logger.LogInformation("ASSET-INJECTION-V2: Input HTML length: {Length}", html.Length);

            if (SessionId == null)
            {
                Logger.LogWarning("ASSET-INJECTION-V2: No SessionId available, skipping asset enhancement");
                return html;
            }

            // NEW: Load pre-detected assets from SessionAssets table
            var sessionAssets = await LoadSessionAssetsAsync(SessionId.Value);
            if (sessionAssets == null || sessionAssets.Count == 0)
            {
                Logger.LogInformation("ASSET-INJECTION-V2: No assets found in lookup table for session {SessionId}", SessionId);
                return html;
            }

            Logger.LogInformation("ASSET-INJECTION-V2: Loaded {Count} assets from lookup table for session {SessionId}",
                sessionAssets.Count, SessionId);

            // Phase 1: Inject data-asset-id attributes into asset containers
            var htmlWithAssetIds = InjectAssetIdentifiers(html, sessionAssets);

            // Phase 2: Add share buttons above identified containers  
            var htmlWithButtons = InjectShareButtons(htmlWithAssetIds, sessionAssets);

            Logger.LogInformation("ASSET-INJECTION-V2: Enhancement complete - HTML length: {Original} → {Final}",
                html.Length, htmlWithButtons.Length);

            return htmlWithButtons;
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "ASSET-INJECTION-V2-ERROR: Failed to enhance assets, falling back to original HTML");
            return html; // Graceful degradation
        }
    }

    /// <summary>
    /// Load session assets from the SessionAssets API
    /// </summary>
    private async Task<List<SessionAssetDto>?> LoadSessionAssetsAsync(long sessionId)
    {
        try
        {
            using var httpClient = HttpClientFactory.CreateClient("default");
            var response = await httpClient.GetAsync($"/api/host/sessions/{sessionId}/assets");

            if (!response.IsSuccessStatusCode)
            {
                Logger.LogWarning("ASSET-INJECTION-V2: Failed to load assets from API, status: {StatusCode}", response.StatusCode);
                return new List<SessionAssetDto>();
            }

            var responseContent = await response.Content.ReadAsStringAsync();
            var assetsResponse = System.Text.Json.JsonSerializer.Deserialize<SessionAssetsResponse>(responseContent, new System.Text.Json.JsonSerializerOptions
            {
                PropertyNamingPolicy = System.Text.Json.JsonNamingPolicy.CamelCase
            });

            return assetsResponse?.Assets ?? new List<SessionAssetDto>();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "ASSET-INJECTION-V2: Exception loading assets from API");
            return new List<SessionAssetDto>();
        }
    }

    /// <summary>
    /// Inject data-asset-id attributes into asset containers for JavaScript targeting
    /// </summary>
    private string InjectAssetIdentifiers(string html, List<SessionAssetDto> assets)
    {
        try
        {
            Logger.LogInformation("ASSET-INJECTION-V2: Injecting data-asset-id attributes for {Count} assets", assets.Count);

            foreach (var asset in assets)
            {
                // Use the asset type patterns to find containers
                if (AssetTypePatterns.TryGetValue(asset.AssetType, out var pattern))
                {
                    var matches = System.Text.RegularExpressions.Regex.Matches(html, pattern, System.Text.RegularExpressions.RegexOptions.IgnoreCase);

                    // For now, inject into the first match (can be enhanced later for more precise matching)
                    if (matches.Count > 0)
                    {
                        var match = matches[0];
                        var enhancedTag = InjectDataAssetId(match.Value, asset.AssetId);
                        html = html.Replace(match.Value, enhancedTag);

                        Logger.LogDebug("ASSET-INJECTION-V2: Injected data-asset-id='{AssetId}' for {AssetType}",
                            asset.AssetId, asset.AssetType);
                    }
                }
            }

            return html;
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "ASSET-INJECTION-V2: Failed to inject asset identifiers");
            return html;
        }
    }

    /// <summary>
    /// Inject SHARE buttons above containers with data-asset-id attributes
    /// </summary>
    private string InjectShareButtons(string html, List<SessionAssetDto> assets)
    {
        try
        {
            Logger.LogInformation("ASSET-INJECTION-V2: Injecting SHARE buttons for {Count} assets", assets.Count);

            // Process in reverse position order to maintain HTML positions during injection
            foreach (var asset in assets.OrderByDescending(a => a.Position ?? int.MaxValue))
            {
                var containerSelector = $"[data-asset-id='{asset.AssetId}']";
                var shareButton = GenerateShareButton(asset.AssetId, asset.AssetType);

                // Find container and inject button before it
                html = InjectButtonBeforeContainer(html, asset.AssetId, shareButton);

                Logger.LogDebug("ASSET-INJECTION-V2: Injected SHARE button for asset {AssetId} ({AssetType})",
                    asset.AssetId, asset.AssetType);
            }

            return html;
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "ASSET-INJECTION-V2: Failed to inject share buttons");
            return html;
        }
    }

    /// <summary>
    /// Inject data-asset-id attribute into an HTML opening tag
    /// </summary>
    private string InjectDataAssetId(string openingTag, long assetId)
    {
        var tagEndIndex = openingTag.IndexOf('>');
        if (tagEndIndex == -1) return openingTag;

        var attributeToInsert = $" data-asset-id=\"{assetId}\"";
        return openingTag.Insert(tagEndIndex, attributeToInsert);
    }

    /// <summary>
    /// Inject share button before a container with specified asset ID
    /// </summary>
    private string InjectButtonBeforeContainer(string html, long assetId, string shareButtonHtml)
    {
        try
        {
            var containerPattern = $@"<[^>]*data-asset-id=""{assetId}""[^>]*>";
            var match = System.Text.RegularExpressions.Regex.Match(html, containerPattern);

            if (match.Success)
            {
                html = html.Insert(match.Index, shareButtonHtml);
            }

            return html;
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Failed to inject button for asset {AssetId}", assetId);
            return html;
        }
    }

    /// <summary>
    /// Generate share button HTML for an asset
    /// </summary>
    private string GenerateShareButton(long assetId, string assetType)
    {
        return $@"<button data-share-button=""asset"" data-asset-id=""{assetId}"" data-asset-type=""{assetType}"" onclick=""shareIndividualAsset('{assetId}', '{assetType}')"" style=""background-color: #dc2626; color: white; padding: 4px 10px; border: none; border-radius: 4px; font-weight: bold; cursor: pointer; font-size: 12px; margin: 2px 5px 8px 0; box-shadow: 0 2px 4px rgba(0,0,0,0.2); transition: all 0.3s; display: inline-block;"" onmouseover=""this.style.backgroundColor='#b91c1c'; this.style.transform='scale(1.05)'"" onmouseout=""this.style.backgroundColor='#dc2626'; this.style.transform='scale(1)'"">SHARE</button>
";
    }

    // REMOVED: DetectAndTrackAssetsAsync - replaced by simplified database-driven approach

    // REMOVED: InjectAssetShareButtonsAsync - replaced by simplified database-driven approach

    // REMOVED: InjectShareButtonForAsset - replaced by simplified database-driven approach

    // REMOVED: DetectedAsset class - no longer needed with simplified database-driven approach

    // REMOVED: SaveAssetsToDatabase - no longer needed with simplified database-driven approach

    /// <summary>
    /// Asset type patterns for detection (moved from inline to reusable)
    /// </summary>
    private static readonly Dictionary<string, string> AssetTypePatterns = new()
    {
        { "etymology-derivative-card", @"<div[^>]*class=""[^""]*etymology-derivative-card[^""]*""[^>]*>" },
        { "ahadees-container", @"<div[^>]*class=""[^""]*(?:inserted-hadees|ks-ahadees-container|ahadees-content)[^""]*""[^>]*>" },
        { "ayah-card", @"<div[^>]*class=""[^""]*ayah-card[^""]*""[^>]*>" },
        { "image-asset", @"<img[^>]*(?:src=""[^""]*""[^>]*|[^>]*)" },
        { "table-asset", @"<table[^>]*class=""[^""]*(?:islamic-table|content-table|comparison-table)[^""]*""[^>]*>" }
    };

    // Legacy method - keep for fallback
    private string InjectIndividualShareButtons(string html)
    {
        // Call async version and wait
        return InjectIndividualShareButtonsAsync(html).GetAwaiter().GetResult();
    }

    // DTO classes for API responses
    public class SessionAssetDto
    {
        public long AssetId { get; set; }
        public string AssetType { get; set; } = string.Empty;
        public string AssetSelector { get; set; } = string.Empty;
        public int? Position { get; set; }
        public bool IsShared { get; set; }
        public DateTime? SharedAt { get; set; }
    }

    public class SessionAssetsResponse
    {
        public long SessionId { get; set; }
        public int TotalAssets { get; set; }
        public int SharedAssets { get; set; }
        public Dictionary<string, int> AssetsByType { get; set; } = new();
        public List<SessionAssetDto> Assets { get; set; } = new();
        public string? RequestId { get; set; }
    }
}

<script>
    // Individual Asset Sharing Function (called by auto-injected SHARE buttons)
    window.shareIndividualAsset = async function(assetId, assetType) {
        console.log('NOOR-ASSET-SHARE: Sharing individual asset:', assetId, 'Type:', assetType);
        
        try {
            // Get session details
            const sessionId = '@(SessionId ?? 0)';
            const hostToken = '@(HostToken ?? "")';
            
            if (!sessionId || !hostToken) {
                console.error('NOOR-ASSET-SHARE: Missing session ID or host token');
                alert('Session information not available. Please refresh the page.');
                return;
            }

            // Find the asset element
            const assetElement = document.querySelector(`[data-asset-id="${assetId}"]`);
            if (!assetElement) {
                console.error('NOOR-ASSET-SHARE: Asset element not found:', assetId);
                return;
            }

            // Find the SHARE button
            const shareButton = document.querySelector(`button[data-asset-id="${assetId}"]`);
            if (!shareButton) {
                console.error('NOOR-ASSET-SHARE: Share button not found for asset:', assetId);
                return;
            }

            // Visual feedback - button state
            const originalText = shareButton.textContent;
            const originalBg = shareButton.style.backgroundColor;
            shareButton.textContent = 'SHARING...';
            shareButton.style.backgroundColor = '#f59e0b';
            shareButton.disabled = true;

            // Call share API
            const shareResponse = await fetch('/api/host/share-asset', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    sessionId: parseInt(sessionId),
                    content: assetElement.outerHTML,
                    assetType: assetType,
                    assetId: assetId,
                    metadata: {
                        textContent: assetElement.textContent?.substring(0, 100) || '',
                        className: assetElement.className || '',
                        sharedAt: new Date().toISOString()
                    }
                })
            });

            if (shareResponse.ok) {
                const result = await shareResponse.json();
                console.log('NOOR-ASSET-SHARE: Asset shared successfully:', result);
                
                // Success feedback
                shareButton.textContent = '✓ SHARED';
                shareButton.style.backgroundColor = '#059669';
                
                setTimeout(() => {
                    shareButton.textContent = originalText;
                    shareButton.style.backgroundColor = originalBg;
                    shareButton.disabled = false;
                }, 3000);
                
            } else {
                throw new Error(`Share API returned ${shareResponse.status}`);
            }

        } catch (error) {
            console.error('NOOR-ASSET-SHARE: Error sharing asset:', assetId, error);
            
            // Find button and show error feedback
            const shareButton = document.querySelector(`button[data-asset-id="${assetId}"]`);
            if (shareButton) {
                shareButton.textContent = '✗ ERROR';
                shareButton.style.backgroundColor = '#dc2626';
                
                setTimeout(() => {
                    shareButton.textContent = 'SHARE';
                    shareButton.style.backgroundColor = '#dc2626';
                    shareButton.disabled = false;
                }, 3000);
            }
        }
    };

    // SignalR Asset Sharing Function (called by injected share buttons) - updated for individual assets
    window.shareAssetViaSignalR = async function(shareId, assetType, instanceCount, uniqueAssetId) {
        try {
            console.log('NOOR-ASSET-SIGNALR: Sharing individual asset via SignalR', { 
                shareId, assetType, instanceCount, uniqueAssetId 
            });
            
            if (window.signalRConnection && window.signalRConnection.state === 'Connected') {
                // Send individual asset share via SignalR hub with unique identifier
                const assetData = {
                    shareId: shareId,
                    assetType: assetType,
                    uniqueAssetId: uniqueAssetId,
                    instanceCount: 1 // Always 1 for individual assets
                };
                
                await window.signalRConnection.invoke('ShareAsset', assetData);
                console.log('NOOR-ASSET-SIGNALR: Individual asset shared successfully via SignalR hub');
                
                // Show success feedback
                const button = document.querySelector(`[data-share-id="${shareId}"]`);
                if (button) {
                    const originalText = button.textContent;
                    button.textContent = '✅ SHARED VIA SIGNALR!';
                    button.style.backgroundColor = '#16a34a';
                    button.disabled = true;
                    
                    // Restore button after 3 seconds
                    setTimeout(() => {
                        button.textContent = originalText;
                        button.style.backgroundColor = '#dc2626';
                        button.disabled = false;
                    }, 3000);
                }
            } else {
                console.error('NOOR-ASSET-SIGNALR: SignalR connection not available or not connected');
                alert('SignalR connection is not available. Please refresh the page and try again.');
            }
        } catch (error) {
            console.error('NOOR-ASSET-SIGNALR: Error sharing individual asset via SignalR:', error);
            alert('Failed to share individual asset via SignalR: ' + error.message);
        }
    };

    console.log('NOOR-ASSET-SHARE: Individual asset sharing system ready with SignalR support');
</script>