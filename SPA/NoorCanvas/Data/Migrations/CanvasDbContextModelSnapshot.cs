// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NoorCanvas.Data;

#nullable disable

namespace NoorCanvas.Data.Migrations
{
    [DbContext(typeof(CanvasDbContext))]
    partial class CanvasDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("NoorCanvas.Models.Annotation", b =>
                {
                    b.Property<long>("AnnotationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("AnnotationId"));

                    b.Property<string>("AnnotationData")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<long>("SessionId")
                        .HasColumnType("bigint");

                    b.HasKey("AnnotationId");

                    b.HasIndex("SessionId");

                    b.ToTable("Annotations", "canvas");
                });

            modelBuilder.Entity("NoorCanvas.Models.AuditLog", b =>
                {
                    b.Property<long>("EventId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("EventId"));

                    b.Property<string>("Action")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Actor")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<DateTime>("At")
                        .HasColumnType("datetime2");

                    b.Property<string>("Details")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("SessionId")
                        .HasColumnType("bigint");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("EventId");

                    b.HasIndex("SessionId");

                    b.HasIndex("UserId");

                    b.ToTable("AuditLog", "canvas");
                });

            modelBuilder.Entity("NoorCanvas.Models.HostSession", b =>
                {
                    b.Property<long>("HostSessionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("HostSessionId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTime?>("ExpiresAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("HostGuidHash")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastUsedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("RevokedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("RevokedBy")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<long>("SessionId")
                        .HasColumnType("bigint");

                    b.HasKey("HostSessionId");

                    b.HasIndex("SessionId", "HostGuidHash")
                        .IsUnique()
                        .HasDatabaseName("IX_HostSessions_SessionGuidHash");

                    b.ToTable("HostSessions", "canvas");
                });

            modelBuilder.Entity("NoorCanvas.Models.Issue", b =>
                {
                    b.Property<long>("IssueId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("IssueId"));

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Context")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Priority")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ReportedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ReportedBy")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<long?>("SessionId")
                        .HasColumnType("bigint");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("IssueId");

                    b.HasIndex("SessionId");

                    b.HasIndex("UserId");

                    b.ToTable("Issues", "canvas");
                });

            modelBuilder.Entity("NoorCanvas.Models.Question", b =>
                {
                    b.Property<long>("QuestionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("QuestionId"));

                    b.Property<DateTime?>("AnsweredAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("QuestionText")
                        .IsRequired()
                        .HasMaxLength(280)
                        .HasColumnType("nvarchar(280)");

                    b.Property<DateTime>("QueuedAt")
                        .HasColumnType("datetime2");

                    b.Property<long>("SessionId")
                        .HasColumnType("bigint");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("VoteCount")
                        .HasColumnType("int");

                    b.HasKey("QuestionId");

                    b.HasIndex("UserId");

                    b.HasIndex("SessionId", "Status", "VoteCount", "QueuedAt")
                        .HasDatabaseName("IX_Questions_SessionStatusVoteQueue");

                    b.ToTable("Questions", "canvas");
                });

            modelBuilder.Entity("NoorCanvas.Models.QuestionAnswer", b =>
                {
                    b.Property<long>("AnswerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("AnswerId"));

                    b.Property<string>("AnswerText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("PostedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("PostedBy")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<long>("QuestionId")
                        .HasColumnType("bigint");

                    b.HasKey("AnswerId");

                    b.HasIndex("QuestionId");

                    b.ToTable("QuestionAnswers", "canvas");
                });

            modelBuilder.Entity("NoorCanvas.Models.QuestionVote", b =>
                {
                    b.Property<long>("VoteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("VoteId"));

                    b.Property<long>("QuestionId")
                        .HasColumnType("bigint");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte>("VoteValue")
                        .HasColumnType("tinyint");

                    b.Property<DateTime>("VotedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("VoteId");

                    b.HasIndex("UserId");

                    b.HasIndex("QuestionId", "UserId")
                        .IsUnique()
                        .HasDatabaseName("UQ_QuestionVotes_QuestionUser")
                        .HasFilter("[UserId] IS NOT NULL");

                    b.ToTable("QuestionVotes", "canvas");
                });

            modelBuilder.Entity("NoorCanvas.Models.Registration", b =>
                {
                    b.Property<long>("RegistrationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("RegistrationId"));

                    b.Property<DateTime>("JoinTime")
                        .HasColumnType("datetime2");

                    b.Property<long>("SessionId")
                        .HasColumnType("bigint");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("RegistrationId");

                    b.HasIndex("SessionId");

                    b.HasIndex("UserId", "SessionId")
                        .IsUnique()
                        .HasDatabaseName("UQ_Registration_UserSession");

                    b.ToTable("Registrations", "canvas");
                });

            modelBuilder.Entity("NoorCanvas.Models.Session", b =>
                {
                    b.Property<long>("SessionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("SessionId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EndedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ExpiresAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("GroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("StartedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("SessionId");

                    b.ToTable("Sessions", "canvas");
                });

            modelBuilder.Entity("NoorCanvas.Models.SessionLink", b =>
                {
                    b.Property<long>("LinkId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("LinkId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Guid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("LastUsedAt")
                        .HasColumnType("datetime2");

                    b.Property<long>("SessionId")
                        .HasColumnType("bigint");

                    b.Property<byte>("State")
                        .HasColumnType("tinyint");

                    b.Property<int>("UseCount")
                        .HasColumnType("int");

                    b.HasKey("LinkId");

                    b.HasIndex("SessionId");

                    b.HasIndex("State", "Guid")
                        .HasDatabaseName("IX_SessionLinks_StateGuid");

                    b.ToTable("SessionLinks", "canvas");
                });

            modelBuilder.Entity("NoorCanvas.Models.SharedAsset", b =>
                {
                    b.Property<long>("AssetId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("AssetId"));

                    b.Property<string>("AssetData")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AssetType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<long>("SessionId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("SharedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("AssetId");

                    b.HasIndex("SessionId", "SharedAt")
                        .HasDatabaseName("IX_SharedAssets_SessionShared");

                    b.ToTable("SharedAssets", "canvas");
                });

            modelBuilder.Entity("NoorCanvas.Models.User", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("City")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Country")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTime>("FirstJoinedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LastJoinedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("UserId");

                    b.ToTable("Users", "canvas");
                });

            modelBuilder.Entity("NoorCanvas.Models.Annotation", b =>
                {
                    b.HasOne("NoorCanvas.Models.Session", "Session")
                        .WithMany("Annotations")
                        .HasForeignKey("SessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Session");
                });

            modelBuilder.Entity("NoorCanvas.Models.AuditLog", b =>
                {
                    b.HasOne("NoorCanvas.Models.Session", "Session")
                        .WithMany()
                        .HasForeignKey("SessionId");

                    b.HasOne("NoorCanvas.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Session");

                    b.Navigation("User");
                });

            modelBuilder.Entity("NoorCanvas.Models.HostSession", b =>
                {
                    b.HasOne("NoorCanvas.Models.Session", "Session")
                        .WithMany("HostSessions")
                        .HasForeignKey("SessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Session");
                });

            modelBuilder.Entity("NoorCanvas.Models.Issue", b =>
                {
                    b.HasOne("NoorCanvas.Models.Session", "Session")
                        .WithMany()
                        .HasForeignKey("SessionId");

                    b.HasOne("NoorCanvas.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Session");

                    b.Navigation("User");
                });

            modelBuilder.Entity("NoorCanvas.Models.Question", b =>
                {
                    b.HasOne("NoorCanvas.Models.Session", "Session")
                        .WithMany("Questions")
                        .HasForeignKey("SessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NoorCanvas.Models.User", "User")
                        .WithMany("Questions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Session");

                    b.Navigation("User");
                });

            modelBuilder.Entity("NoorCanvas.Models.QuestionAnswer", b =>
                {
                    b.HasOne("NoorCanvas.Models.Question", "Question")
                        .WithMany("QuestionAnswers")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("NoorCanvas.Models.QuestionVote", b =>
                {
                    b.HasOne("NoorCanvas.Models.Question", "Question")
                        .WithMany("QuestionVotes")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NoorCanvas.Models.User", "User")
                        .WithMany("QuestionVotes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Question");

                    b.Navigation("User");
                });

            modelBuilder.Entity("NoorCanvas.Models.Registration", b =>
                {
                    b.HasOne("NoorCanvas.Models.Session", "Session")
                        .WithMany("Registrations")
                        .HasForeignKey("SessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NoorCanvas.Models.User", "User")
                        .WithMany("Registrations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Session");

                    b.Navigation("User");
                });

            modelBuilder.Entity("NoorCanvas.Models.SessionLink", b =>
                {
                    b.HasOne("NoorCanvas.Models.Session", "Session")
                        .WithMany("SessionLinks")
                        .HasForeignKey("SessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Session");
                });

            modelBuilder.Entity("NoorCanvas.Models.SharedAsset", b =>
                {
                    b.HasOne("NoorCanvas.Models.Session", "Session")
                        .WithMany("SharedAssets")
                        .HasForeignKey("SessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Session");
                });

            modelBuilder.Entity("NoorCanvas.Models.Question", b =>
                {
                    b.Navigation("QuestionAnswers");

                    b.Navigation("QuestionVotes");
                });

            modelBuilder.Entity("NoorCanvas.Models.Session", b =>
                {
                    b.Navigation("Annotations");

                    b.Navigation("HostSessions");

                    b.Navigation("Questions");

                    b.Navigation("Registrations");

                    b.Navigation("SessionLinks");

                    b.Navigation("SharedAssets");
                });

            modelBuilder.Entity("NoorCanvas.Models.User", b =>
                {
                    b.Navigation("QuestionVotes");

                    b.Navigation("Questions");

                    b.Navigation("Registrations");
                });
#pragma warning restore 612, 618
        }
    }
}
