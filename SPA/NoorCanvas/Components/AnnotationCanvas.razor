@using Microsoft.AspNetCore.SignalR.Client
@using System.Text.Json
@implements IAsyncDisposable
@inject IJSRuntime JSRuntime
@inject ILogger<AnnotationCanvas> Logger
@inject HttpClient Http
@inject NavigationManager Navigation

<div id="annotation-canvas-container" class="annotation-canvas-container" style="position: relative;">
    <svg class="annotation-overlay" 
         width="100%" 
         height="100%" 
         style="position: absolute; top: 0; left: 0; pointer-events: @(IsDrawingMode ? "auto" : "none"); z-index: 10;">
        @foreach (var annotation in Annotations)
        {
            @if (annotation.Type == "highlight")
            {
                <rect x="@annotation.X" 
                      y="@annotation.Y" 
                      width="@annotation.Width" 
                      height="@annotation.Height"
                      fill="@annotation.Color" 
                      fill-opacity="0.3" 
                      stroke="@annotation.Color" 
                      stroke-width="1"
                      data-annotation-id="@annotation.Id">
                </rect>
            }
            else if (annotation.Type == "drawing")
            {
                <path d="@annotation.Path" 
                      stroke="@annotation.Color" 
                      stroke-width="@annotation.StrokeWidth" 
                      fill="none"
                      data-annotation-id="@annotation.Id">
                </path>
            }
            else if (annotation.Type == "note")
            {
                <g data-annotation-id="@annotation.Id">
                    <circle cx="@annotation.X" 
                            cy="@annotation.Y" 
                            r="10" 
                            fill="@annotation.Color" 
                            stroke="#333" 
                            stroke-width="2">
                    </circle>
                    <text x="@annotation.X" 
                          y="@(annotation.Y + 4)" 
                          text-anchor="middle" 
                          font-size="12" 
                          fill="white">
                        i
                    </text>
                </g>
            }
        }
    </svg>
    
    <div class="content-container">
        @ChildContent
    </div>
</div>

@* Annotation Tools *@
@if (ShowTools)
{
    <div class="annotation-tools" style="position: fixed; top: 20px; right: 20px; background: white; padding: 10px; border-radius: 5px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); z-index: 1000;">
        <div class="btn-group" role="group">
            <button type="button" 
                    class="btn @(CurrentTool == "select" ? "btn-primary" : "btn-outline-primary")" 
                    @onclick="@(() => SetTool("select"))">
                <i class="fa fa-mouse-pointer"></i> Select
            </button>
            <button type="button" 
                    class="btn @(CurrentTool == "highlight" ? "btn-warning" : "btn-outline-warning")" 
                    @onclick="@(() => SetTool("highlight"))">
                <i class="fa fa-highlighter"></i> Highlight
            </button>
            <button type="button" 
                    class="btn @(CurrentTool == "drawing" ? "btn-success" : "btn-outline-success")" 
                    @onclick="@(() => SetTool("drawing"))">
                <i class="fa fa-pencil"></i> Draw
            </button>
            <button type="button" 
                    class="btn @(CurrentTool == "note" ? "btn-info" : "btn-outline-info")" 
                    @onclick="@(() => SetTool("note"))">
                <i class="fa fa-sticky-note"></i> Note
            </button>
        </div>
        
        <div class="color-picker" style="margin-top: 10px;">
            <span style="margin-right: 5px;">Color:</span>
            @foreach (var color in AvailableColors)
            {
                <button type="button" 
                        class="btn btn-sm" 
                        style="background-color: @color; width: 25px; height: 25px; margin: 2px; border: @(CurrentColor == color ? "2px solid #000" : "1px solid #ccc");"
                        @onclick="@(() => SetColor(color))">
                </button>
            }
        </div>
        
        @if (Annotations.Any())
        {
            <div style="margin-top: 10px;">
                <button type="button" class="btn btn-danger btn-sm" @onclick="ClearAllAnnotations">
                    <i class="fa fa-trash"></i> Clear All
                </button>
            </div>
        }
    </div>
}

@code {
    [Parameter] public RenderFragment? ChildContent { get; set; }
    [Parameter] public bool ShowTools { get; set; } = true;
    [Parameter] public bool IsDrawingMode { get; set; } = false;
    [Parameter] public long SessionId { get; set; }
    [Parameter] public string UserId { get; set; } = "";

    private string CurrentTool = "select";
    private string CurrentColor = "#ffff00";
    private List<AnnotationViewModel> Annotations = new();
    
    private readonly string[] AvailableColors = { "#ffff00", "#ff9900", "#ff0000", "#00ff00", "#0099ff", "#9900ff" };
    
    // ✅ LIVE SIGNALR: Hub connection for real-time annotation synchronization
    private HubConnection? hubConnection;

    protected override async Task OnInitializedAsync()
    {
        Logger.LogInformation("NOOR-ANNOTATION: Annotation canvas initialized for session {SessionId}", SessionId);
        
        // ✅ LIVE SIGNALR: Setup hub connection for real-time annotation synchronization
        await InitializeSignalRConnection();
        
        // Load existing annotations for this session
        await LoadAnnotations();
        
        StateHasChanged();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try 
            {
                // Initialize the JavaScript annotation system
                await JSRuntime.InvokeVoidAsync("NoorAnnotations.initialize", "annotation-canvas-container");
                await JSRuntime.InvokeVoidAsync("NoorAnnotations.setTool", CurrentTool);
                await JSRuntime.InvokeVoidAsync("NoorAnnotations.setColor", CurrentColor);
                
                Logger.LogInformation("NOOR-ANNOTATION: JavaScript annotation system initialized");
            }
            catch (Exception ex)
            {
                Logger.LogError(ex, "NOOR-ANNOTATION: Error initializing JavaScript annotation system");
            }
        }
    }

    private async Task SetTool(string tool)
    {
        CurrentTool = tool;
        IsDrawingMode = tool != "select";
        Logger.LogDebug("NOOR-ANNOTATION: Tool changed to {Tool}", tool);
        
        // Update JavaScript annotation system
        try 
        {
            await JSRuntime.InvokeVoidAsync("NoorAnnotations.setTool", tool);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "NOOR-ANNOTATION: Error setting tool in JavaScript: {Error}", ex.Message);
        }
        
        StateHasChanged();
    }

    private async Task SetColor(string color)
    {
        CurrentColor = color;
        Logger.LogDebug("NOOR-ANNOTATION: Color changed to {Color}", color);
        
        // Update JavaScript annotation system
        try 
        {
            await JSRuntime.InvokeVoidAsync("NoorAnnotations.setColor", color);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "NOOR-ANNOTATION: Error setting color in JavaScript: {Error}", ex.Message);
        }
        
        StateHasChanged();
    }

    private async Task LoadAnnotations()
    {
        try
        {
            Logger.LogInformation("NOOR-ANNOTATION: Loading annotations for session {SessionId}", SessionId);
            
            // ✅ LIVE API: Load annotations from database
            var response = await Http.GetAsync($"/api/annotations/session/{SessionId}");
            
            if (response.IsSuccessStatusCode)
            {
                var annotationsResponse = await response.Content.ReadFromJsonAsync<List<AnnotationViewModel>>();
                Annotations = annotationsResponse ?? new List<AnnotationViewModel>();
                
                Logger.LogInformation("NOOR-ANNOTATION: Loaded {Count} annotations from database", Annotations.Count);
            }
            else
            {
                Logger.LogWarning("NOOR-ANNOTATION: Failed to load annotations - Status: {StatusCode}", response.StatusCode);
                Annotations = new List<AnnotationViewModel>();
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "NOOR-ANNOTATION: Error loading annotations for session {SessionId}", SessionId);
            Annotations = new List<AnnotationViewModel>();
        }
    }

    private async Task InitializeSignalRConnection()
    {
        try
        {
            // ✅ LIVE SIGNALR: Create and configure hub connection
            hubConnection = new HubConnectionBuilder()
                .WithUrl(Navigation.ToAbsoluteUri("/hub/annotation"))
                .Build();

            // Handle incoming annotation updates from other users
            hubConnection.On<object>("AnnotationUpdated", async (annotationUpdate) =>
            {
                try
                {
                    Logger.LogDebug("NOOR-SIGNALR: Received annotation update for session {SessionId}", SessionId);
                    
                    // Refresh annotations from server to stay in sync
                    await LoadAnnotations();
                    await InvokeAsync(StateHasChanged);
                }
                catch (Exception ex)
                {
                    Logger.LogError(ex, "NOOR-SIGNALR: Error processing annotation update");
                }
            });

            // Handle session cleared events
            hubConnection.On("SessionCleared", async () =>
            {
                try
                {
                    Logger.LogInformation("NOOR-SIGNALR: Session {SessionId} annotations cleared by host", SessionId);
                    Annotations.Clear();
                    await InvokeAsync(StateHasChanged);
                }
                catch (Exception ex)
                {
                    Logger.LogError(ex, "NOOR-SIGNALR: Error processing session clear event");
                }
            });

            // Start the connection
            await hubConnection.StartAsync();
            Logger.LogInformation("NOOR-SIGNALR: Connected to annotation hub for session {SessionId}", SessionId);

            // Join the session group
            await hubConnection.SendAsync("JoinSession", SessionId, UserId);
            Logger.LogInformation("NOOR-SIGNALR: Joined session {SessionId} group", SessionId);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "NOOR-SIGNALR: Failed to initialize SignalR connection");
        }
    }

    private async Task ClearAllAnnotations()
    {
        try
        {
            Logger.LogInformation("NOOR-ANNOTATION: Clearing all annotations for session {SessionId}", SessionId);
            
            // ✅ LIVE API: Clear annotations from database
            var response = await Http.DeleteAsync($"/api/annotations/session/{SessionId}");
            
            if (response.IsSuccessStatusCode)
            {
                Annotations.Clear();
                Logger.LogInformation("NOOR-ANNOTATION: Successfully cleared all annotations for session {SessionId}", SessionId);
                
                // Broadcast clear event via SignalR (will be implemented in SignalR Hub todo)
                await BroadcastAnnotationUpdate("clear", null);
                
                StateHasChanged();
            }
            else
            {
                Logger.LogError("NOOR-ANNOTATION: Failed to clear annotations - Status: {StatusCode}", response.StatusCode);
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "NOOR-ANNOTATION: Error clearing annotations for session {SessionId}", SessionId);
        }
    }

    public async Task SaveAnnotation(AnnotationViewModel annotation)
    {
        try
        {
            Logger.LogInformation("NOOR-ANNOTATION: Saving annotation {AnnotationId} for session {SessionId}", annotation.Id, SessionId);
            
            // ✅ LIVE API: Save annotation to database
            annotation.CreatedBy = UserId;
            annotation.CreatedAt = DateTime.UtcNow;
            
            var response = await Http.PostAsJsonAsync($"/api/annotations/session/{SessionId}", annotation);
            
            if (response.IsSuccessStatusCode)
            {
                var savedAnnotation = await response.Content.ReadFromJsonAsync<AnnotationViewModel>();
                if (savedAnnotation != null)
                {
                    // Update local collection with database-generated ID
                    var existingIndex = Annotations.FindIndex(a => a.Id == annotation.Id);
                    if (existingIndex >= 0)
                    {
                        Annotations[existingIndex] = savedAnnotation;
                    }
                    else
                    {
                        Annotations.Add(savedAnnotation);
                    }
                    
                    Logger.LogInformation("NOOR-ANNOTATION: Successfully saved annotation {AnnotationId}", savedAnnotation.Id);
                    
                    // Broadcast annotation update via SignalR (will be implemented in SignalR Hub todo)
                    await BroadcastAnnotationUpdate("create", savedAnnotation);
                    
                    StateHasChanged();
                }
            }
            else
            {
                Logger.LogError("NOOR-ANNOTATION: Failed to save annotation - Status: {StatusCode}", response.StatusCode);
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "NOOR-ANNOTATION: Error saving annotation for session {SessionId}: {Error}", SessionId, ex.Message);
        }
    }

    private async Task BroadcastAnnotationUpdate(string action, AnnotationViewModel? annotation)
    {
        try
        {
            var message = new
            {
                Action = action,
                SessionId = SessionId,
                Annotation = annotation,
                Timestamp = DateTime.UtcNow,
                UserId = UserId
            };

            Logger.LogDebug("NOOR-ANNOTATION: Broadcasting {Action} for annotation in session {SessionId}", action, SessionId);
            
            // ✅ LIVE SIGNALR: Broadcast annotation update via SignalR hub
            if (hubConnection?.State == HubConnectionState.Connected)
            {
                await hubConnection.SendAsync("BroadcastAnnotation", message);
                Logger.LogDebug("NOOR-SIGNALR: Successfully broadcast {Action} update", action);
            }
            else
            {
                Logger.LogWarning("NOOR-SIGNALR: Cannot broadcast - hub connection not available (State: {State})", 
                    hubConnection?.State.ToString() ?? "null");
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "NOOR-ANNOTATION: Error broadcasting annotation update: {Error}", ex.Message);
        }
    }

    public async ValueTask DisposeAsync()
    {
        Logger.LogDebug("NOOR-ANNOTATION: Disposing annotation canvas for session {SessionId}", SessionId);
        
        // ✅ LIVE SIGNALR: Dispose hub connection properly
        if (hubConnection is not null)
        {
            try
            {
                await hubConnection.DisposeAsync();
                Logger.LogDebug("NOOR-SIGNALR: Hub connection disposed for session {SessionId}", SessionId);
            }
            catch (Exception ex)
            {
                Logger.LogError(ex, "NOOR-SIGNALR: Error disposing hub connection");
            }
        }
    }

    public class AnnotationViewModel
    {
        public long Id { get; set; }
        public string Type { get; set; } = "";
        public double X { get; set; }
        public double Y { get; set; }
        public double Width { get; set; }
        public double Height { get; set; }
        public string Path { get; set; } = "";
        public string Color { get; set; } = "#ffff00";
        public int StrokeWidth { get; set; } = 2;
        public string CreatedBy { get; set; } = "";
        public DateTime CreatedAt { get; set; } = DateTime.UtcNow;
    }
}
