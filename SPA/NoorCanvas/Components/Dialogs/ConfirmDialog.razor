@using Microsoft.AspNetCore.Components
@inject IJSRuntime JSRuntime

<div class="modal fade @(IsVisible ? "show" : "")" id="@ModalId" tabindex="-1" style="display: @(IsVisible ? "block" : "none")" aria-labelledby="@($"{ModalId}Label")" aria-hidden="@(!IsVisible)">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content noor-dialog">
            <div class="modal-header @GetHeaderClass()">
                <h5 class="modal-title" id="@($"{ModalId}Label")">
                    @GetIcon() @Title
                </h5>
                @if (ShowCloseButton)
                {
                    <button type="button" class="btn-close" @onclick="OnCancel" aria-label="Close"></button>
                }
            </div>
            <div class="modal-body">
                @if (!string.IsNullOrEmpty(Message))
                {
                    <p class="mb-0">@Message</p>
                }
                @ChildContent
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-outline-secondary" @onclick="OnCancel">
                    @CancelText
                </button>
                <button type="button" class="btn @GetConfirmButtonClass()" @onclick="OnConfirm">
                    @ConfirmText
                </button>
            </div>
        </div>
    </div>
</div>

@if (IsVisible)
{
    <div class="modal-backdrop fade show"></div>
}

@code {
    [Parameter] public string ModalId { get; set; } = $"confirmDialog_{Guid.NewGuid():N}";
    [Parameter] public string Title { get; set; } = "Confirm Action";
    [Parameter] public string Message { get; set; } = "";
    [Parameter] public ConfirmationType Type { get; set; } = ConfirmationType.Question;
    [Parameter] public string ConfirmText { get; set; } = "Yes";
    [Parameter] public string CancelText { get; set; } = "Cancel";
    [Parameter] public bool ShowCloseButton { get; set; } = true;
    [Parameter] public bool IsVisible { get; set; } = false;
    [Parameter] public EventCallback<bool> OnResult { get; set; }
    [Parameter] public RenderFragment? ChildContent { get; set; }

    public enum ConfirmationType
    {
        Question,
        Warning,
        Danger
    }

    private string GetHeaderClass()
    {
        return Type switch
        {
            ConfirmationType.Warning => "bg-warning text-dark",
            ConfirmationType.Danger => "bg-danger text-white",
            _ => "bg-info text-white"
        };
    }

    private string GetConfirmButtonClass()
    {
        return Type switch
        {
            ConfirmationType.Warning => "btn-warning",
            ConfirmationType.Danger => "btn-danger",
            _ => "btn-primary"
        };
    }

    private MarkupString GetIcon()
    {
        var icon = Type switch
        {
            ConfirmationType.Warning => "‚ö†Ô∏è",
            ConfirmationType.Danger => "üóëÔ∏è",
            _ => "‚ùì"
        };
        return new MarkupString(icon);
    }

    public async Task ShowAsync()
    {
        IsVisible = true;
        StateHasChanged();
        await Task.Delay(100); // Allow DOM to update
        await JSRuntime.InvokeVoidAsync("eval", $"document.getElementById('{ModalId}').focus()");
    }

    public Task HideAsync()
    {
        IsVisible = false;
        StateHasChanged();
        return Task.CompletedTask;
    }

    private async Task OnConfirm()
    {
        await HideAsync();
        await OnResult.InvokeAsync(true);
    }

    private async Task OnCancel()
    {
        await HideAsync();
        await OnResult.InvokeAsync(false);
    }

    // Public method for programmatic usage
    public async Task<bool> ShowConfirmAsync(string title, string message, ConfirmationType type = ConfirmationType.Question)
    {
        Title = title;
        Message = message;
        Type = type;
        
        var tcs = new TaskCompletionSource<bool>();
        
        OnResult = EventCallback.Factory.Create<bool>(this, result => tcs.SetResult(result));
        
        await ShowAsync();
        
        return await tcs.Task;
    }
}

<style>
    .noor-dialog {
        border: none;
        border-radius: 15px;
        box-shadow: 0 10px 30px rgba(0, 0, 0, 0.2);
    }

    .noor-dialog .modal-header {
        border-radius: 15px 15px 0 0;
        border-bottom: none;
        padding: 1.25rem;
    }

    .noor-dialog .modal-body {
        padding: 1.25rem;
        color: #444;
    }

    .noor-dialog .modal-footer {
        border-top: 1px solid #e9ecef;
        border-radius: 0 0 15px 15px;
        padding: 1rem 1.25rem;
    }

    .noor-dialog .btn-close {
        background: none;
        border: none;
        color: inherit;
        opacity: 0.8;
    }

    .noor-dialog .btn-close:hover {
        opacity: 1;
    }

    .noor-dialog .modal-footer .btn + .btn {
        margin-left: 0.5rem;
    }
</style>
