@using Microsoft.AspNetCore.Components
@using NoorCanvas.ViewModels
@using NoorCanvas.Components.Shared
@using NoorCanvas.Components.Host
@using Microsoft.AspNetCore.Components.Web

@* Main content component for HostControlPanel - Contains transcript and Q&A panels *@
<div class="host-main-container" style="display:flex;gap:1.5rem;width:100%;min-height:600px;align-items:stretch;">
    
    <!-- Left Panel: Session Transcript (70%) -->
    <div class="host-transcript-panel" style="flex:0 0 70%;background-color:white;border-radius:1.5rem;box-shadow:inset 0 2px 4px 0 rgba(0,0,0,0.06);border:1px solid #D4AF37;padding:1.5rem;display:flex;flex-direction:column;gap:1rem;">
        <h3 style="display:flex;align-items:center;justify-content:flex-start;gap:0.5rem;font-weight:800;font-size:1.5rem;color:#006400;margin-bottom:0.5rem;text-align:left;">
            <i class="fa-solid fa-file-lines" style="color:#006400;"></i>
            <span>Session Transcript</span>
            @if (IsLoading)
            {
                <div style="margin-left:auto;display:flex;align-items:center;gap:0.5rem;color:#D4AF37;font-size:0.875rem;font-weight:400;">
                    <LoadingSpinner Size="16" Color="#D4AF37" />
                    <span>Loading...</span>
                </div>
            }
        </h3>
        
        <!-- Transcript Content Area with Independent Scrolling -->
        <div style="flex:1;display:flex;flex-direction:column;overflow:hidden;">
            @if (IsLoading)
            {
                <div style="color:#6B7280;text-align:center;padding:3rem;display:flex;flex-direction:column;align-items:center;gap:1rem;">
                    <LoadingSpinner Size="40" Color="#D4AF37" Text="Loading session transcript..." ShowText="@true" />
                    <p style="margin:0;color:#9CA3AF;font-size:0.875rem;">Please wait while we retrieve the session content.</p>
                </div>
            }
            else if (!string.IsNullOrEmpty(Model?.TransformedTranscript))
            {
                <div style="flex:1;overflow-y:auto;border-radius:0.5rem;padding:1rem;" @ref="transcriptContainer">
                    <div class="html-viewer-content session-transcript-content" data-islamic-content>
                        @* Safe HTML rendering - Fixed appendChild error by proper MarkupString casting *@
                        @((MarkupString)OnRenderSafeHtml(Model?.TransformedTranscript ?? ""))
                    </div>
                </div>
            }
            else
            {
                <div style="flex:1;color:#6B7280;text-align:center;padding:2rem;display:flex;flex-direction:column;align-items:center;justify-content:center;">
                    <i class="fa-solid fa-file-text" style="font-size:2rem;margin-bottom:1rem;color:#9CA3AF;"></i>
                    <p style="margin:0;color:#6B7280;">No transcript available for this session.</p>
                </div>
            }
        </div>
        
        <!-- End Session Button -->
        @if (Model?.SessionStatus == "Active" && !string.IsNullOrEmpty(HostToken))
        {
            <div style="display:flex;justify-content:center;margin-top:1rem;padding-top:1rem;border-top:1px solid #E5E7EB;">
                <button @onclick="OnEndSession" 
                        disabled="@IsLoading"
                        style="padding:0.75rem 2rem;border-radius:1rem;box-shadow:0 8px 12px -2px rgba(220,38,38,0.4);color:white;font-weight:600;font-size:1rem;background-color:#DC2626;border:none;cursor:@(IsLoading ? "not-allowed" : "pointer");opacity:@(IsLoading ? "0.6" : "1");transition:all 0.2s ease;display:flex;align-items:center;justify-content:center;gap:0.5rem;" 
                        onmouseover="this.style.backgroundColor='#B91C1C'; this.style.transform='scale(1.05)'"
                        onmouseout="this.style.backgroundColor='#DC2626'; this.style.transform='scale(1)'">
                    @if (IsLoading)
                    {
                        <i class="fa-solid fa-spinner fa-spin" style="font-size:1rem;"></i>
                    }
                    else
                    {
                        <i class="fa-solid fa-stop" style="font-size:1rem;"></i>
                    }
                    <span>End Session</span>
                </button>
            </div>
        }
    </div>

    <!-- Right Panel: Q&A Sidebar (30%) -->
    <div class="host-qa-panel" style="flex:0 0 30%;background-color:white;border-radius:1.5rem;box-shadow:inset 0 2px 4px 0 rgba(0,0,0,0.06);border:1px solid #D4AF37;padding:1.5rem;display:flex;flex-direction:column;gap:1rem;">
        <h3 style="display:flex;align-items:center;justify-content:flex-start;gap:0.5rem;font-weight:800;font-size:1.25rem;color:#006400;margin-bottom:0.5rem;text-align:left;">
            <i class="fa-solid fa-clipboard-question" style="color:#006400;"></i>
            <span>Questions & Answers</span>
        </h3>
        
        <!-- Questions List with Independent Scrolling -->
        <div style="flex:1;overflow-y:auto;padding-right:0.5rem;max-height:500px;" class="custom-scrollbar">
            @if (Model?.Questions != null && Model.Questions.Any())
            {
                @foreach (var question in Model.Questions.OrderBy(q => q.IsAnswered).Select((q, i) => new { Question = q, Index = i }))
                {
                    <QuestionCard Question="@(new NoorCanvas.Components.Host.QuestionCard.QuestionDto { Id = (int)question.Question.Id.GetHashCode(), Text = question.Question.Text, UserName = question.Question.UserName, IsAnswered = question.Question.IsAnswered })" 
                                  Index="@question.Index"
                                  OnMarkAnswered="@(EventCallback.Factory.Create<int>(this, async (id) => await OnMarkQuestionAnswered.InvokeAsync(question.Question.Id)))" 
                                  OnDelete="@(EventCallback.Factory.Create<int>(this, async (id) => await OnShowDeleteModal.InvokeAsync(question.Question.Id)))" />
                }
            }
            else
            {
                <div style="text-align:center;color:#6B7280;padding:2rem;flex:1;display:flex;flex-direction:column;align-items:center;justify-content:center;">
                    <div style="background:linear-gradient(135deg,#F3F4F6,#E5E7EB);border-radius:50%;width:4rem;height:4rem;display:flex;align-items:center;justify-content:center;margin-bottom:1rem;">
                        <i class="fa-solid fa-clipboard-question" style="font-size:1.5rem;color:#9CA3AF;"></i>
                    </div>
                    <h4 style="margin:0 0 0.5rem 0;font-size:1rem;font-weight:600;color:#4B5563;">No Questions Yet</h4>
                    <p style="margin:0;font-size:0.875rem;line-height:1.4;color:#6B7280;">Questions will appear here when participants submit them during the session.</p>
                </div>
            }
        </div>
    </div>
</div>

@code {
    [Parameter] public HostControlPanelViewModel? Model { get; set; }
    [Parameter] public string? HostToken { get; set; }
    [Parameter] public bool IsLoading { get; set; }
    [Parameter] public EventCallback OnEndSession { get; set; }
    [Parameter] public EventCallback<Guid> OnMarkQuestionAnswered { get; set; }
    [Parameter] public EventCallback<Guid> OnShowDeleteModal { get; set; }
    [Parameter] public Func<string, MarkupString> OnRenderSafeHtml { get; set; } = (html) => new MarkupString(html);
    
    private ElementReference transcriptContainer;
}