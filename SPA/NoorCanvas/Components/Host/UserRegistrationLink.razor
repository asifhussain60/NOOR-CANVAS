@* User Registration Link Component - Extracted from HostControlPanel *@
@using Microsoft.AspNetCore.Components
@inject IJSRuntime JSRuntime

@if (!string.IsNullOrEmpty(UserToken))
{
    <div style="width:100%;background-color:#F0F9FF;border-radius:1rem;border:1px solid #3B82F6;padding:1.5rem;text-align:left;margin-bottom:1rem;">
        <h4 style="display:flex;align-items:center;justify-content:center;gap:0.5rem;font-weight:600;font-size:1rem;color:#3B82F6;margin-bottom:1rem;text-align:center;">
            <i class="fa-solid fa-link" style="color:#3B82F6;"></i>
            <span>User Registration Link</span>
        </h4>
        <div style="background-color:white;border-radius:0.5rem;padding:0.75rem;border:1px solid #E2E8F0;">
            <div style="display:flex;align-items:center;justify-content:space-between;gap:0.5rem;">
                <a href="@UserRegistrationUrl" 
                   target="_blank" 
                   @onclick="HandleUserLinkClick"
                   style="flex:1;background:transparent;border:none;color:#3B82F6;font-size:0.875rem;font-family:monospace;outline:none;text-align:center;text-decoration:none;cursor:pointer;padding:0.25rem;border-radius:0.25rem;transition:background-color 0.2s;"
                   title="Click to open in new window and copy to clipboard">
                    @UserRegistrationUrl
                </a>
                <button @onclick="CopyUserLink" 
                        style="@GetCopyButtonStyle()"
                        title="Copy link to clipboard">
                    <i class="@GetCopyIcon()"></i> @GetCopyText()
                </button>
            </div>
        </div>
        <p style="font-family:'Inter',sans-serif;font-size:0.75rem;color:#706357;margin-top:0.5rem;margin-bottom:0;text-align:center;">
            Click the link to open in a new window, or use the copy button to share with participants
        </p>
    </div>
}

@code {
    [Parameter, EditorRequired] public string UserToken { get; set; } = "";
    [Parameter] public string BaseUrl { get; set; } = "https://localhost:9091";
    [Parameter] public EventCallback<string> OnLinkCopied { get; set; }

    private bool isCopied = false;
    private string UserRegistrationUrl => $"{BaseUrl}/user/landing/{UserToken}";

    private async Task CopyUserLink()
    {
        try
        {
            if (!string.IsNullOrEmpty(UserToken))
            {
                await JSRuntime.InvokeVoidAsync("navigator.clipboard.writeText", UserRegistrationUrl);
                isCopied = true;
                StateHasChanged();
                
                if (OnLinkCopied.HasDelegate)
                {
                    await OnLinkCopied.InvokeAsync(UserRegistrationUrl);
                }
                
                // Reset copy state after 3 seconds
                await Task.Delay(3000);
                isCopied = false;
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error copying user URL to clipboard: {ex.Message}");
        }
    }

    private async Task HandleUserLinkClick()
    {
        // Copy to clipboard when link is clicked
        await CopyUserLink();
    }

    private string GetCopyButtonStyle()
    {
        var baseStyle = "padding:0.5rem 1rem;border:none;border-radius:0.5rem;font-size:0.75rem;font-weight:600;cursor:pointer;transition:all 0.2s;display:flex;align-items:center;gap:0.375rem;";
        
        if (isCopied)
        {
            return baseStyle + "background:#10B981;color:white;";
        }
        else
        {
            return baseStyle + "background:#3B82F6;color:white;";
        }
    }

    private string GetCopyIcon()
    {
        return isCopied ? "fa-solid fa-check" : "fa-solid fa-copy";
    }

    private string GetCopyText()
    {
        return isCopied ? "Copied!" : "Copy";
    }
}